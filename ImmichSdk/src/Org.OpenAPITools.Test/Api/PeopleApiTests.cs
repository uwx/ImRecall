/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing PeopleApi
    /// </summary>
    public sealed class PeopleApiTests : ApiTestsBase
    {
        private readonly IPeopleApi _instance;

        public PeopleApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IPeopleApi>();
        }

        /// <summary>
        /// Test CreatePerson
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreatePersonAsyncTest()
        {
            PersonCreateDto personCreateDto = default!;
            var response = await _instance.CreatePersonAsync(personCreateDto);
            var model = response.Created();
            Assert.IsType<PersonResponseDto>(model);
        }

        /// <summary>
        /// Test DeletePeople
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeletePeopleAsyncTest()
        {
            BulkIdsDto bulkIdsDto = default!;
            await _instance.DeletePeopleAsync(bulkIdsDto);
        }

        /// <summary>
        /// Test DeletePerson
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeletePersonAsyncTest()
        {
            Guid id = default!;
            await _instance.DeletePersonAsync(id);
        }

        /// <summary>
        /// Test GetAllPeople
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAllPeopleAsyncTest()
        {
            Client.Option<Guid> closestAssetId = default!;
            Client.Option<Guid> closestPersonId = default!;
            Client.Option<decimal> page = default!;
            Client.Option<decimal> size = default!;
            Client.Option<bool> withHidden = default!;
            var response = await _instance.GetAllPeopleAsync(closestAssetId, closestPersonId, page, size, withHidden);
            var model = response.Ok();
            Assert.IsType<PeopleResponseDto>(model);
        }

        /// <summary>
        /// Test GetPerson
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPersonAsyncTest()
        {
            Guid id = default!;
            var response = await _instance.GetPersonAsync(id);
            var model = response.Ok();
            Assert.IsType<PersonResponseDto>(model);
        }

        /// <summary>
        /// Test GetPersonStatistics
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPersonStatisticsAsyncTest()
        {
            Guid id = default!;
            var response = await _instance.GetPersonStatisticsAsync(id);
            var model = response.Ok();
            Assert.IsType<PersonStatisticsResponseDto>(model);
        }

        /// <summary>
        /// Test GetPersonThumbnail
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPersonThumbnailAsyncTest()
        {
            Guid id = default!;
            var response = await _instance.GetPersonThumbnailAsync(id);
            var model = response.Ok();
            Assert.IsType<System.IO.Stream>(model);
        }

        /// <summary>
        /// Test MergePerson
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MergePersonAsyncTest()
        {
            Guid id = default!;
            MergePersonDto mergePersonDto = default!;
            var response = await _instance.MergePersonAsync(id, mergePersonDto);
            var model = response.Ok();
            Assert.IsType<List<BulkIdResponseDto>>(model);
        }

        /// <summary>
        /// Test ReassignFaces
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ReassignFacesAsyncTest()
        {
            Guid id = default!;
            AssetFaceUpdateDto assetFaceUpdateDto = default!;
            var response = await _instance.ReassignFacesAsync(id, assetFaceUpdateDto);
            var model = response.Ok();
            Assert.IsType<List<PersonResponseDto>>(model);
        }

        /// <summary>
        /// Test UpdatePeople
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdatePeopleAsyncTest()
        {
            PeopleUpdateDto peopleUpdateDto = default!;
            var response = await _instance.UpdatePeopleAsync(peopleUpdateDto);
            var model = response.Ok();
            Assert.IsType<List<BulkIdResponseDto>>(model);
        }

        /// <summary>
        /// Test UpdatePerson
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdatePersonAsyncTest()
        {
            Guid id = default!;
            PersonUpdateDto personUpdateDto = default!;
            var response = await _instance.UpdatePersonAsync(id, personUpdateDto);
            var model = response.Ok();
            Assert.IsType<PersonResponseDto>(model);
        }
    }
}
