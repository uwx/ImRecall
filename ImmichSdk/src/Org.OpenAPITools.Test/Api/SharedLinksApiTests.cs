/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing SharedLinksApi
    /// </summary>
    public sealed class SharedLinksApiTests : ApiTestsBase
    {
        private readonly ISharedLinksApi _instance;

        public SharedLinksApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<ISharedLinksApi>();
        }

        /// <summary>
        /// Test AddSharedLinkAssets
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task AddSharedLinkAssetsAsyncTest()
        {
            Guid id = default!;
            AssetIdsDto assetIdsDto = default!;
            Client.Option<string> key = default!;
            Client.Option<string> slug = default!;
            var response = await _instance.AddSharedLinkAssetsAsync(id, assetIdsDto, key, slug);
            var model = response.Ok();
            Assert.IsType<List<AssetIdsResponseDto>>(model);
        }

        /// <summary>
        /// Test CreateSharedLink
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateSharedLinkAsyncTest()
        {
            SharedLinkCreateDto sharedLinkCreateDto = default!;
            var response = await _instance.CreateSharedLinkAsync(sharedLinkCreateDto);
            var model = response.Created();
            Assert.IsType<SharedLinkResponseDto>(model);
        }

        /// <summary>
        /// Test GetAllSharedLinks
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAllSharedLinksAsyncTest()
        {
            Client.Option<Guid> albumId = default!;
            var response = await _instance.GetAllSharedLinksAsync(albumId);
            var model = response.Ok();
            Assert.IsType<List<SharedLinkResponseDto>>(model);
        }

        /// <summary>
        /// Test GetMySharedLink
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetMySharedLinkAsyncTest()
        {
            Client.Option<string> password = default!;
            Client.Option<string> token = default!;
            Client.Option<string> key = default!;
            Client.Option<string> slug = default!;
            var response = await _instance.GetMySharedLinkAsync(password, token, key, slug);
            var model = response.Ok();
            Assert.IsType<SharedLinkResponseDto>(model);
        }

        /// <summary>
        /// Test GetSharedLinkById
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSharedLinkByIdAsyncTest()
        {
            Guid id = default!;
            var response = await _instance.GetSharedLinkByIdAsync(id);
            var model = response.Ok();
            Assert.IsType<SharedLinkResponseDto>(model);
        }

        /// <summary>
        /// Test RemoveSharedLink
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task RemoveSharedLinkAsyncTest()
        {
            Guid id = default!;
            await _instance.RemoveSharedLinkAsync(id);
        }

        /// <summary>
        /// Test RemoveSharedLinkAssets
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task RemoveSharedLinkAssetsAsyncTest()
        {
            Guid id = default!;
            AssetIdsDto assetIdsDto = default!;
            Client.Option<string> key = default!;
            Client.Option<string> slug = default!;
            var response = await _instance.RemoveSharedLinkAssetsAsync(id, assetIdsDto, key, slug);
            var model = response.Ok();
            Assert.IsType<List<AssetIdsResponseDto>>(model);
        }

        /// <summary>
        /// Test UpdateSharedLink
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateSharedLinkAsyncTest()
        {
            Guid id = default!;
            SharedLinkEditDto sharedLinkEditDto = default!;
            var response = await _instance.UpdateSharedLinkAsync(id, sharedLinkEditDto);
            var model = response.Ok();
            Assert.IsType<SharedLinkResponseDto>(model);
        }
    }
}
