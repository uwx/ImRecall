/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing UsersApi
    /// </summary>
    public sealed class UsersApiTests : ApiTestsBase
    {
        private readonly IUsersApi _instance;

        public UsersApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IUsersApi>();
        }

        /// <summary>
        /// Test CreateProfileImage
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateProfileImageAsyncTest()
        {
            System.IO.Stream file = default!;
            var response = await _instance.CreateProfileImageAsync(file);
            var model = response.Created();
            Assert.IsType<CreateProfileImageResponseDto>(model);
        }

        /// <summary>
        /// Test DeleteProfileImage
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteProfileImageAsyncTest()
        {
            await _instance.DeleteProfileImageAsync();
        }

        /// <summary>
        /// Test DeleteUserLicense
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteUserLicenseAsyncTest()
        {
            await _instance.DeleteUserLicenseAsync();
        }

        /// <summary>
        /// Test DeleteUserOnboarding
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteUserOnboardingAsyncTest()
        {
            await _instance.DeleteUserOnboardingAsync();
        }

        /// <summary>
        /// Test GetMyPreferences
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetMyPreferencesAsyncTest()
        {
            var response = await _instance.GetMyPreferencesAsync();
            var model = response.Ok();
            Assert.IsType<UserPreferencesResponseDto>(model);
        }

        /// <summary>
        /// Test GetMyUser
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetMyUserAsyncTest()
        {
            var response = await _instance.GetMyUserAsync();
            var model = response.Ok();
            Assert.IsType<UserAdminResponseDto>(model);
        }

        /// <summary>
        /// Test GetProfileImage
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetProfileImageAsyncTest()
        {
            Guid id = default!;
            var response = await _instance.GetProfileImageAsync(id);
            var model = response.Ok();
            Assert.IsType<System.IO.Stream>(model);
        }

        /// <summary>
        /// Test GetUser
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetUserAsyncTest()
        {
            Guid id = default!;
            var response = await _instance.GetUserAsync(id);
            var model = response.Ok();
            Assert.IsType<UserResponseDto>(model);
        }

        /// <summary>
        /// Test GetUserLicense
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetUserLicenseAsyncTest()
        {
            var response = await _instance.GetUserLicenseAsync();
            var model = response.Ok();
            Assert.IsType<LicenseResponseDto>(model);
        }

        /// <summary>
        /// Test GetUserOnboarding
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetUserOnboardingAsyncTest()
        {
            var response = await _instance.GetUserOnboardingAsync();
            var model = response.Ok();
            Assert.IsType<OnboardingResponseDto>(model);
        }

        /// <summary>
        /// Test SearchUsers
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SearchUsersAsyncTest()
        {
            var response = await _instance.SearchUsersAsync();
            var model = response.Ok();
            Assert.IsType<List<UserResponseDto>>(model);
        }

        /// <summary>
        /// Test SetUserLicense
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SetUserLicenseAsyncTest()
        {
            LicenseKeyDto licenseKeyDto = default!;
            var response = await _instance.SetUserLicenseAsync(licenseKeyDto);
            var model = response.Ok();
            Assert.IsType<LicenseResponseDto>(model);
        }

        /// <summary>
        /// Test SetUserOnboarding
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SetUserOnboardingAsyncTest()
        {
            OnboardingDto onboardingDto = default!;
            var response = await _instance.SetUserOnboardingAsync(onboardingDto);
            var model = response.Ok();
            Assert.IsType<OnboardingResponseDto>(model);
        }

        /// <summary>
        /// Test UpdateMyPreferences
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateMyPreferencesAsyncTest()
        {
            UserPreferencesUpdateDto userPreferencesUpdateDto = default!;
            var response = await _instance.UpdateMyPreferencesAsync(userPreferencesUpdateDto);
            var model = response.Ok();
            Assert.IsType<UserPreferencesResponseDto>(model);
        }

        /// <summary>
        /// Test UpdateMyUser
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateMyUserAsyncTest()
        {
            UserUpdateMeDto userUpdateMeDto = default!;
            var response = await _instance.UpdateMyUserAsync(userUpdateMeDto);
            var model = response.Ok();
            Assert.IsType<UserAdminResponseDto>(model);
        }
    }
}
