/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;
using System.Collections.Generic;
using System.Security.Cryptography;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Extensions;
using Xunit;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Tests the dependency injection.
    /// </summary>
    public class DependencyInjectionTest
    {
        private readonly IHost _hostUsingConfigureWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {
                ApiKeyToken apiKeyToken1 = new("<token>", ClientUtils.ApiKeyHeader.Immich_access_token, timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(apiKeyToken1);

                ApiKeyToken apiKeyToken2 = new("<token>", ClientUtils.ApiKeyHeader.X_api_key, timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(apiKeyToken2);

                BearerToken bearerToken1 = new("<token>", timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(bearerToken1);
            })
            .Build();

        private readonly IHost _hostUsingConfigureWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {
                ApiKeyToken apiKeyToken1 = new("<token>", ClientUtils.ApiKeyHeader.Immich_access_token, timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(apiKeyToken1);

                ApiKeyToken apiKeyToken2 = new("<token>", ClientUtils.ApiKeyHeader.X_api_key, timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(apiKeyToken2);

                BearerToken bearerToken1 = new("<token>", timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(bearerToken1);
                options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
            })
            .Build();

        private readonly IHost _hostUsingAddWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {
                    ApiKeyToken apiKeyToken1 = new("<token>", ClientUtils.ApiKeyHeader.Immich_access_token, timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(apiKeyToken1);

                    ApiKeyToken apiKeyToken2 = new("<token>", ClientUtils.ApiKeyHeader.X_api_key, timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(apiKeyToken2);

                    BearerToken bearerToken1 = new("<token>", timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(bearerToken1);
                });
            })
            .Build();

        private readonly IHost _hostUsingAddWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {
                    ApiKeyToken apiKeyToken1 = new("<token>", ClientUtils.ApiKeyHeader.Immich_access_token, timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(apiKeyToken1);

                    ApiKeyToken apiKeyToken2 = new("<token>", ClientUtils.ApiKeyHeader.X_api_key, timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(apiKeyToken2);

                    BearerToken bearerToken1 = new("<token>", timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(bearerToken1);
                    options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
                });
            })
            .Build();

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithAClientTest()
        {
            var aPIKeysApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IAPIKeysApi>();
            Assert.True(aPIKeysApi.HttpClient.BaseAddress != null);

            var activitiesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IActivitiesApi>();
            Assert.True(activitiesApi.HttpClient.BaseAddress != null);

            var albumsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IAlbumsApi>();
            Assert.True(albumsApi.HttpClient.BaseAddress != null);

            var assetsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IAssetsApi>();
            Assert.True(assetsApi.HttpClient.BaseAddress != null);

            var authAdminApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IAuthAdminApi>();
            Assert.True(authAdminApi.HttpClient.BaseAddress != null);

            var authenticationApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IAuthenticationApi>();
            Assert.True(authenticationApi.HttpClient.BaseAddress != null);

            var deprecatedApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IDeprecatedApi>();
            Assert.True(deprecatedApi.HttpClient.BaseAddress != null);

            var downloadApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IDownloadApi>();
            Assert.True(downloadApi.HttpClient.BaseAddress != null);

            var duplicatesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IDuplicatesApi>();
            Assert.True(duplicatesApi.HttpClient.BaseAddress != null);

            var facesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IFacesApi>();
            Assert.True(facesApi.HttpClient.BaseAddress != null);

            var jobsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IJobsApi>();
            Assert.True(jobsApi.HttpClient.BaseAddress != null);

            var librariesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ILibrariesApi>();
            Assert.True(librariesApi.HttpClient.BaseAddress != null);

            var mapApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IMapApi>();
            Assert.True(mapApi.HttpClient.BaseAddress != null);

            var memoriesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IMemoriesApi>();
            Assert.True(memoriesApi.HttpClient.BaseAddress != null);

            var notificationsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<INotificationsApi>();
            Assert.True(notificationsApi.HttpClient.BaseAddress != null);

            var notificationsAdminApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<INotificationsAdminApi>();
            Assert.True(notificationsAdminApi.HttpClient.BaseAddress != null);

            var oAuthApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IOAuthApi>();
            Assert.True(oAuthApi.HttpClient.BaseAddress != null);

            var partnersApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IPartnersApi>();
            Assert.True(partnersApi.HttpClient.BaseAddress != null);

            var peopleApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IPeopleApi>();
            Assert.True(peopleApi.HttpClient.BaseAddress != null);

            var searchApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ISearchApi>();
            Assert.True(searchApi.HttpClient.BaseAddress != null);

            var serverApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IServerApi>();
            Assert.True(serverApi.HttpClient.BaseAddress != null);

            var sessionsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ISessionsApi>();
            Assert.True(sessionsApi.HttpClient.BaseAddress != null);

            var sharedLinksApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ISharedLinksApi>();
            Assert.True(sharedLinksApi.HttpClient.BaseAddress != null);

            var stacksApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IStacksApi>();
            Assert.True(stacksApi.HttpClient.BaseAddress != null);

            var syncApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ISyncApi>();
            Assert.True(syncApi.HttpClient.BaseAddress != null);

            var systemConfigApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ISystemConfigApi>();
            Assert.True(systemConfigApi.HttpClient.BaseAddress != null);

            var systemMetadataApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ISystemMetadataApi>();
            Assert.True(systemMetadataApi.HttpClient.BaseAddress != null);

            var tagsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ITagsApi>();
            Assert.True(tagsApi.HttpClient.BaseAddress != null);

            var timelineApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ITimelineApi>();
            Assert.True(timelineApi.HttpClient.BaseAddress != null);

            var trashApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ITrashApi>();
            Assert.True(trashApi.HttpClient.BaseAddress != null);

            var usersApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IUsersApi>();
            Assert.True(usersApi.HttpClient.BaseAddress != null);

            var usersAdminApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IUsersAdminApi>();
            Assert.True(usersAdminApi.HttpClient.BaseAddress != null);

            var viewApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IViewApi>();
            Assert.True(viewApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithoutAClientTest()
        {
            var aPIKeysApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IAPIKeysApi>();
            Assert.True(aPIKeysApi.HttpClient.BaseAddress != null);

            var activitiesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IActivitiesApi>();
            Assert.True(activitiesApi.HttpClient.BaseAddress != null);

            var albumsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IAlbumsApi>();
            Assert.True(albumsApi.HttpClient.BaseAddress != null);

            var assetsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IAssetsApi>();
            Assert.True(assetsApi.HttpClient.BaseAddress != null);

            var authAdminApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IAuthAdminApi>();
            Assert.True(authAdminApi.HttpClient.BaseAddress != null);

            var authenticationApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IAuthenticationApi>();
            Assert.True(authenticationApi.HttpClient.BaseAddress != null);

            var deprecatedApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IDeprecatedApi>();
            Assert.True(deprecatedApi.HttpClient.BaseAddress != null);

            var downloadApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IDownloadApi>();
            Assert.True(downloadApi.HttpClient.BaseAddress != null);

            var duplicatesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IDuplicatesApi>();
            Assert.True(duplicatesApi.HttpClient.BaseAddress != null);

            var facesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IFacesApi>();
            Assert.True(facesApi.HttpClient.BaseAddress != null);

            var jobsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IJobsApi>();
            Assert.True(jobsApi.HttpClient.BaseAddress != null);

            var librariesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ILibrariesApi>();
            Assert.True(librariesApi.HttpClient.BaseAddress != null);

            var mapApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IMapApi>();
            Assert.True(mapApi.HttpClient.BaseAddress != null);

            var memoriesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IMemoriesApi>();
            Assert.True(memoriesApi.HttpClient.BaseAddress != null);

            var notificationsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<INotificationsApi>();
            Assert.True(notificationsApi.HttpClient.BaseAddress != null);

            var notificationsAdminApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<INotificationsAdminApi>();
            Assert.True(notificationsAdminApi.HttpClient.BaseAddress != null);

            var oAuthApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IOAuthApi>();
            Assert.True(oAuthApi.HttpClient.BaseAddress != null);

            var partnersApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IPartnersApi>();
            Assert.True(partnersApi.HttpClient.BaseAddress != null);

            var peopleApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IPeopleApi>();
            Assert.True(peopleApi.HttpClient.BaseAddress != null);

            var searchApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ISearchApi>();
            Assert.True(searchApi.HttpClient.BaseAddress != null);

            var serverApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IServerApi>();
            Assert.True(serverApi.HttpClient.BaseAddress != null);

            var sessionsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ISessionsApi>();
            Assert.True(sessionsApi.HttpClient.BaseAddress != null);

            var sharedLinksApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ISharedLinksApi>();
            Assert.True(sharedLinksApi.HttpClient.BaseAddress != null);

            var stacksApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IStacksApi>();
            Assert.True(stacksApi.HttpClient.BaseAddress != null);

            var syncApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ISyncApi>();
            Assert.True(syncApi.HttpClient.BaseAddress != null);

            var systemConfigApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ISystemConfigApi>();
            Assert.True(systemConfigApi.HttpClient.BaseAddress != null);

            var systemMetadataApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ISystemMetadataApi>();
            Assert.True(systemMetadataApi.HttpClient.BaseAddress != null);

            var tagsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ITagsApi>();
            Assert.True(tagsApi.HttpClient.BaseAddress != null);

            var timelineApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ITimelineApi>();
            Assert.True(timelineApi.HttpClient.BaseAddress != null);

            var trashApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ITrashApi>();
            Assert.True(trashApi.HttpClient.BaseAddress != null);

            var usersApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IUsersApi>();
            Assert.True(usersApi.HttpClient.BaseAddress != null);

            var usersAdminApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IUsersAdminApi>();
            Assert.True(usersAdminApi.HttpClient.BaseAddress != null);

            var viewApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IViewApi>();
            Assert.True(viewApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithAClientTest()
        {
            var aPIKeysApi = _hostUsingAddWithAClient.Services.GetRequiredService<IAPIKeysApi>();
            Assert.True(aPIKeysApi.HttpClient.BaseAddress != null);
            
            var activitiesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IActivitiesApi>();
            Assert.True(activitiesApi.HttpClient.BaseAddress != null);
            
            var albumsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IAlbumsApi>();
            Assert.True(albumsApi.HttpClient.BaseAddress != null);
            
            var assetsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IAssetsApi>();
            Assert.True(assetsApi.HttpClient.BaseAddress != null);
            
            var authAdminApi = _hostUsingAddWithAClient.Services.GetRequiredService<IAuthAdminApi>();
            Assert.True(authAdminApi.HttpClient.BaseAddress != null);
            
            var authenticationApi = _hostUsingAddWithAClient.Services.GetRequiredService<IAuthenticationApi>();
            Assert.True(authenticationApi.HttpClient.BaseAddress != null);
            
            var deprecatedApi = _hostUsingAddWithAClient.Services.GetRequiredService<IDeprecatedApi>();
            Assert.True(deprecatedApi.HttpClient.BaseAddress != null);
            
            var downloadApi = _hostUsingAddWithAClient.Services.GetRequiredService<IDownloadApi>();
            Assert.True(downloadApi.HttpClient.BaseAddress != null);
            
            var duplicatesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IDuplicatesApi>();
            Assert.True(duplicatesApi.HttpClient.BaseAddress != null);
            
            var facesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IFacesApi>();
            Assert.True(facesApi.HttpClient.BaseAddress != null);
            
            var jobsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IJobsApi>();
            Assert.True(jobsApi.HttpClient.BaseAddress != null);
            
            var librariesApi = _hostUsingAddWithAClient.Services.GetRequiredService<ILibrariesApi>();
            Assert.True(librariesApi.HttpClient.BaseAddress != null);
            
            var mapApi = _hostUsingAddWithAClient.Services.GetRequiredService<IMapApi>();
            Assert.True(mapApi.HttpClient.BaseAddress != null);
            
            var memoriesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IMemoriesApi>();
            Assert.True(memoriesApi.HttpClient.BaseAddress != null);
            
            var notificationsApi = _hostUsingAddWithAClient.Services.GetRequiredService<INotificationsApi>();
            Assert.True(notificationsApi.HttpClient.BaseAddress != null);
            
            var notificationsAdminApi = _hostUsingAddWithAClient.Services.GetRequiredService<INotificationsAdminApi>();
            Assert.True(notificationsAdminApi.HttpClient.BaseAddress != null);
            
            var oAuthApi = _hostUsingAddWithAClient.Services.GetRequiredService<IOAuthApi>();
            Assert.True(oAuthApi.HttpClient.BaseAddress != null);
            
            var partnersApi = _hostUsingAddWithAClient.Services.GetRequiredService<IPartnersApi>();
            Assert.True(partnersApi.HttpClient.BaseAddress != null);
            
            var peopleApi = _hostUsingAddWithAClient.Services.GetRequiredService<IPeopleApi>();
            Assert.True(peopleApi.HttpClient.BaseAddress != null);
            
            var searchApi = _hostUsingAddWithAClient.Services.GetRequiredService<ISearchApi>();
            Assert.True(searchApi.HttpClient.BaseAddress != null);
            
            var serverApi = _hostUsingAddWithAClient.Services.GetRequiredService<IServerApi>();
            Assert.True(serverApi.HttpClient.BaseAddress != null);
            
            var sessionsApi = _hostUsingAddWithAClient.Services.GetRequiredService<ISessionsApi>();
            Assert.True(sessionsApi.HttpClient.BaseAddress != null);
            
            var sharedLinksApi = _hostUsingAddWithAClient.Services.GetRequiredService<ISharedLinksApi>();
            Assert.True(sharedLinksApi.HttpClient.BaseAddress != null);
            
            var stacksApi = _hostUsingAddWithAClient.Services.GetRequiredService<IStacksApi>();
            Assert.True(stacksApi.HttpClient.BaseAddress != null);
            
            var syncApi = _hostUsingAddWithAClient.Services.GetRequiredService<ISyncApi>();
            Assert.True(syncApi.HttpClient.BaseAddress != null);
            
            var systemConfigApi = _hostUsingAddWithAClient.Services.GetRequiredService<ISystemConfigApi>();
            Assert.True(systemConfigApi.HttpClient.BaseAddress != null);
            
            var systemMetadataApi = _hostUsingAddWithAClient.Services.GetRequiredService<ISystemMetadataApi>();
            Assert.True(systemMetadataApi.HttpClient.BaseAddress != null);
            
            var tagsApi = _hostUsingAddWithAClient.Services.GetRequiredService<ITagsApi>();
            Assert.True(tagsApi.HttpClient.BaseAddress != null);
            
            var timelineApi = _hostUsingAddWithAClient.Services.GetRequiredService<ITimelineApi>();
            Assert.True(timelineApi.HttpClient.BaseAddress != null);
            
            var trashApi = _hostUsingAddWithAClient.Services.GetRequiredService<ITrashApi>();
            Assert.True(trashApi.HttpClient.BaseAddress != null);
            
            var usersApi = _hostUsingAddWithAClient.Services.GetRequiredService<IUsersApi>();
            Assert.True(usersApi.HttpClient.BaseAddress != null);
            
            var usersAdminApi = _hostUsingAddWithAClient.Services.GetRequiredService<IUsersAdminApi>();
            Assert.True(usersAdminApi.HttpClient.BaseAddress != null);
            
            var viewApi = _hostUsingAddWithAClient.Services.GetRequiredService<IViewApi>();
            Assert.True(viewApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithoutAClientTest()
        {
            var aPIKeysApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IAPIKeysApi>();
            Assert.True(aPIKeysApi.HttpClient.BaseAddress != null);

            var activitiesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IActivitiesApi>();
            Assert.True(activitiesApi.HttpClient.BaseAddress != null);

            var albumsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IAlbumsApi>();
            Assert.True(albumsApi.HttpClient.BaseAddress != null);

            var assetsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IAssetsApi>();
            Assert.True(assetsApi.HttpClient.BaseAddress != null);

            var authAdminApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IAuthAdminApi>();
            Assert.True(authAdminApi.HttpClient.BaseAddress != null);

            var authenticationApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IAuthenticationApi>();
            Assert.True(authenticationApi.HttpClient.BaseAddress != null);

            var deprecatedApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IDeprecatedApi>();
            Assert.True(deprecatedApi.HttpClient.BaseAddress != null);

            var downloadApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IDownloadApi>();
            Assert.True(downloadApi.HttpClient.BaseAddress != null);

            var duplicatesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IDuplicatesApi>();
            Assert.True(duplicatesApi.HttpClient.BaseAddress != null);

            var facesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IFacesApi>();
            Assert.True(facesApi.HttpClient.BaseAddress != null);

            var jobsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IJobsApi>();
            Assert.True(jobsApi.HttpClient.BaseAddress != null);

            var librariesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ILibrariesApi>();
            Assert.True(librariesApi.HttpClient.BaseAddress != null);

            var mapApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IMapApi>();
            Assert.True(mapApi.HttpClient.BaseAddress != null);

            var memoriesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IMemoriesApi>();
            Assert.True(memoriesApi.HttpClient.BaseAddress != null);

            var notificationsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<INotificationsApi>();
            Assert.True(notificationsApi.HttpClient.BaseAddress != null);

            var notificationsAdminApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<INotificationsAdminApi>();
            Assert.True(notificationsAdminApi.HttpClient.BaseAddress != null);

            var oAuthApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IOAuthApi>();
            Assert.True(oAuthApi.HttpClient.BaseAddress != null);

            var partnersApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IPartnersApi>();
            Assert.True(partnersApi.HttpClient.BaseAddress != null);

            var peopleApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IPeopleApi>();
            Assert.True(peopleApi.HttpClient.BaseAddress != null);

            var searchApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ISearchApi>();
            Assert.True(searchApi.HttpClient.BaseAddress != null);

            var serverApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IServerApi>();
            Assert.True(serverApi.HttpClient.BaseAddress != null);

            var sessionsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ISessionsApi>();
            Assert.True(sessionsApi.HttpClient.BaseAddress != null);

            var sharedLinksApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ISharedLinksApi>();
            Assert.True(sharedLinksApi.HttpClient.BaseAddress != null);

            var stacksApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IStacksApi>();
            Assert.True(stacksApi.HttpClient.BaseAddress != null);

            var syncApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ISyncApi>();
            Assert.True(syncApi.HttpClient.BaseAddress != null);

            var systemConfigApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ISystemConfigApi>();
            Assert.True(systemConfigApi.HttpClient.BaseAddress != null);

            var systemMetadataApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ISystemMetadataApi>();
            Assert.True(systemMetadataApi.HttpClient.BaseAddress != null);

            var tagsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ITagsApi>();
            Assert.True(tagsApi.HttpClient.BaseAddress != null);

            var timelineApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ITimelineApi>();
            Assert.True(timelineApi.HttpClient.BaseAddress != null);

            var trashApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ITrashApi>();
            Assert.True(trashApi.HttpClient.BaseAddress != null);

            var usersApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IUsersApi>();
            Assert.True(usersApi.HttpClient.BaseAddress != null);

            var usersAdminApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IUsersAdminApi>();
            Assert.True(usersAdminApi.HttpClient.BaseAddress != null);

            var viewApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IViewApi>();
            Assert.True(viewApi.HttpClient.BaseAddress != null);
        }
    }
}
