/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing TagsApi
    /// </summary>
    public sealed class TagsApiTests : ApiTestsBase
    {
        private readonly ITagsApi _instance;

        public TagsApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<ITagsApi>();
        }

        /// <summary>
        /// Test BulkTagAssets
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task BulkTagAssetsAsyncTest()
        {
            TagBulkAssetsDto tagBulkAssetsDto = default!;
            var response = await _instance.BulkTagAssetsAsync(tagBulkAssetsDto);
            var model = response.Ok();
            Assert.IsType<TagBulkAssetsResponseDto>(model);
        }

        /// <summary>
        /// Test CreateTag
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateTagAsyncTest()
        {
            TagCreateDto tagCreateDto = default!;
            var response = await _instance.CreateTagAsync(tagCreateDto);
            var model = response.Created();
            Assert.IsType<TagResponseDto>(model);
        }

        /// <summary>
        /// Test DeleteTag
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteTagAsyncTest()
        {
            Guid id = default!;
            await _instance.DeleteTagAsync(id);
        }

        /// <summary>
        /// Test GetAllTags
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAllTagsAsyncTest()
        {
            var response = await _instance.GetAllTagsAsync();
            var model = response.Ok();
            Assert.IsType<List<TagResponseDto>>(model);
        }

        /// <summary>
        /// Test GetTagById
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetTagByIdAsyncTest()
        {
            Guid id = default!;
            var response = await _instance.GetTagByIdAsync(id);
            var model = response.Ok();
            Assert.IsType<TagResponseDto>(model);
        }

        /// <summary>
        /// Test TagAssets
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task TagAssetsAsyncTest()
        {
            Guid id = default!;
            BulkIdsDto bulkIdsDto = default!;
            var response = await _instance.TagAssetsAsync(id, bulkIdsDto);
            var model = response.Ok();
            Assert.IsType<List<BulkIdResponseDto>>(model);
        }

        /// <summary>
        /// Test UntagAssets
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UntagAssetsAsyncTest()
        {
            Guid id = default!;
            BulkIdsDto bulkIdsDto = default!;
            var response = await _instance.UntagAssetsAsync(id, bulkIdsDto);
            var model = response.Ok();
            Assert.IsType<List<BulkIdResponseDto>>(model);
        }

        /// <summary>
        /// Test UpdateTag
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateTagAsyncTest()
        {
            Guid id = default!;
            TagUpdateDto tagUpdateDto = default!;
            var response = await _instance.UpdateTagAsync(id, tagUpdateDto);
            var model = response.Ok();
            Assert.IsType<TagResponseDto>(model);
        }

        /// <summary>
        /// Test UpsertTags
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpsertTagsAsyncTest()
        {
            TagUpsertDto tagUpsertDto = default!;
            var response = await _instance.UpsertTagsAsync(tagUpsertDto);
            var model = response.Ok();
            Assert.IsType<List<TagResponseDto>>(model);
        }
    }
}
