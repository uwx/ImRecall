/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing SearchApi
    /// </summary>
    public sealed class SearchApiTests : ApiTestsBase
    {
        private readonly ISearchApi _instance;

        public SearchApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<ISearchApi>();
        }

        /// <summary>
        /// Test GetAssetsByCity
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAssetsByCityAsyncTest()
        {
            var response = await _instance.GetAssetsByCityAsync();
            var model = response.Ok();
            Assert.IsType<List<AssetResponseDto>>(model);
        }

        /// <summary>
        /// Test GetExploreData
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetExploreDataAsyncTest()
        {
            var response = await _instance.GetExploreDataAsync();
            var model = response.Ok();
            Assert.IsType<List<SearchExploreResponseDto>>(model);
        }

        /// <summary>
        /// Test GetSearchSuggestions
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSearchSuggestionsAsyncTest()
        {
            SearchSuggestionType type = default!;
            Client.Option<string> country = default!;
            Client.Option<bool> includeNull = default!;
            Client.Option<string> lensModel = default!;
            Client.Option<string> make = default!;
            Client.Option<string> model = default!;
            Client.Option<string> state = default!;
            var response = await _instance.GetSearchSuggestionsAsync(type, country, includeNull, lensModel, make, model, state);
            var model = response.Ok();
            Assert.IsType<List<string>>(model);
        }

        /// <summary>
        /// Test SearchAssetStatistics
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SearchAssetStatisticsAsyncTest()
        {
            StatisticsSearchDto statisticsSearchDto = default!;
            var response = await _instance.SearchAssetStatisticsAsync(statisticsSearchDto);
            var model = response.Ok();
            Assert.IsType<SearchStatisticsResponseDto>(model);
        }

        /// <summary>
        /// Test SearchAssets
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SearchAssetsAsyncTest()
        {
            MetadataSearchDto metadataSearchDto = default!;
            var response = await _instance.SearchAssetsAsync(metadataSearchDto);
            var model = response.Ok();
            Assert.IsType<SearchResponseDto>(model);
        }

        /// <summary>
        /// Test SearchLargeAssets
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SearchLargeAssetsAsyncTest()
        {
            Client.Option<List<Guid>> albumIds = default!;
            Client.Option<string?> city = default!;
            Client.Option<string?> country = default!;
            Client.Option<DateTime> createdAfter = default!;
            Client.Option<DateTime> createdBefore = default!;
            Client.Option<string> deviceId = default!;
            Client.Option<bool> isEncoded = default!;
            Client.Option<bool> isFavorite = default!;
            Client.Option<bool> isMotion = default!;
            Client.Option<bool> isNotInAlbum = default!;
            Client.Option<bool> isOffline = default!;
            Client.Option<string?> lensModel = default!;
            Client.Option<Guid?> libraryId = default!;
            Client.Option<string> make = default!;
            Client.Option<int> minFileSize = default!;
            Client.Option<string?> model = default!;
            Client.Option<List<Guid>> personIds = default!;
            Client.Option<decimal> rating = default!;
            Client.Option<decimal> size = default!;
            Client.Option<string?> state = default!;
            Client.Option<List<Guid>?> tagIds = default!;
            Client.Option<DateTime> takenAfter = default!;
            Client.Option<DateTime> takenBefore = default!;
            Client.Option<DateTime> trashedAfter = default!;
            Client.Option<DateTime> trashedBefore = default!;
            Client.Option<AssetTypeEnum> type = default!;
            Client.Option<DateTime> updatedAfter = default!;
            Client.Option<DateTime> updatedBefore = default!;
            Client.Option<AssetVisibility> visibility = default!;
            Client.Option<bool> withDeleted = default!;
            Client.Option<bool> withExif = default!;
            var response = await _instance.SearchLargeAssetsAsync(albumIds, city, country, createdAfter, createdBefore, deviceId, isEncoded, isFavorite, isMotion, isNotInAlbum, isOffline, lensModel, libraryId, make, minFileSize, model, personIds, rating, size, state, tagIds, takenAfter, takenBefore, trashedAfter, trashedBefore, type, updatedAfter, updatedBefore, visibility, withDeleted, withExif);
            var model = response.Ok();
            Assert.IsType<List<AssetResponseDto>>(model);
        }

        /// <summary>
        /// Test SearchPerson
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SearchPersonAsyncTest()
        {
            string name = default!;
            Client.Option<bool> withHidden = default!;
            var response = await _instance.SearchPersonAsync(name, withHidden);
            var model = response.Ok();
            Assert.IsType<List<PersonResponseDto>>(model);
        }

        /// <summary>
        /// Test SearchPlaces
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SearchPlacesAsyncTest()
        {
            string name = default!;
            var response = await _instance.SearchPlacesAsync(name);
            var model = response.Ok();
            Assert.IsType<List<PlacesResponseDto>>(model);
        }

        /// <summary>
        /// Test SearchRandom
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SearchRandomAsyncTest()
        {
            RandomSearchDto randomSearchDto = default!;
            var response = await _instance.SearchRandomAsync(randomSearchDto);
            var model = response.Ok();
            Assert.IsType<List<AssetResponseDto>>(model);
        }

        /// <summary>
        /// Test SearchSmart
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SearchSmartAsyncTest()
        {
            SmartSearchDto smartSearchDto = default!;
            var response = await _instance.SearchSmartAsync(smartSearchDto);
            var model = response.Ok();
            Assert.IsType<SearchResponseDto>(model);
        }
    }
}
