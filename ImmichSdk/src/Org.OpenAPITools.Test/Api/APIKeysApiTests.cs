/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing APIKeysApi
    /// </summary>
    public sealed class APIKeysApiTests : ApiTestsBase
    {
        private readonly IAPIKeysApi _instance;

        public APIKeysApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IAPIKeysApi>();
        }

        /// <summary>
        /// Test CreateApiKey
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateApiKeyAsyncTest()
        {
            APIKeyCreateDto aPIKeyCreateDto = default!;
            var response = await _instance.CreateApiKeyAsync(aPIKeyCreateDto);
            var model = response.Created();
            Assert.IsType<APIKeyCreateResponseDto>(model);
        }

        /// <summary>
        /// Test DeleteApiKey
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteApiKeyAsyncTest()
        {
            Guid id = default!;
            await _instance.DeleteApiKeyAsync(id);
        }

        /// <summary>
        /// Test GetApiKey
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetApiKeyAsyncTest()
        {
            Guid id = default!;
            var response = await _instance.GetApiKeyAsync(id);
            var model = response.Ok();
            Assert.IsType<APIKeyResponseDto>(model);
        }

        /// <summary>
        /// Test GetApiKeys
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetApiKeysAsyncTest()
        {
            var response = await _instance.GetApiKeysAsync();
            var model = response.Ok();
            Assert.IsType<List<APIKeyResponseDto>>(model);
        }

        /// <summary>
        /// Test GetMyApiKey
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetMyApiKeyAsyncTest()
        {
            var response = await _instance.GetMyApiKeyAsync();
            var model = response.Ok();
            Assert.IsType<APIKeyResponseDto>(model);
        }

        /// <summary>
        /// Test UpdateApiKey
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateApiKeyAsyncTest()
        {
            Guid id = default!;
            APIKeyUpdateDto aPIKeyUpdateDto = default!;
            var response = await _instance.UpdateApiKeyAsync(id, aPIKeyUpdateDto);
            var model = response.Ok();
            Assert.IsType<APIKeyResponseDto>(model);
        }
    }
}
