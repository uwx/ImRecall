/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing AssetsApi
    /// </summary>
    public sealed class AssetsApiTests : ApiTestsBase
    {
        private readonly IAssetsApi _instance;

        public AssetsApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IAssetsApi>();
        }

        /// <summary>
        /// Test CheckBulkUpload
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CheckBulkUploadAsyncTest()
        {
            AssetBulkUploadCheckDto assetBulkUploadCheckDto = default!;
            var response = await _instance.CheckBulkUploadAsync(assetBulkUploadCheckDto);
            var model = response.Ok();
            Assert.IsType<AssetBulkUploadCheckResponseDto>(model);
        }

        /// <summary>
        /// Test CheckExistingAssets
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CheckExistingAssetsAsyncTest()
        {
            CheckExistingAssetsDto checkExistingAssetsDto = default!;
            var response = await _instance.CheckExistingAssetsAsync(checkExistingAssetsDto);
            var model = response.Ok();
            Assert.IsType<CheckExistingAssetsResponseDto>(model);
        }

        /// <summary>
        /// Test DeleteAssetMetadata
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteAssetMetadataAsyncTest()
        {
            Guid id = default!;
            AssetMetadataKey key = default!;
            await _instance.DeleteAssetMetadataAsync(id, key);
        }

        /// <summary>
        /// Test DeleteAssets
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteAssetsAsyncTest()
        {
            AssetBulkDeleteDto assetBulkDeleteDto = default!;
            await _instance.DeleteAssetsAsync(assetBulkDeleteDto);
        }

        /// <summary>
        /// Test DownloadAsset
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DownloadAssetAsyncTest()
        {
            Guid id = default!;
            Client.Option<string> key = default!;
            Client.Option<string> slug = default!;
            var response = await _instance.DownloadAssetAsync(id, key, slug);
            var model = response.Ok();
            Assert.IsType<System.IO.Stream>(model);
        }

        /// <summary>
        /// Test GetAllUserAssetsByDeviceId
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAllUserAssetsByDeviceIdAsyncTest()
        {
            string deviceId = default!;
            var response = await _instance.GetAllUserAssetsByDeviceIdAsync(deviceId);
            var model = response.Ok();
            Assert.IsType<List<string>>(model);
        }

        /// <summary>
        /// Test GetAssetInfo
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAssetInfoAsyncTest()
        {
            Guid id = default!;
            Client.Option<string> key = default!;
            Client.Option<string> slug = default!;
            var response = await _instance.GetAssetInfoAsync(id, key, slug);
            var model = response.Ok();
            Assert.IsType<AssetResponseDto>(model);
        }

        /// <summary>
        /// Test GetAssetMetadata
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAssetMetadataAsyncTest()
        {
            Guid id = default!;
            var response = await _instance.GetAssetMetadataAsync(id);
            var model = response.Ok();
            Assert.IsType<List<AssetMetadataResponseDto>>(model);
        }

        /// <summary>
        /// Test GetAssetMetadataByKey
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAssetMetadataByKeyAsyncTest()
        {
            Guid id = default!;
            AssetMetadataKey key = default!;
            var response = await _instance.GetAssetMetadataByKeyAsync(id, key);
            var model = response.Ok();
            Assert.IsType<AssetMetadataResponseDto>(model);
        }

        /// <summary>
        /// Test GetAssetStatistics
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAssetStatisticsAsyncTest()
        {
            Client.Option<bool> isFavorite = default!;
            Client.Option<bool> isTrashed = default!;
            Client.Option<AssetVisibility> visibility = default!;
            var response = await _instance.GetAssetStatisticsAsync(isFavorite, isTrashed, visibility);
            var model = response.Ok();
            Assert.IsType<AssetStatsResponseDto>(model);
        }

        /// <summary>
        /// Test GetRandom
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetRandomAsyncTest()
        {
            Client.Option<decimal> count = default!;
            var response = await _instance.GetRandomAsync(count);
            var model = response.Ok();
            Assert.IsType<List<AssetResponseDto>>(model);
        }

        /// <summary>
        /// Test PlayAssetVideo
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PlayAssetVideoAsyncTest()
        {
            Guid id = default!;
            Client.Option<string> key = default!;
            Client.Option<string> slug = default!;
            var response = await _instance.PlayAssetVideoAsync(id, key, slug);
            var model = response.Ok();
            Assert.IsType<System.IO.Stream>(model);
        }

        /// <summary>
        /// Test ReplaceAsset
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ReplaceAssetAsyncTest()
        {
            Guid id = default!;
            System.IO.Stream assetData = default!;
            string deviceAssetId = default!;
            string deviceId = default!;
            DateTime fileCreatedAt = default!;
            DateTime fileModifiedAt = default!;
            Client.Option<string> key = default!;
            Client.Option<string> slug = default!;
            Client.Option<string> duration = default!;
            Client.Option<string> filename = default!;
            var response = await _instance.ReplaceAssetAsync(id, assetData, deviceAssetId, deviceId, fileCreatedAt, fileModifiedAt, key, slug, duration, filename);
            var model = response.Ok();
            Assert.IsType<AssetMediaResponseDto>(model);
        }

        /// <summary>
        /// Test RunAssetJobs
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task RunAssetJobsAsyncTest()
        {
            AssetJobsDto assetJobsDto = default!;
            await _instance.RunAssetJobsAsync(assetJobsDto);
        }

        /// <summary>
        /// Test UpdateAsset
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateAssetAsyncTest()
        {
            Guid id = default!;
            UpdateAssetDto updateAssetDto = default!;
            var response = await _instance.UpdateAssetAsync(id, updateAssetDto);
            var model = response.Ok();
            Assert.IsType<AssetResponseDto>(model);
        }

        /// <summary>
        /// Test UpdateAssetMetadata
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateAssetMetadataAsyncTest()
        {
            Guid id = default!;
            AssetMetadataUpsertDto assetMetadataUpsertDto = default!;
            var response = await _instance.UpdateAssetMetadataAsync(id, assetMetadataUpsertDto);
            var model = response.Ok();
            Assert.IsType<List<AssetMetadataResponseDto>>(model);
        }

        /// <summary>
        /// Test UpdateAssets
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateAssetsAsyncTest()
        {
            AssetBulkUpdateDto assetBulkUpdateDto = default!;
            await _instance.UpdateAssetsAsync(assetBulkUpdateDto);
        }

        /// <summary>
        /// Test UploadAsset
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UploadAssetAsyncTest()
        {
            System.IO.Stream assetData = default!;
            string deviceAssetId = default!;
            string deviceId = default!;
            DateTime fileCreatedAt = default!;
            DateTime fileModifiedAt = default!;
            List<AssetMetadataUpsertItemDto> metadata = default!;
            Client.Option<string> key = default!;
            Client.Option<string> slug = default!;
            Client.Option<string> xImmichChecksum = default!;
            Client.Option<string> duration = default!;
            Client.Option<string> filename = default!;
            Client.Option<bool> isFavorite = default!;
            Client.Option<Guid> livePhotoVideoId = default!;
            Client.Option<System.IO.Stream> sidecarData = default!;
            Client.Option<AssetVisibility> visibility = default!;
            var response = await _instance.UploadAssetAsync(assetData, deviceAssetId, deviceId, fileCreatedAt, fileModifiedAt, metadata, key, slug, xImmichChecksum, duration, filename, isFavorite, livePhotoVideoId, sidecarData, visibility);
            var model = response.Created();
            Assert.IsType<AssetMediaResponseDto>(model);
        }

        /// <summary>
        /// Test ViewAsset
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ViewAssetAsyncTest()
        {
            Guid id = default!;
            Client.Option<string> key = default!;
            Client.Option<AssetMediaSize> size = default!;
            Client.Option<string> slug = default!;
            var response = await _instance.ViewAssetAsync(id, key, size, slug);
            var model = response.Ok();
            Assert.IsType<System.IO.Stream>(model);
        }
    }
}
