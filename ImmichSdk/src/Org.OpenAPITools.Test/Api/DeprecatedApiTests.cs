/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing DeprecatedApi
    /// </summary>
    public sealed class DeprecatedApiTests : ApiTestsBase
    {
        private readonly IDeprecatedApi _instance;

        public DeprecatedApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IDeprecatedApi>();
        }

        /// <summary>
        /// Test CreatePartnerDeprecated
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreatePartnerDeprecatedAsyncTest()
        {
            Guid id = default!;
            var response = await _instance.CreatePartnerDeprecatedAsync(id);
            var model = response.Created();
            Assert.IsType<PartnerResponseDto>(model);
        }

        /// <summary>
        /// Test GetRandom
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetRandomAsyncTest()
        {
            Client.Option<decimal> count = default!;
            var response = await _instance.GetRandomAsync(count);
            var model = response.Ok();
            Assert.IsType<List<AssetResponseDto>>(model);
        }

        /// <summary>
        /// Test ReplaceAsset
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ReplaceAssetAsyncTest()
        {
            Guid id = default!;
            System.IO.Stream assetData = default!;
            string deviceAssetId = default!;
            string deviceId = default!;
            DateTime fileCreatedAt = default!;
            DateTime fileModifiedAt = default!;
            Client.Option<string> key = default!;
            Client.Option<string> slug = default!;
            Client.Option<string> duration = default!;
            Client.Option<string> filename = default!;
            var response = await _instance.ReplaceAssetAsync(id, assetData, deviceAssetId, deviceId, fileCreatedAt, fileModifiedAt, key, slug, duration, filename);
            var model = response.Ok();
            Assert.IsType<AssetMediaResponseDto>(model);
        }
    }
}
