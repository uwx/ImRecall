/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing AlbumsApi
    /// </summary>
    public sealed class AlbumsApiTests : ApiTestsBase
    {
        private readonly IAlbumsApi _instance;

        public AlbumsApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IAlbumsApi>();
        }

        /// <summary>
        /// Test AddAssetsToAlbum
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task AddAssetsToAlbumAsyncTest()
        {
            Guid id = default!;
            BulkIdsDto bulkIdsDto = default!;
            Client.Option<string> key = default!;
            Client.Option<string> slug = default!;
            var response = await _instance.AddAssetsToAlbumAsync(id, bulkIdsDto, key, slug);
            var model = response.Ok();
            Assert.IsType<List<BulkIdResponseDto>>(model);
        }

        /// <summary>
        /// Test AddAssetsToAlbums
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task AddAssetsToAlbumsAsyncTest()
        {
            AlbumsAddAssetsDto albumsAddAssetsDto = default!;
            Client.Option<string> key = default!;
            Client.Option<string> slug = default!;
            var response = await _instance.AddAssetsToAlbumsAsync(albumsAddAssetsDto, key, slug);
            var model = response.Ok();
            Assert.IsType<AlbumsAddAssetsResponseDto>(model);
        }

        /// <summary>
        /// Test AddUsersToAlbum
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task AddUsersToAlbumAsyncTest()
        {
            Guid id = default!;
            AddUsersDto addUsersDto = default!;
            var response = await _instance.AddUsersToAlbumAsync(id, addUsersDto);
            var model = response.Ok();
            Assert.IsType<AlbumResponseDto>(model);
        }

        /// <summary>
        /// Test CreateAlbum
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateAlbumAsyncTest()
        {
            CreateAlbumDto createAlbumDto = default!;
            var response = await _instance.CreateAlbumAsync(createAlbumDto);
            var model = response.Created();
            Assert.IsType<AlbumResponseDto>(model);
        }

        /// <summary>
        /// Test DeleteAlbum
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteAlbumAsyncTest()
        {
            Guid id = default!;
            await _instance.DeleteAlbumAsync(id);
        }

        /// <summary>
        /// Test GetAlbumInfo
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAlbumInfoAsyncTest()
        {
            Guid id = default!;
            Client.Option<string> key = default!;
            Client.Option<string> slug = default!;
            Client.Option<bool> withoutAssets = default!;
            var response = await _instance.GetAlbumInfoAsync(id, key, slug, withoutAssets);
            var model = response.Ok();
            Assert.IsType<AlbumResponseDto>(model);
        }

        /// <summary>
        /// Test GetAlbumStatistics
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAlbumStatisticsAsyncTest()
        {
            var response = await _instance.GetAlbumStatisticsAsync();
            var model = response.Ok();
            Assert.IsType<AlbumStatisticsResponseDto>(model);
        }

        /// <summary>
        /// Test GetAllAlbums
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAllAlbumsAsyncTest()
        {
            Client.Option<Guid> assetId = default!;
            Client.Option<bool> shared = default!;
            var response = await _instance.GetAllAlbumsAsync(assetId, shared);
            var model = response.Ok();
            Assert.IsType<List<AlbumResponseDto>>(model);
        }

        /// <summary>
        /// Test RemoveAssetFromAlbum
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task RemoveAssetFromAlbumAsyncTest()
        {
            Guid id = default!;
            BulkIdsDto bulkIdsDto = default!;
            var response = await _instance.RemoveAssetFromAlbumAsync(id, bulkIdsDto);
            var model = response.Ok();
            Assert.IsType<List<BulkIdResponseDto>>(model);
        }

        /// <summary>
        /// Test RemoveUserFromAlbum
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task RemoveUserFromAlbumAsyncTest()
        {
            Guid id = default!;
            string userId = default!;
            await _instance.RemoveUserFromAlbumAsync(id, userId);
        }

        /// <summary>
        /// Test UpdateAlbumInfo
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateAlbumInfoAsyncTest()
        {
            Guid id = default!;
            UpdateAlbumDto updateAlbumDto = default!;
            var response = await _instance.UpdateAlbumInfoAsync(id, updateAlbumDto);
            var model = response.Ok();
            Assert.IsType<AlbumResponseDto>(model);
        }

        /// <summary>
        /// Test UpdateAlbumUser
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateAlbumUserAsyncTest()
        {
            Guid id = default!;
            string userId = default!;
            UpdateAlbumUserDto updateAlbumUserDto = default!;
            await _instance.UpdateAlbumUserAsync(id, userId, updateAlbumUserDto);
        }
    }
}
