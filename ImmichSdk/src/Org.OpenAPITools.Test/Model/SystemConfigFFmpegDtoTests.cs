/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Org.OpenAPITools.Model;
using Org.OpenAPITools.Client;
using System.Reflection;

namespace Org.OpenAPITools.Test.Model
{
    /// <summary>
    ///  Class for testing SystemConfigFFmpegDto
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class SystemConfigFFmpegDtoTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for SystemConfigFFmpegDto
        //private SystemConfigFFmpegDto instance;

        public SystemConfigFFmpegDtoTests()
        {
            // TODO uncomment below to create an instance of SystemConfigFFmpegDto
            //instance = new SystemConfigFFmpegDto();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SystemConfigFFmpegDto
        /// </summary>
        [Fact]
        public void SystemConfigFFmpegDtoInstanceTest()
        {
            // TODO uncomment below to test "IsType" SystemConfigFFmpegDto
            //Assert.IsType<SystemConfigFFmpegDto>(instance);
        }

        /// <summary>
        /// Test the property 'Accel'
        /// </summary>
        [Fact]
        public void AccelTest()
        {
            // TODO unit test for the property 'Accel'
        }

        /// <summary>
        /// Test the property 'AccelDecode'
        /// </summary>
        [Fact]
        public void AccelDecodeTest()
        {
            // TODO unit test for the property 'AccelDecode'
        }

        /// <summary>
        /// Test the property 'AcceptedAudioCodecs'
        /// </summary>
        [Fact]
        public void AcceptedAudioCodecsTest()
        {
            // TODO unit test for the property 'AcceptedAudioCodecs'
        }

        /// <summary>
        /// Test the property 'AcceptedContainers'
        /// </summary>
        [Fact]
        public void AcceptedContainersTest()
        {
            // TODO unit test for the property 'AcceptedContainers'
        }

        /// <summary>
        /// Test the property 'AcceptedVideoCodecs'
        /// </summary>
        [Fact]
        public void AcceptedVideoCodecsTest()
        {
            // TODO unit test for the property 'AcceptedVideoCodecs'
        }

        /// <summary>
        /// Test the property 'Bframes'
        /// </summary>
        [Fact]
        public void BframesTest()
        {
            // TODO unit test for the property 'Bframes'
        }

        /// <summary>
        /// Test the property 'CqMode'
        /// </summary>
        [Fact]
        public void CqModeTest()
        {
            // TODO unit test for the property 'CqMode'
        }

        /// <summary>
        /// Test the property 'Crf'
        /// </summary>
        [Fact]
        public void CrfTest()
        {
            // TODO unit test for the property 'Crf'
        }

        /// <summary>
        /// Test the property 'GopSize'
        /// </summary>
        [Fact]
        public void GopSizeTest()
        {
            // TODO unit test for the property 'GopSize'
        }

        /// <summary>
        /// Test the property 'MaxBitrate'
        /// </summary>
        [Fact]
        public void MaxBitrateTest()
        {
            // TODO unit test for the property 'MaxBitrate'
        }

        /// <summary>
        /// Test the property 'PreferredHwDevice'
        /// </summary>
        [Fact]
        public void PreferredHwDeviceTest()
        {
            // TODO unit test for the property 'PreferredHwDevice'
        }

        /// <summary>
        /// Test the property 'Preset'
        /// </summary>
        [Fact]
        public void PresetTest()
        {
            // TODO unit test for the property 'Preset'
        }

        /// <summary>
        /// Test the property 'Refs'
        /// </summary>
        [Fact]
        public void RefsTest()
        {
            // TODO unit test for the property 'Refs'
        }

        /// <summary>
        /// Test the property 'TargetAudioCodec'
        /// </summary>
        [Fact]
        public void TargetAudioCodecTest()
        {
            // TODO unit test for the property 'TargetAudioCodec'
        }

        /// <summary>
        /// Test the property 'TargetResolution'
        /// </summary>
        [Fact]
        public void TargetResolutionTest()
        {
            // TODO unit test for the property 'TargetResolution'
        }

        /// <summary>
        /// Test the property 'TargetVideoCodec'
        /// </summary>
        [Fact]
        public void TargetVideoCodecTest()
        {
            // TODO unit test for the property 'TargetVideoCodec'
        }

        /// <summary>
        /// Test the property 'TemporalAQ'
        /// </summary>
        [Fact]
        public void TemporalAQTest()
        {
            // TODO unit test for the property 'TemporalAQ'
        }

        /// <summary>
        /// Test the property 'Threads'
        /// </summary>
        [Fact]
        public void ThreadsTest()
        {
            // TODO unit test for the property 'Threads'
        }

        /// <summary>
        /// Test the property 'Tonemap'
        /// </summary>
        [Fact]
        public void TonemapTest()
        {
            // TODO unit test for the property 'Tonemap'
        }

        /// <summary>
        /// Test the property 'Transcode'
        /// </summary>
        [Fact]
        public void TranscodeTest()
        {
            // TODO unit test for the property 'Transcode'
        }

        /// <summary>
        /// Test the property 'TwoPass'
        /// </summary>
        [Fact]
        public void TwoPassTest()
        {
            // TODO unit test for the property 'TwoPass'
        }
    }
}
