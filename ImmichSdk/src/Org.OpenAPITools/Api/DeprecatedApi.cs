// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IDeprecatedApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        DeprecatedApiEvents Events { get; }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This property was deprecated in v1.141.0. This endpoint requires the &#x60;partner.create&#x60; permission.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreatePartnerDeprecatedApiResponse"/>&gt;</returns>
        [Obsolete]
        Task<ICreatePartnerDeprecatedApiResponse> CreatePartnerDeprecatedAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This property was deprecated in v1.141.0. This endpoint requires the &#x60;partner.create&#x60; permission.
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreatePartnerDeprecatedApiResponse"/>?&gt;</returns>
        [Obsolete]
        Task<ICreatePartnerDeprecatedApiResponse?> CreatePartnerDeprecatedOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This property was deprecated in v1.116.0. This endpoint requires the &#x60;asset.read&#x60; permission.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="count"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRandomApiResponse"/>&gt;</returns>
        [Obsolete]
        Task<IGetRandomApiResponse> GetRandomAsync(Option<decimal> count = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This property was deprecated in v1.116.0. This endpoint requires the &#x60;asset.read&#x60; permission.
        /// </remarks>
        /// <param name="count"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRandomApiResponse"/>?&gt;</returns>
        [Obsolete]
        Task<IGetRandomApiResponse?> GetRandomOrDefaultAsync(Option<decimal> count = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Replace the asset with new file, without changing its id
        /// </summary>
        /// <remarks>
        /// This property was deprecated in v1.142.0. Replace the asset with new file, without changing its id. This endpoint requires the &#x60;asset.replace&#x60; permission.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="assetData"></param>
        /// <param name="deviceAssetId"></param>
        /// <param name="deviceId"></param>
        /// <param name="fileCreatedAt"></param>
        /// <param name="fileModifiedAt"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="duration"> (optional)</param>
        /// <param name="filename"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReplaceAssetApiResponse"/>&gt;</returns>
        [Obsolete]
        Task<IReplaceAssetApiResponse> ReplaceAssetAsync(Guid id, System.IO.Stream assetData, string deviceAssetId, string deviceId, DateTime fileCreatedAt, DateTime fileModifiedAt, Option<string> key = default, Option<string> slug = default, Option<string> duration = default, Option<string> filename = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Replace the asset with new file, without changing its id
        /// </summary>
        /// <remarks>
        /// This property was deprecated in v1.142.0. Replace the asset with new file, without changing its id. This endpoint requires the &#x60;asset.replace&#x60; permission.
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="assetData"></param>
        /// <param name="deviceAssetId"></param>
        /// <param name="deviceId"></param>
        /// <param name="fileCreatedAt"></param>
        /// <param name="fileModifiedAt"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="duration"> (optional)</param>
        /// <param name="filename"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReplaceAssetApiResponse"/>?&gt;</returns>
        [Obsolete]
        Task<IReplaceAssetApiResponse?> ReplaceAssetOrDefaultAsync(Guid id, System.IO.Stream assetData, string deviceAssetId, string deviceId, DateTime fileCreatedAt, DateTime fileModifiedAt, Option<string> key = default, Option<string> slug = default, Option<string> duration = default, Option<string> filename = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreatePartnerDeprecatedApiResponse"/>
    /// </summary>
    public interface ICreatePartnerDeprecatedApiResponse : Org.OpenAPITools.Client.IApiResponse, ICreated<Org.OpenAPITools.Model.PartnerResponseDto?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class DeprecatedApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreatePartnerDeprecated;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreatePartnerDeprecated;

        internal void ExecuteOnCreatePartnerDeprecated(DeprecatedApi.CreatePartnerDeprecatedApiResponse apiResponse)
        {
            OnCreatePartnerDeprecated?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreatePartnerDeprecated(Exception exception)
        {
            OnErrorCreatePartnerDeprecated?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetRandom;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetRandom;

        internal void ExecuteOnGetRandom(AssetsApi.GetRandomApiResponse apiResponse)
        {
            OnGetRandom?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetRandom(Exception exception)
        {
            OnErrorGetRandom?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnReplaceAsset;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorReplaceAsset;

        internal void ExecuteOnReplaceAsset(AssetsApi.ReplaceAssetApiResponse apiResponse)
        {
            OnReplaceAsset?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorReplaceAsset(Exception exception)
        {
            OnErrorReplaceAsset?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class DeprecatedApi : IDeprecatedApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<DeprecatedApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public DeprecatedApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeprecatedApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeprecatedApi(ILogger<DeprecatedApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, DeprecatedApiEvents deprecatedApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<DeprecatedApi>();
            HttpClient = httpClient;
            Events = deprecatedApiEvents;
            ApiKeyProvider = apiKeyProvider;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatCreatePartnerDeprecated(ref Guid id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterCreatePartnerDeprecatedDefaultImplementation(ICreatePartnerDeprecatedApiResponse apiResponseLocalVar, Guid id)
        {
            bool suppressDefaultLog = false;
            AfterCreatePartnerDeprecated(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterCreatePartnerDeprecated(ref bool suppressDefaultLog, ICreatePartnerDeprecatedApiResponse apiResponseLocalVar, Guid id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorCreatePartnerDeprecatedDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreatePartnerDeprecated(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorCreatePartnerDeprecated(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id);

        /// <summary>
        ///  This property was deprecated in v1.141.0. This endpoint requires the &#x60;partner.create&#x60; permission.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreatePartnerDeprecatedApiResponse"/>&gt;</returns>
        public async Task<ICreatePartnerDeprecatedApiResponse?> CreatePartnerDeprecatedOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreatePartnerDeprecatedAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  This property was deprecated in v1.141.0. This endpoint requires the &#x60;partner.create&#x60; permission.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreatePartnerDeprecatedApiResponse"/>&gt;</returns>
        public async Task<ICreatePartnerDeprecatedApiResponse> CreatePartnerDeprecatedAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatCreatePartnerDeprecated(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/partners/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/partners/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar3 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar3);

                    bearerTokenLocalVar3.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<CreatePartnerDeprecatedApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreatePartnerDeprecatedApiResponse>();
                        CreatePartnerDeprecatedApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/partners/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterCreatePartnerDeprecatedDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnCreatePartnerDeprecated(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreatePartnerDeprecatedDefaultImplementation(e, "/partners/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorCreatePartnerDeprecated(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreatePartnerDeprecatedApiResponse"/>
        /// </summary>
        public partial class CreatePartnerDeprecatedApiResponse : Org.OpenAPITools.Client.ApiResponse, ICreatePartnerDeprecatedApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreatePartnerDeprecatedApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreatePartnerDeprecatedApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreatePartnerDeprecatedApiResponse(ILogger<CreatePartnerDeprecatedApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="CreatePartnerDeprecatedApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreatePartnerDeprecatedApiResponse(ILogger<CreatePartnerDeprecatedApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.PartnerResponseDto? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.PartnerResponseDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out Org.OpenAPITools.Model.PartnerResponseDto? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetRandom(ref Option<decimal> count);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="count"></param>
        private void AfterGetRandomDefaultImplementation(IGetRandomApiResponse apiResponseLocalVar, Option<decimal> count)
        {
            bool suppressDefaultLog = false;
            AfterGetRandom(ref suppressDefaultLog, apiResponseLocalVar, count);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="count"></param>
        partial void AfterGetRandom(ref bool suppressDefaultLog, IGetRandomApiResponse apiResponseLocalVar, Option<decimal> count);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="count"></param>
        private void OnErrorGetRandomDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<decimal> count)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetRandom(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, count);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="count"></param>
        partial void OnErrorGetRandom(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<decimal> count);

        /// <summary>
        ///  This property was deprecated in v1.116.0. This endpoint requires the &#x60;asset.read&#x60; permission.
        /// </summary>
        /// <param name="count"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRandomApiResponse"/>&gt;</returns>
        public async Task<IGetRandomApiResponse?> GetRandomOrDefaultAsync(Option<decimal> count = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetRandomAsync(count, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  This property was deprecated in v1.116.0. This endpoint requires the &#x60;asset.read&#x60; permission.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="count"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRandomApiResponse"/>&gt;</returns>
        public async Task<IGetRandomApiResponse> GetRandomAsync(Option<decimal> count = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetRandom(ref count);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/assets/random"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/assets/random");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (count.IsSet)
                        parseQueryStringLocalVar["count"] = ClientUtils.ParameterToString(count.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar3 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar3);

                    bearerTokenLocalVar3.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<AssetsApi.GetRandomApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AssetsApi.GetRandomApiResponse>();
                        AssetsApi.GetRandomApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/assets/random", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetRandomDefaultImplementation(apiResponseLocalVar, count);

                        Events.ExecuteOnGetRandom(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetRandomDefaultImplementation(e, "/assets/random", uriBuilderLocalVar.Path, count);
                Events.ExecuteOnErrorGetRandom(e);
                throw;
            }
        }

        partial void FormatReplaceAsset(ref Guid id, ref System.IO.Stream assetData, ref string deviceAssetId, ref string deviceId, ref DateTime fileCreatedAt, ref DateTime fileModifiedAt, ref Option<string> key, ref Option<string> slug, ref Option<string> duration, ref Option<string> filename);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="assetData"></param>
        /// <param name="deviceAssetId"></param>
        /// <param name="deviceId"></param>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        /// <param name="duration"></param>
        /// <param name="filename"></param>
        /// <returns></returns>
        private void ValidateReplaceAsset(System.IO.Stream assetData, string deviceAssetId, string deviceId, Option<string> key, Option<string> slug, Option<string> duration, Option<string> filename)
        {
            if (assetData == null)
                throw new ArgumentNullException(nameof(assetData));

            if (deviceAssetId == null)
                throw new ArgumentNullException(nameof(deviceAssetId));

            if (deviceId == null)
                throw new ArgumentNullException(nameof(deviceId));

            if (key.IsSet && key.Value == null)
                throw new ArgumentNullException(nameof(key));

            if (slug.IsSet && slug.Value == null)
                throw new ArgumentNullException(nameof(slug));

            if (duration.IsSet && duration.Value == null)
                throw new ArgumentNullException(nameof(duration));

            if (filename.IsSet && filename.Value == null)
                throw new ArgumentNullException(nameof(filename));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="assetData"></param>
        /// <param name="deviceAssetId"></param>
        /// <param name="deviceId"></param>
        /// <param name="fileCreatedAt"></param>
        /// <param name="fileModifiedAt"></param>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        /// <param name="duration"></param>
        /// <param name="filename"></param>
        private void AfterReplaceAssetDefaultImplementation(IReplaceAssetApiResponse apiResponseLocalVar, Guid id, System.IO.Stream assetData, string deviceAssetId, string deviceId, DateTime fileCreatedAt, DateTime fileModifiedAt, Option<string> key, Option<string> slug, Option<string> duration, Option<string> filename)
        {
            bool suppressDefaultLog = false;
            AfterReplaceAsset(ref suppressDefaultLog, apiResponseLocalVar, id, assetData, deviceAssetId, deviceId, fileCreatedAt, fileModifiedAt, key, slug, duration, filename);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="assetData"></param>
        /// <param name="deviceAssetId"></param>
        /// <param name="deviceId"></param>
        /// <param name="fileCreatedAt"></param>
        /// <param name="fileModifiedAt"></param>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        /// <param name="duration"></param>
        /// <param name="filename"></param>
        partial void AfterReplaceAsset(ref bool suppressDefaultLog, IReplaceAssetApiResponse apiResponseLocalVar, Guid id, System.IO.Stream assetData, string deviceAssetId, string deviceId, DateTime fileCreatedAt, DateTime fileModifiedAt, Option<string> key, Option<string> slug, Option<string> duration, Option<string> filename);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="assetData"></param>
        /// <param name="deviceAssetId"></param>
        /// <param name="deviceId"></param>
        /// <param name="fileCreatedAt"></param>
        /// <param name="fileModifiedAt"></param>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        /// <param name="duration"></param>
        /// <param name="filename"></param>
        private void OnErrorReplaceAssetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, System.IO.Stream assetData, string deviceAssetId, string deviceId, DateTime fileCreatedAt, DateTime fileModifiedAt, Option<string> key, Option<string> slug, Option<string> duration, Option<string> filename)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorReplaceAsset(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, assetData, deviceAssetId, deviceId, fileCreatedAt, fileModifiedAt, key, slug, duration, filename);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="assetData"></param>
        /// <param name="deviceAssetId"></param>
        /// <param name="deviceId"></param>
        /// <param name="fileCreatedAt"></param>
        /// <param name="fileModifiedAt"></param>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        /// <param name="duration"></param>
        /// <param name="filename"></param>
        partial void OnErrorReplaceAsset(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, System.IO.Stream assetData, string deviceAssetId, string deviceId, DateTime fileCreatedAt, DateTime fileModifiedAt, Option<string> key, Option<string> slug, Option<string> duration, Option<string> filename);

        /// <summary>
        /// Replace the asset with new file, without changing its id This property was deprecated in v1.142.0. Replace the asset with new file, without changing its id. This endpoint requires the &#x60;asset.replace&#x60; permission.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="assetData"></param>
        /// <param name="deviceAssetId"></param>
        /// <param name="deviceId"></param>
        /// <param name="fileCreatedAt"></param>
        /// <param name="fileModifiedAt"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="duration"> (optional)</param>
        /// <param name="filename"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReplaceAssetApiResponse"/>&gt;</returns>
        public async Task<IReplaceAssetApiResponse?> ReplaceAssetOrDefaultAsync(Guid id, System.IO.Stream assetData, string deviceAssetId, string deviceId, DateTime fileCreatedAt, DateTime fileModifiedAt, Option<string> key = default, Option<string> slug = default, Option<string> duration = default, Option<string> filename = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ReplaceAssetAsync(id, assetData, deviceAssetId, deviceId, fileCreatedAt, fileModifiedAt, key, slug, duration, filename, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Replace the asset with new file, without changing its id This property was deprecated in v1.142.0. Replace the asset with new file, without changing its id. This endpoint requires the &#x60;asset.replace&#x60; permission.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="assetData"></param>
        /// <param name="deviceAssetId"></param>
        /// <param name="deviceId"></param>
        /// <param name="fileCreatedAt"></param>
        /// <param name="fileModifiedAt"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="duration"> (optional)</param>
        /// <param name="filename"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReplaceAssetApiResponse"/>&gt;</returns>
        public async Task<IReplaceAssetApiResponse> ReplaceAssetAsync(Guid id, System.IO.Stream assetData, string deviceAssetId, string deviceId, DateTime fileCreatedAt, DateTime fileModifiedAt, Option<string> key = default, Option<string> slug = default, Option<string> duration = default, Option<string> filename = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateReplaceAsset(assetData, deviceAssetId, deviceId, key, slug, duration, filename);

                FormatReplaceAsset(ref id, ref assetData, ref deviceAssetId, ref deviceId, ref fileCreatedAt, ref fileModifiedAt, ref key, ref slug, ref duration, ref filename);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/assets/{id}/original"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/assets/{id}/original");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (key.IsSet)
                        parseQueryStringLocalVar["key"] = ClientUtils.ParameterToString(key.Value);

                    if (slug.IsSet)
                        parseQueryStringLocalVar["slug"] = ClientUtils.ParameterToString(slug.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));                    multipartContentLocalVar.Add(new StreamContent(assetData));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("deviceAssetId", ClientUtils.ParameterToString(deviceAssetId)));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("deviceId", ClientUtils.ParameterToString(deviceId)));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("fileCreatedAt", ClientUtils.ParameterToString(fileCreatedAt)));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("fileModifiedAt", ClientUtils.ParameterToString(fileModifiedAt)));

                    if (duration.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("duration", ClientUtils.ParameterToString(duration.Value)));

                    if (filename.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("filename", ClientUtils.ParameterToString(filename.Value)));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar3 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar3);

                    bearerTokenLocalVar3.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "multipart/form-data"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<AssetsApi.ReplaceAssetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AssetsApi.ReplaceAssetApiResponse>();
                        AssetsApi.ReplaceAssetApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/assets/{id}/original", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterReplaceAssetDefaultImplementation(apiResponseLocalVar, id, assetData, deviceAssetId, deviceId, fileCreatedAt, fileModifiedAt, key, slug, duration, filename);

                        Events.ExecuteOnReplaceAsset(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorReplaceAssetDefaultImplementation(e, "/assets/{id}/original", uriBuilderLocalVar.Path, id, assetData, deviceAssetId, deviceId, fileCreatedAt, fileModifiedAt, key, slug, duration, filename);
                Events.ExecuteOnErrorReplaceAsset(e);
                throw;
            }
        }
    }
}
