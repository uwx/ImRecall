// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IAssetsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        AssetsApiEvents Events { get; }

        /// <summary>
        /// checkBulkUpload
        /// </summary>
        /// <remarks>
        /// Checks if assets exist by checksums. This endpoint requires the &#x60;asset.upload&#x60; permission.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetBulkUploadCheckDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICheckBulkUploadApiResponse"/>&gt;</returns>
        Task<ICheckBulkUploadApiResponse> CheckBulkUploadAsync(AssetBulkUploadCheckDto assetBulkUploadCheckDto, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// checkBulkUpload
        /// </summary>
        /// <remarks>
        /// Checks if assets exist by checksums. This endpoint requires the &#x60;asset.upload&#x60; permission.
        /// </remarks>
        /// <param name="assetBulkUploadCheckDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICheckBulkUploadApiResponse"/>?&gt;</returns>
        Task<ICheckBulkUploadApiResponse?> CheckBulkUploadOrDefaultAsync(AssetBulkUploadCheckDto assetBulkUploadCheckDto, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// checkExistingAssets
        /// </summary>
        /// <remarks>
        /// Checks if multiple assets exist on the server and returns all existing - used by background backup
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkExistingAssetsDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICheckExistingAssetsApiResponse"/>&gt;</returns>
        Task<ICheckExistingAssetsApiResponse> CheckExistingAssetsAsync(CheckExistingAssetsDto checkExistingAssetsDto, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// checkExistingAssets
        /// </summary>
        /// <remarks>
        /// Checks if multiple assets exist on the server and returns all existing - used by background backup
        /// </remarks>
        /// <param name="checkExistingAssetsDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICheckExistingAssetsApiResponse"/>?&gt;</returns>
        Task<ICheckExistingAssetsApiResponse?> CheckExistingAssetsOrDefaultAsync(CheckExistingAssetsDto checkExistingAssetsDto, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint requires the &#x60;asset.update&#x60; permission.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="key"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAssetMetadataApiResponse"/>&gt;</returns>
        Task<IDeleteAssetMetadataApiResponse> DeleteAssetMetadataAsync(Guid id, AssetMetadataKey key, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint requires the &#x60;asset.update&#x60; permission.
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="key"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAssetMetadataApiResponse"/>?&gt;</returns>
        Task<IDeleteAssetMetadataApiResponse?> DeleteAssetMetadataOrDefaultAsync(Guid id, AssetMetadataKey key, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint requires the &#x60;asset.delete&#x60; permission.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetBulkDeleteDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAssetsApiResponse"/>&gt;</returns>
        Task<IDeleteAssetsApiResponse> DeleteAssetsAsync(AssetBulkDeleteDto assetBulkDeleteDto, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint requires the &#x60;asset.delete&#x60; permission.
        /// </remarks>
        /// <param name="assetBulkDeleteDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAssetsApiResponse"/>?&gt;</returns>
        Task<IDeleteAssetsApiResponse?> DeleteAssetsOrDefaultAsync(AssetBulkDeleteDto assetBulkDeleteDto, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint requires the &#x60;asset.download&#x60; permission.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadAssetApiResponse"/>&gt;</returns>
        Task<IDownloadAssetApiResponse> DownloadAssetAsync(Guid id, Option<string> key = default, Option<string> slug = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint requires the &#x60;asset.download&#x60; permission.
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadAssetApiResponse"/>?&gt;</returns>
        Task<IDownloadAssetApiResponse?> DownloadAssetOrDefaultAsync(Guid id, Option<string> key = default, Option<string> slug = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// getAllUserAssetsByDeviceId
        /// </summary>
        /// <remarks>
        /// Get all asset of a device that are in the database, ID only.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllUserAssetsByDeviceIdApiResponse"/>&gt;</returns>
        Task<IGetAllUserAssetsByDeviceIdApiResponse> GetAllUserAssetsByDeviceIdAsync(string deviceId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// getAllUserAssetsByDeviceId
        /// </summary>
        /// <remarks>
        /// Get all asset of a device that are in the database, ID only.
        /// </remarks>
        /// <param name="deviceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllUserAssetsByDeviceIdApiResponse"/>?&gt;</returns>
        Task<IGetAllUserAssetsByDeviceIdApiResponse?> GetAllUserAssetsByDeviceIdOrDefaultAsync(string deviceId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint requires the &#x60;asset.read&#x60; permission.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetInfoApiResponse"/>&gt;</returns>
        Task<IGetAssetInfoApiResponse> GetAssetInfoAsync(Guid id, Option<string> key = default, Option<string> slug = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint requires the &#x60;asset.read&#x60; permission.
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetInfoApiResponse"/>?&gt;</returns>
        Task<IGetAssetInfoApiResponse?> GetAssetInfoOrDefaultAsync(Guid id, Option<string> key = default, Option<string> slug = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint requires the &#x60;asset.read&#x60; permission.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetMetadataApiResponse"/>&gt;</returns>
        Task<IGetAssetMetadataApiResponse> GetAssetMetadataAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint requires the &#x60;asset.read&#x60; permission.
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetMetadataApiResponse"/>?&gt;</returns>
        Task<IGetAssetMetadataApiResponse?> GetAssetMetadataOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint requires the &#x60;asset.read&#x60; permission.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="key"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetMetadataByKeyApiResponse"/>&gt;</returns>
        Task<IGetAssetMetadataByKeyApiResponse> GetAssetMetadataByKeyAsync(Guid id, AssetMetadataKey key, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint requires the &#x60;asset.read&#x60; permission.
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="key"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetMetadataByKeyApiResponse"/>?&gt;</returns>
        Task<IGetAssetMetadataByKeyApiResponse?> GetAssetMetadataByKeyOrDefaultAsync(Guid id, AssetMetadataKey key, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint requires the &#x60;asset.statistics&#x60; permission.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="isFavorite"> (optional)</param>
        /// <param name="isTrashed"> (optional)</param>
        /// <param name="visibility"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetStatisticsApiResponse"/>&gt;</returns>
        Task<IGetAssetStatisticsApiResponse> GetAssetStatisticsAsync(Option<bool> isFavorite = default, Option<bool> isTrashed = default, Option<AssetVisibility> visibility = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint requires the &#x60;asset.statistics&#x60; permission.
        /// </remarks>
        /// <param name="isFavorite"> (optional)</param>
        /// <param name="isTrashed"> (optional)</param>
        /// <param name="visibility"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetStatisticsApiResponse"/>?&gt;</returns>
        Task<IGetAssetStatisticsApiResponse?> GetAssetStatisticsOrDefaultAsync(Option<bool> isFavorite = default, Option<bool> isTrashed = default, Option<AssetVisibility> visibility = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This property was deprecated in v1.116.0. This endpoint requires the &#x60;asset.read&#x60; permission.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="count"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRandomApiResponse"/>&gt;</returns>
        [Obsolete]
        Task<IGetRandomApiResponse> GetRandomAsync(Option<decimal> count = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This property was deprecated in v1.116.0. This endpoint requires the &#x60;asset.read&#x60; permission.
        /// </remarks>
        /// <param name="count"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRandomApiResponse"/>?&gt;</returns>
        [Obsolete]
        Task<IGetRandomApiResponse?> GetRandomOrDefaultAsync(Option<decimal> count = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint requires the &#x60;asset.view&#x60; permission.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPlayAssetVideoApiResponse"/>&gt;</returns>
        Task<IPlayAssetVideoApiResponse> PlayAssetVideoAsync(Guid id, Option<string> key = default, Option<string> slug = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint requires the &#x60;asset.view&#x60; permission.
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPlayAssetVideoApiResponse"/>?&gt;</returns>
        Task<IPlayAssetVideoApiResponse?> PlayAssetVideoOrDefaultAsync(Guid id, Option<string> key = default, Option<string> slug = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Replace the asset with new file, without changing its id
        /// </summary>
        /// <remarks>
        /// This property was deprecated in v1.142.0. Replace the asset with new file, without changing its id. This endpoint requires the &#x60;asset.replace&#x60; permission.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="assetData"></param>
        /// <param name="deviceAssetId"></param>
        /// <param name="deviceId"></param>
        /// <param name="fileCreatedAt"></param>
        /// <param name="fileModifiedAt"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="duration"> (optional)</param>
        /// <param name="filename"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReplaceAssetApiResponse"/>&gt;</returns>
        [Obsolete]
        Task<IReplaceAssetApiResponse> ReplaceAssetAsync(Guid id, System.IO.Stream assetData, string deviceAssetId, string deviceId, DateTime fileCreatedAt, DateTime fileModifiedAt, Option<string> key = default, Option<string> slug = default, Option<string> duration = default, Option<string> filename = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Replace the asset with new file, without changing its id
        /// </summary>
        /// <remarks>
        /// This property was deprecated in v1.142.0. Replace the asset with new file, without changing its id. This endpoint requires the &#x60;asset.replace&#x60; permission.
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="assetData"></param>
        /// <param name="deviceAssetId"></param>
        /// <param name="deviceId"></param>
        /// <param name="fileCreatedAt"></param>
        /// <param name="fileModifiedAt"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="duration"> (optional)</param>
        /// <param name="filename"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReplaceAssetApiResponse"/>?&gt;</returns>
        [Obsolete]
        Task<IReplaceAssetApiResponse?> ReplaceAssetOrDefaultAsync(Guid id, System.IO.Stream assetData, string deviceAssetId, string deviceId, DateTime fileCreatedAt, DateTime fileModifiedAt, Option<string> key = default, Option<string> slug = default, Option<string> duration = default, Option<string> filename = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetJobsDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRunAssetJobsApiResponse"/>&gt;</returns>
        Task<IRunAssetJobsApiResponse> RunAssetJobsAsync(AssetJobsDto assetJobsDto, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="assetJobsDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRunAssetJobsApiResponse"/>?&gt;</returns>
        Task<IRunAssetJobsApiResponse?> RunAssetJobsOrDefaultAsync(AssetJobsDto assetJobsDto, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint requires the &#x60;asset.update&#x60; permission.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateAssetDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateAssetApiResponse"/>&gt;</returns>
        Task<IUpdateAssetApiResponse> UpdateAssetAsync(Guid id, UpdateAssetDto updateAssetDto, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint requires the &#x60;asset.update&#x60; permission.
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="updateAssetDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateAssetApiResponse"/>?&gt;</returns>
        Task<IUpdateAssetApiResponse?> UpdateAssetOrDefaultAsync(Guid id, UpdateAssetDto updateAssetDto, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint requires the &#x60;asset.update&#x60; permission.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="assetMetadataUpsertDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateAssetMetadataApiResponse"/>&gt;</returns>
        Task<IUpdateAssetMetadataApiResponse> UpdateAssetMetadataAsync(Guid id, AssetMetadataUpsertDto assetMetadataUpsertDto, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint requires the &#x60;asset.update&#x60; permission.
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="assetMetadataUpsertDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateAssetMetadataApiResponse"/>?&gt;</returns>
        Task<IUpdateAssetMetadataApiResponse?> UpdateAssetMetadataOrDefaultAsync(Guid id, AssetMetadataUpsertDto assetMetadataUpsertDto, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint requires the &#x60;asset.update&#x60; permission.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetBulkUpdateDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateAssetsApiResponse"/>&gt;</returns>
        Task<IUpdateAssetsApiResponse> UpdateAssetsAsync(AssetBulkUpdateDto assetBulkUpdateDto, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint requires the &#x60;asset.update&#x60; permission.
        /// </remarks>
        /// <param name="assetBulkUpdateDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateAssetsApiResponse"/>?&gt;</returns>
        Task<IUpdateAssetsApiResponse?> UpdateAssetsOrDefaultAsync(AssetBulkUpdateDto assetBulkUpdateDto, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint requires the &#x60;asset.upload&#x60; permission.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetData"></param>
        /// <param name="deviceAssetId"></param>
        /// <param name="deviceId"></param>
        /// <param name="fileCreatedAt"></param>
        /// <param name="fileModifiedAt"></param>
        /// <param name="metadata"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="xImmichChecksum">sha1 checksum that can be used for duplicate detection before the file is uploaded (optional)</param>
        /// <param name="duration"> (optional)</param>
        /// <param name="filename"> (optional)</param>
        /// <param name="isFavorite"> (optional)</param>
        /// <param name="livePhotoVideoId"> (optional)</param>
        /// <param name="sidecarData"> (optional)</param>
        /// <param name="visibility"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadAssetApiResponse"/>&gt;</returns>
        Task<IUploadAssetApiResponse> UploadAssetAsync(System.IO.Stream assetData, string deviceAssetId, string deviceId, DateTime fileCreatedAt, DateTime fileModifiedAt, List<AssetMetadataUpsertItemDto> metadata, Option<string> key = default, Option<string> slug = default, Option<string> xImmichChecksum = default, Option<string> duration = default, Option<string> filename = default, Option<bool> isFavorite = default, Option<Guid> livePhotoVideoId = default, Option<System.IO.Stream> sidecarData = default, Option<AssetVisibility> visibility = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint requires the &#x60;asset.upload&#x60; permission.
        /// </remarks>
        /// <param name="assetData"></param>
        /// <param name="deviceAssetId"></param>
        /// <param name="deviceId"></param>
        /// <param name="fileCreatedAt"></param>
        /// <param name="fileModifiedAt"></param>
        /// <param name="metadata"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="xImmichChecksum">sha1 checksum that can be used for duplicate detection before the file is uploaded (optional)</param>
        /// <param name="duration"> (optional)</param>
        /// <param name="filename"> (optional)</param>
        /// <param name="isFavorite"> (optional)</param>
        /// <param name="livePhotoVideoId"> (optional)</param>
        /// <param name="sidecarData"> (optional)</param>
        /// <param name="visibility"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadAssetApiResponse"/>?&gt;</returns>
        Task<IUploadAssetApiResponse?> UploadAssetOrDefaultAsync(System.IO.Stream assetData, string deviceAssetId, string deviceId, DateTime fileCreatedAt, DateTime fileModifiedAt, List<AssetMetadataUpsertItemDto> metadata, Option<string> key = default, Option<string> slug = default, Option<string> xImmichChecksum = default, Option<string> duration = default, Option<string> filename = default, Option<bool> isFavorite = default, Option<Guid> livePhotoVideoId = default, Option<System.IO.Stream> sidecarData = default, Option<AssetVisibility> visibility = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint requires the &#x60;asset.view&#x60; permission.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IViewAssetApiResponse"/>&gt;</returns>
        Task<IViewAssetApiResponse> ViewAssetAsync(Guid id, Option<string> key = default, Option<AssetMediaSize> size = default, Option<string> slug = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint requires the &#x60;asset.view&#x60; permission.
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IViewAssetApiResponse"/>?&gt;</returns>
        Task<IViewAssetApiResponse?> ViewAssetOrDefaultAsync(Guid id, Option<string> key = default, Option<AssetMediaSize> size = default, Option<string> slug = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICheckBulkUploadApiResponse"/>
    /// </summary>
    public interface ICheckBulkUploadApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.AssetBulkUploadCheckResponseDto?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ICheckExistingAssetsApiResponse"/>
    /// </summary>
    public interface ICheckExistingAssetsApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.CheckExistingAssetsResponseDto?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteAssetMetadataApiResponse"/>
    /// </summary>
    public interface IDeleteAssetMetadataApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteAssetsApiResponse"/>
    /// </summary>
    public interface IDeleteAssetsApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }
    }

    /// <summary>
    /// The <see cref="IDownloadAssetApiResponse"/>
    /// </summary>
    public interface IDownloadAssetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<System.IO.Stream?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetAllUserAssetsByDeviceIdApiResponse"/>
    /// </summary>
    public interface IGetAllUserAssetsByDeviceIdApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<string>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetAssetInfoApiResponse"/>
    /// </summary>
    public interface IGetAssetInfoApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.AssetResponseDto?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetAssetMetadataApiResponse"/>
    /// </summary>
    public interface IGetAssetMetadataApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<AssetMetadataResponseDto>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetAssetMetadataByKeyApiResponse"/>
    /// </summary>
    public interface IGetAssetMetadataByKeyApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.AssetMetadataResponseDto?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetAssetStatisticsApiResponse"/>
    /// </summary>
    public interface IGetAssetStatisticsApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.AssetStatsResponseDto?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetRandomApiResponse"/>
    /// </summary>
    public interface IGetRandomApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<AssetResponseDto>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IPlayAssetVideoApiResponse"/>
    /// </summary>
    public interface IPlayAssetVideoApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<System.IO.Stream?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IReplaceAssetApiResponse"/>
    /// </summary>
    public interface IReplaceAssetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.AssetMediaResponseDto?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IRunAssetJobsApiResponse"/>
    /// </summary>
    public interface IRunAssetJobsApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateAssetApiResponse"/>
    /// </summary>
    public interface IUpdateAssetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.AssetResponseDto?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateAssetMetadataApiResponse"/>
    /// </summary>
    public interface IUpdateAssetMetadataApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<AssetMetadataResponseDto>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateAssetsApiResponse"/>
    /// </summary>
    public interface IUpdateAssetsApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }
    }

    /// <summary>
    /// The <see cref="IUploadAssetApiResponse"/>
    /// </summary>
    public interface IUploadAssetApiResponse : Org.OpenAPITools.Client.IApiResponse, ICreated<Org.OpenAPITools.Model.AssetMediaResponseDto?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="IViewAssetApiResponse"/>
    /// </summary>
    public interface IViewAssetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<System.IO.Stream?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AssetsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCheckBulkUpload;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCheckBulkUpload;

        internal void ExecuteOnCheckBulkUpload(AssetsApi.CheckBulkUploadApiResponse apiResponse)
        {
            OnCheckBulkUpload?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCheckBulkUpload(Exception exception)
        {
            OnErrorCheckBulkUpload?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCheckExistingAssets;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCheckExistingAssets;

        internal void ExecuteOnCheckExistingAssets(AssetsApi.CheckExistingAssetsApiResponse apiResponse)
        {
            OnCheckExistingAssets?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCheckExistingAssets(Exception exception)
        {
            OnErrorCheckExistingAssets?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteAssetMetadata;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteAssetMetadata;

        internal void ExecuteOnDeleteAssetMetadata(AssetsApi.DeleteAssetMetadataApiResponse apiResponse)
        {
            OnDeleteAssetMetadata?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteAssetMetadata(Exception exception)
        {
            OnErrorDeleteAssetMetadata?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteAssets;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteAssets;

        internal void ExecuteOnDeleteAssets(AssetsApi.DeleteAssetsApiResponse apiResponse)
        {
            OnDeleteAssets?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteAssets(Exception exception)
        {
            OnErrorDeleteAssets?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDownloadAsset;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDownloadAsset;

        internal void ExecuteOnDownloadAsset(AssetsApi.DownloadAssetApiResponse apiResponse)
        {
            OnDownloadAsset?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDownloadAsset(Exception exception)
        {
            OnErrorDownloadAsset?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAllUserAssetsByDeviceId;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAllUserAssetsByDeviceId;

        internal void ExecuteOnGetAllUserAssetsByDeviceId(AssetsApi.GetAllUserAssetsByDeviceIdApiResponse apiResponse)
        {
            OnGetAllUserAssetsByDeviceId?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAllUserAssetsByDeviceId(Exception exception)
        {
            OnErrorGetAllUserAssetsByDeviceId?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAssetInfo;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAssetInfo;

        internal void ExecuteOnGetAssetInfo(AssetsApi.GetAssetInfoApiResponse apiResponse)
        {
            OnGetAssetInfo?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAssetInfo(Exception exception)
        {
            OnErrorGetAssetInfo?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAssetMetadata;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAssetMetadata;

        internal void ExecuteOnGetAssetMetadata(AssetsApi.GetAssetMetadataApiResponse apiResponse)
        {
            OnGetAssetMetadata?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAssetMetadata(Exception exception)
        {
            OnErrorGetAssetMetadata?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAssetMetadataByKey;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAssetMetadataByKey;

        internal void ExecuteOnGetAssetMetadataByKey(AssetsApi.GetAssetMetadataByKeyApiResponse apiResponse)
        {
            OnGetAssetMetadataByKey?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAssetMetadataByKey(Exception exception)
        {
            OnErrorGetAssetMetadataByKey?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAssetStatistics;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAssetStatistics;

        internal void ExecuteOnGetAssetStatistics(AssetsApi.GetAssetStatisticsApiResponse apiResponse)
        {
            OnGetAssetStatistics?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAssetStatistics(Exception exception)
        {
            OnErrorGetAssetStatistics?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetRandom;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetRandom;

        internal void ExecuteOnGetRandom(AssetsApi.GetRandomApiResponse apiResponse)
        {
            OnGetRandom?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetRandom(Exception exception)
        {
            OnErrorGetRandom?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPlayAssetVideo;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPlayAssetVideo;

        internal void ExecuteOnPlayAssetVideo(AssetsApi.PlayAssetVideoApiResponse apiResponse)
        {
            OnPlayAssetVideo?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPlayAssetVideo(Exception exception)
        {
            OnErrorPlayAssetVideo?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnReplaceAsset;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorReplaceAsset;

        internal void ExecuteOnReplaceAsset(AssetsApi.ReplaceAssetApiResponse apiResponse)
        {
            OnReplaceAsset?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorReplaceAsset(Exception exception)
        {
            OnErrorReplaceAsset?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnRunAssetJobs;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorRunAssetJobs;

        internal void ExecuteOnRunAssetJobs(AssetsApi.RunAssetJobsApiResponse apiResponse)
        {
            OnRunAssetJobs?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorRunAssetJobs(Exception exception)
        {
            OnErrorRunAssetJobs?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateAsset;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateAsset;

        internal void ExecuteOnUpdateAsset(AssetsApi.UpdateAssetApiResponse apiResponse)
        {
            OnUpdateAsset?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateAsset(Exception exception)
        {
            OnErrorUpdateAsset?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateAssetMetadata;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateAssetMetadata;

        internal void ExecuteOnUpdateAssetMetadata(AssetsApi.UpdateAssetMetadataApiResponse apiResponse)
        {
            OnUpdateAssetMetadata?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateAssetMetadata(Exception exception)
        {
            OnErrorUpdateAssetMetadata?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateAssets;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateAssets;

        internal void ExecuteOnUpdateAssets(AssetsApi.UpdateAssetsApiResponse apiResponse)
        {
            OnUpdateAssets?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateAssets(Exception exception)
        {
            OnErrorUpdateAssets?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUploadAsset;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUploadAsset;

        internal void ExecuteOnUploadAsset(AssetsApi.UploadAssetApiResponse apiResponse)
        {
            OnUploadAsset?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUploadAsset(Exception exception)
        {
            OnErrorUploadAsset?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnViewAsset;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorViewAsset;

        internal void ExecuteOnViewAsset(AssetsApi.ViewAssetApiResponse apiResponse)
        {
            OnViewAsset?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorViewAsset(Exception exception)
        {
            OnErrorViewAsset?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class AssetsApi : IAssetsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<AssetsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public AssetsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssetsApi(ILogger<AssetsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, AssetsApiEvents assetsApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<AssetsApi>();
            HttpClient = httpClient;
            Events = assetsApiEvents;
            ApiKeyProvider = apiKeyProvider;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatCheckBulkUpload(AssetBulkUploadCheckDto assetBulkUploadCheckDto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="assetBulkUploadCheckDto"></param>
        /// <returns></returns>
        private void ValidateCheckBulkUpload(AssetBulkUploadCheckDto assetBulkUploadCheckDto)
        {
            if (assetBulkUploadCheckDto == null)
                throw new ArgumentNullException(nameof(assetBulkUploadCheckDto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="assetBulkUploadCheckDto"></param>
        private void AfterCheckBulkUploadDefaultImplementation(ICheckBulkUploadApiResponse apiResponseLocalVar, AssetBulkUploadCheckDto assetBulkUploadCheckDto)
        {
            bool suppressDefaultLog = false;
            AfterCheckBulkUpload(ref suppressDefaultLog, apiResponseLocalVar, assetBulkUploadCheckDto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="assetBulkUploadCheckDto"></param>
        partial void AfterCheckBulkUpload(ref bool suppressDefaultLog, ICheckBulkUploadApiResponse apiResponseLocalVar, AssetBulkUploadCheckDto assetBulkUploadCheckDto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="assetBulkUploadCheckDto"></param>
        private void OnErrorCheckBulkUploadDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AssetBulkUploadCheckDto assetBulkUploadCheckDto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCheckBulkUpload(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, assetBulkUploadCheckDto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="assetBulkUploadCheckDto"></param>
        partial void OnErrorCheckBulkUpload(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AssetBulkUploadCheckDto assetBulkUploadCheckDto);

        /// <summary>
        /// checkBulkUpload Checks if assets exist by checksums. This endpoint requires the &#x60;asset.upload&#x60; permission.
        /// </summary>
        /// <param name="assetBulkUploadCheckDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICheckBulkUploadApiResponse"/>&gt;</returns>
        public async Task<ICheckBulkUploadApiResponse?> CheckBulkUploadOrDefaultAsync(AssetBulkUploadCheckDto assetBulkUploadCheckDto, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CheckBulkUploadAsync(assetBulkUploadCheckDto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// checkBulkUpload Checks if assets exist by checksums. This endpoint requires the &#x60;asset.upload&#x60; permission.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetBulkUploadCheckDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICheckBulkUploadApiResponse"/>&gt;</returns>
        public async Task<ICheckBulkUploadApiResponse> CheckBulkUploadAsync(AssetBulkUploadCheckDto assetBulkUploadCheckDto, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCheckBulkUpload(assetBulkUploadCheckDto);

                FormatCheckBulkUpload(assetBulkUploadCheckDto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/assets/bulk-upload-check"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/assets/bulk-upload-check");

                    httpRequestMessageLocalVar.Content = (assetBulkUploadCheckDto as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(assetBulkUploadCheckDto, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar3 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar3);

                    bearerTokenLocalVar3.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<CheckBulkUploadApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CheckBulkUploadApiResponse>();
                        CheckBulkUploadApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/assets/bulk-upload-check", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterCheckBulkUploadDefaultImplementation(apiResponseLocalVar, assetBulkUploadCheckDto);

                        Events.ExecuteOnCheckBulkUpload(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCheckBulkUploadDefaultImplementation(e, "/assets/bulk-upload-check", uriBuilderLocalVar.Path, assetBulkUploadCheckDto);
                Events.ExecuteOnErrorCheckBulkUpload(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CheckBulkUploadApiResponse"/>
        /// </summary>
        public partial class CheckBulkUploadApiResponse : Org.OpenAPITools.Client.ApiResponse, ICheckBulkUploadApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CheckBulkUploadApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CheckBulkUploadApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CheckBulkUploadApiResponse(ILogger<CheckBulkUploadApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="CheckBulkUploadApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CheckBulkUploadApiResponse(ILogger<CheckBulkUploadApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AssetBulkUploadCheckResponseDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AssetBulkUploadCheckResponseDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.AssetBulkUploadCheckResponseDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCheckExistingAssets(CheckExistingAssetsDto checkExistingAssetsDto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="checkExistingAssetsDto"></param>
        /// <returns></returns>
        private void ValidateCheckExistingAssets(CheckExistingAssetsDto checkExistingAssetsDto)
        {
            if (checkExistingAssetsDto == null)
                throw new ArgumentNullException(nameof(checkExistingAssetsDto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="checkExistingAssetsDto"></param>
        private void AfterCheckExistingAssetsDefaultImplementation(ICheckExistingAssetsApiResponse apiResponseLocalVar, CheckExistingAssetsDto checkExistingAssetsDto)
        {
            bool suppressDefaultLog = false;
            AfterCheckExistingAssets(ref suppressDefaultLog, apiResponseLocalVar, checkExistingAssetsDto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="checkExistingAssetsDto"></param>
        partial void AfterCheckExistingAssets(ref bool suppressDefaultLog, ICheckExistingAssetsApiResponse apiResponseLocalVar, CheckExistingAssetsDto checkExistingAssetsDto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="checkExistingAssetsDto"></param>
        private void OnErrorCheckExistingAssetsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CheckExistingAssetsDto checkExistingAssetsDto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCheckExistingAssets(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, checkExistingAssetsDto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="checkExistingAssetsDto"></param>
        partial void OnErrorCheckExistingAssets(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CheckExistingAssetsDto checkExistingAssetsDto);

        /// <summary>
        /// checkExistingAssets Checks if multiple assets exist on the server and returns all existing - used by background backup
        /// </summary>
        /// <param name="checkExistingAssetsDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICheckExistingAssetsApiResponse"/>&gt;</returns>
        public async Task<ICheckExistingAssetsApiResponse?> CheckExistingAssetsOrDefaultAsync(CheckExistingAssetsDto checkExistingAssetsDto, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CheckExistingAssetsAsync(checkExistingAssetsDto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// checkExistingAssets Checks if multiple assets exist on the server and returns all existing - used by background backup
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkExistingAssetsDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICheckExistingAssetsApiResponse"/>&gt;</returns>
        public async Task<ICheckExistingAssetsApiResponse> CheckExistingAssetsAsync(CheckExistingAssetsDto checkExistingAssetsDto, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCheckExistingAssets(checkExistingAssetsDto);

                FormatCheckExistingAssets(checkExistingAssetsDto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/assets/exist"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/assets/exist");

                    httpRequestMessageLocalVar.Content = (checkExistingAssetsDto as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(checkExistingAssetsDto, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar3 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar3);

                    bearerTokenLocalVar3.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<CheckExistingAssetsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CheckExistingAssetsApiResponse>();
                        CheckExistingAssetsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/assets/exist", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterCheckExistingAssetsDefaultImplementation(apiResponseLocalVar, checkExistingAssetsDto);

                        Events.ExecuteOnCheckExistingAssets(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCheckExistingAssetsDefaultImplementation(e, "/assets/exist", uriBuilderLocalVar.Path, checkExistingAssetsDto);
                Events.ExecuteOnErrorCheckExistingAssets(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CheckExistingAssetsApiResponse"/>
        /// </summary>
        public partial class CheckExistingAssetsApiResponse : Org.OpenAPITools.Client.ApiResponse, ICheckExistingAssetsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CheckExistingAssetsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CheckExistingAssetsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CheckExistingAssetsApiResponse(ILogger<CheckExistingAssetsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="CheckExistingAssetsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CheckExistingAssetsApiResponse(ILogger<CheckExistingAssetsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.CheckExistingAssetsResponseDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.CheckExistingAssetsResponseDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.CheckExistingAssetsResponseDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteAssetMetadata(ref Guid id, ref AssetMetadataKey key);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="key"></param>
        private void AfterDeleteAssetMetadataDefaultImplementation(IDeleteAssetMetadataApiResponse apiResponseLocalVar, Guid id, AssetMetadataKey key)
        {
            bool suppressDefaultLog = false;
            AfterDeleteAssetMetadata(ref suppressDefaultLog, apiResponseLocalVar, id, key);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="key"></param>
        partial void AfterDeleteAssetMetadata(ref bool suppressDefaultLog, IDeleteAssetMetadataApiResponse apiResponseLocalVar, Guid id, AssetMetadataKey key);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="key"></param>
        private void OnErrorDeleteAssetMetadataDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, AssetMetadataKey key)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteAssetMetadata(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, key);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="key"></param>
        partial void OnErrorDeleteAssetMetadata(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, AssetMetadataKey key);

        /// <summary>
        ///  This endpoint requires the &#x60;asset.update&#x60; permission.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="key"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAssetMetadataApiResponse"/>&gt;</returns>
        public async Task<IDeleteAssetMetadataApiResponse?> DeleteAssetMetadataOrDefaultAsync(Guid id, AssetMetadataKey key, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteAssetMetadataAsync(id, key, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  This endpoint requires the &#x60;asset.update&#x60; permission.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="key"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAssetMetadataApiResponse"/>&gt;</returns>
        public async Task<IDeleteAssetMetadataApiResponse> DeleteAssetMetadataAsync(Guid id, AssetMetadataKey key, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteAssetMetadata(ref id, ref key);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/assets/{id}/metadata/{key}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/assets/{id}/metadata/{key}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bkey%7D", Uri.EscapeDataString(key.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar3 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar3);

                    bearerTokenLocalVar3.UseInHeader(httpRequestMessageLocalVar, "");

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<DeleteAssetMetadataApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteAssetMetadataApiResponse>();
                        DeleteAssetMetadataApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/assets/{id}/metadata/{key}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterDeleteAssetMetadataDefaultImplementation(apiResponseLocalVar, id, key);

                        Events.ExecuteOnDeleteAssetMetadata(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteAssetMetadataDefaultImplementation(e, "/assets/{id}/metadata/{key}", uriBuilderLocalVar.Path, id, key);
                Events.ExecuteOnErrorDeleteAssetMetadata(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteAssetMetadataApiResponse"/>
        /// </summary>
        public partial class DeleteAssetMetadataApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteAssetMetadataApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteAssetMetadataApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteAssetMetadataApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteAssetMetadataApiResponse(ILogger<DeleteAssetMetadataApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="DeleteAssetMetadataApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteAssetMetadataApiResponse(ILogger<DeleteAssetMetadataApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteAssets(AssetBulkDeleteDto assetBulkDeleteDto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="assetBulkDeleteDto"></param>
        /// <returns></returns>
        private void ValidateDeleteAssets(AssetBulkDeleteDto assetBulkDeleteDto)
        {
            if (assetBulkDeleteDto == null)
                throw new ArgumentNullException(nameof(assetBulkDeleteDto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="assetBulkDeleteDto"></param>
        private void AfterDeleteAssetsDefaultImplementation(IDeleteAssetsApiResponse apiResponseLocalVar, AssetBulkDeleteDto assetBulkDeleteDto)
        {
            bool suppressDefaultLog = false;
            AfterDeleteAssets(ref suppressDefaultLog, apiResponseLocalVar, assetBulkDeleteDto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="assetBulkDeleteDto"></param>
        partial void AfterDeleteAssets(ref bool suppressDefaultLog, IDeleteAssetsApiResponse apiResponseLocalVar, AssetBulkDeleteDto assetBulkDeleteDto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="assetBulkDeleteDto"></param>
        private void OnErrorDeleteAssetsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AssetBulkDeleteDto assetBulkDeleteDto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteAssets(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, assetBulkDeleteDto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="assetBulkDeleteDto"></param>
        partial void OnErrorDeleteAssets(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AssetBulkDeleteDto assetBulkDeleteDto);

        /// <summary>
        ///  This endpoint requires the &#x60;asset.delete&#x60; permission.
        /// </summary>
        /// <param name="assetBulkDeleteDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAssetsApiResponse"/>&gt;</returns>
        public async Task<IDeleteAssetsApiResponse?> DeleteAssetsOrDefaultAsync(AssetBulkDeleteDto assetBulkDeleteDto, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteAssetsAsync(assetBulkDeleteDto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  This endpoint requires the &#x60;asset.delete&#x60; permission.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetBulkDeleteDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAssetsApiResponse"/>&gt;</returns>
        public async Task<IDeleteAssetsApiResponse> DeleteAssetsAsync(AssetBulkDeleteDto assetBulkDeleteDto, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteAssets(assetBulkDeleteDto);

                FormatDeleteAssets(assetBulkDeleteDto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/assets"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/assets");

                    httpRequestMessageLocalVar.Content = (assetBulkDeleteDto as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(assetBulkDeleteDto, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar3 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar3);

                    bearerTokenLocalVar3.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<DeleteAssetsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteAssetsApiResponse>();
                        DeleteAssetsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/assets", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterDeleteAssetsDefaultImplementation(apiResponseLocalVar, assetBulkDeleteDto);

                        Events.ExecuteOnDeleteAssets(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteAssetsDefaultImplementation(e, "/assets", uriBuilderLocalVar.Path, assetBulkDeleteDto);
                Events.ExecuteOnErrorDeleteAssets(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteAssetsApiResponse"/>
        /// </summary>
        public partial class DeleteAssetsApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteAssetsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteAssetsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteAssetsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteAssetsApiResponse(ILogger<DeleteAssetsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="DeleteAssetsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteAssetsApiResponse(ILogger<DeleteAssetsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDownloadAsset(ref Guid id, ref Option<string> key, ref Option<string> slug);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        /// <returns></returns>
        private void ValidateDownloadAsset(Option<string> key, Option<string> slug)
        {
            if (key.IsSet && key.Value == null)
                throw new ArgumentNullException(nameof(key));

            if (slug.IsSet && slug.Value == null)
                throw new ArgumentNullException(nameof(slug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        private void AfterDownloadAssetDefaultImplementation(IDownloadAssetApiResponse apiResponseLocalVar, Guid id, Option<string> key, Option<string> slug)
        {
            bool suppressDefaultLog = false;
            AfterDownloadAsset(ref suppressDefaultLog, apiResponseLocalVar, id, key, slug);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        partial void AfterDownloadAsset(ref bool suppressDefaultLog, IDownloadAssetApiResponse apiResponseLocalVar, Guid id, Option<string> key, Option<string> slug);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        private void OnErrorDownloadAssetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<string> key, Option<string> slug)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDownloadAsset(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, key, slug);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        partial void OnErrorDownloadAsset(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<string> key, Option<string> slug);

        /// <summary>
        ///  This endpoint requires the &#x60;asset.download&#x60; permission.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadAssetApiResponse"/>&gt;</returns>
        public async Task<IDownloadAssetApiResponse?> DownloadAssetOrDefaultAsync(Guid id, Option<string> key = default, Option<string> slug = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DownloadAssetAsync(id, key, slug, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  This endpoint requires the &#x60;asset.download&#x60; permission.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadAssetApiResponse"/>&gt;</returns>
        public async Task<IDownloadAssetApiResponse> DownloadAssetAsync(Guid id, Option<string> key = default, Option<string> slug = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDownloadAsset(key, slug);

                FormatDownloadAsset(ref id, ref key, ref slug);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/assets/{id}/original"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/assets/{id}/original");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (key.IsSet)
                        parseQueryStringLocalVar["key"] = ClientUtils.ParameterToString(key.Value);

                    if (slug.IsSet)
                        parseQueryStringLocalVar["slug"] = ClientUtils.ParameterToString(slug.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar3 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar3);

                    bearerTokenLocalVar3.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/octet-stream"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<DownloadAssetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DownloadAssetApiResponse>();
                        DownloadAssetApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            case (200):
                            {
                                byte[] responseBytesArrayLocalVar = await httpResponseMessageLocalVar.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false);
                                System.IO.Stream responseContentStreamLocalVar = new System.IO.MemoryStream(responseBytesArrayLocalVar);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentStreamLocalVar, "/assets/{id}/original", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/assets/{id}/original", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterDownloadAssetDefaultImplementation(apiResponseLocalVar, id, key, slug);

                        Events.ExecuteOnDownloadAsset(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDownloadAssetDefaultImplementation(e, "/assets/{id}/original", uriBuilderLocalVar.Path, id, key, slug);
                Events.ExecuteOnErrorDownloadAsset(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DownloadAssetApiResponse"/>
        /// </summary>
        public partial class DownloadAssetApiResponse : Org.OpenAPITools.Client.ApiResponse, IDownloadAssetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DownloadAssetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DownloadAssetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DownloadAssetApiResponse(ILogger<DownloadAssetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="DownloadAssetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DownloadAssetApiResponse(ILogger<DownloadAssetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public System.IO.Stream? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? ContentStream
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out System.IO.Stream? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAllUserAssetsByDeviceId(ref string deviceId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="deviceId"></param>
        /// <returns></returns>
        private void ValidateGetAllUserAssetsByDeviceId(string deviceId)
        {
            if (deviceId == null)
                throw new ArgumentNullException(nameof(deviceId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="deviceId"></param>
        private void AfterGetAllUserAssetsByDeviceIdDefaultImplementation(IGetAllUserAssetsByDeviceIdApiResponse apiResponseLocalVar, string deviceId)
        {
            bool suppressDefaultLog = false;
            AfterGetAllUserAssetsByDeviceId(ref suppressDefaultLog, apiResponseLocalVar, deviceId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="deviceId"></param>
        partial void AfterGetAllUserAssetsByDeviceId(ref bool suppressDefaultLog, IGetAllUserAssetsByDeviceIdApiResponse apiResponseLocalVar, string deviceId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="deviceId"></param>
        private void OnErrorGetAllUserAssetsByDeviceIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string deviceId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAllUserAssetsByDeviceId(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, deviceId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="deviceId"></param>
        partial void OnErrorGetAllUserAssetsByDeviceId(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string deviceId);

        /// <summary>
        /// getAllUserAssetsByDeviceId Get all asset of a device that are in the database, ID only.
        /// </summary>
        /// <param name="deviceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllUserAssetsByDeviceIdApiResponse"/>&gt;</returns>
        public async Task<IGetAllUserAssetsByDeviceIdApiResponse?> GetAllUserAssetsByDeviceIdOrDefaultAsync(string deviceId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAllUserAssetsByDeviceIdAsync(deviceId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// getAllUserAssetsByDeviceId Get all asset of a device that are in the database, ID only.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllUserAssetsByDeviceIdApiResponse"/>&gt;</returns>
        public async Task<IGetAllUserAssetsByDeviceIdApiResponse> GetAllUserAssetsByDeviceIdAsync(string deviceId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAllUserAssetsByDeviceId(deviceId);

                FormatGetAllUserAssetsByDeviceId(ref deviceId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/assets/device/{deviceId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/assets/device/{deviceId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BdeviceId%7D", Uri.EscapeDataString(deviceId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar3 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar3);

                    bearerTokenLocalVar3.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetAllUserAssetsByDeviceIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAllUserAssetsByDeviceIdApiResponse>();
                        GetAllUserAssetsByDeviceIdApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/assets/device/{deviceId}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetAllUserAssetsByDeviceIdDefaultImplementation(apiResponseLocalVar, deviceId);

                        Events.ExecuteOnGetAllUserAssetsByDeviceId(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAllUserAssetsByDeviceIdDefaultImplementation(e, "/assets/device/{deviceId}", uriBuilderLocalVar.Path, deviceId);
                Events.ExecuteOnErrorGetAllUserAssetsByDeviceId(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAllUserAssetsByDeviceIdApiResponse"/>
        /// </summary>
        public partial class GetAllUserAssetsByDeviceIdApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetAllUserAssetsByDeviceIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAllUserAssetsByDeviceIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAllUserAssetsByDeviceIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAllUserAssetsByDeviceIdApiResponse(ILogger<GetAllUserAssetsByDeviceIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetAllUserAssetsByDeviceIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAllUserAssetsByDeviceIdApiResponse(ILogger<GetAllUserAssetsByDeviceIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<string>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<string>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<string>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAssetInfo(ref Guid id, ref Option<string> key, ref Option<string> slug);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        /// <returns></returns>
        private void ValidateGetAssetInfo(Option<string> key, Option<string> slug)
        {
            if (key.IsSet && key.Value == null)
                throw new ArgumentNullException(nameof(key));

            if (slug.IsSet && slug.Value == null)
                throw new ArgumentNullException(nameof(slug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        private void AfterGetAssetInfoDefaultImplementation(IGetAssetInfoApiResponse apiResponseLocalVar, Guid id, Option<string> key, Option<string> slug)
        {
            bool suppressDefaultLog = false;
            AfterGetAssetInfo(ref suppressDefaultLog, apiResponseLocalVar, id, key, slug);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        partial void AfterGetAssetInfo(ref bool suppressDefaultLog, IGetAssetInfoApiResponse apiResponseLocalVar, Guid id, Option<string> key, Option<string> slug);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        private void OnErrorGetAssetInfoDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<string> key, Option<string> slug)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAssetInfo(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, key, slug);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        partial void OnErrorGetAssetInfo(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<string> key, Option<string> slug);

        /// <summary>
        ///  This endpoint requires the &#x60;asset.read&#x60; permission.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetInfoApiResponse"/>&gt;</returns>
        public async Task<IGetAssetInfoApiResponse?> GetAssetInfoOrDefaultAsync(Guid id, Option<string> key = default, Option<string> slug = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAssetInfoAsync(id, key, slug, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  This endpoint requires the &#x60;asset.read&#x60; permission.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetInfoApiResponse"/>&gt;</returns>
        public async Task<IGetAssetInfoApiResponse> GetAssetInfoAsync(Guid id, Option<string> key = default, Option<string> slug = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAssetInfo(key, slug);

                FormatGetAssetInfo(ref id, ref key, ref slug);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/assets/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/assets/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (key.IsSet)
                        parseQueryStringLocalVar["key"] = ClientUtils.ParameterToString(key.Value);

                    if (slug.IsSet)
                        parseQueryStringLocalVar["slug"] = ClientUtils.ParameterToString(slug.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar3 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar3);

                    bearerTokenLocalVar3.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetAssetInfoApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAssetInfoApiResponse>();
                        GetAssetInfoApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/assets/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetAssetInfoDefaultImplementation(apiResponseLocalVar, id, key, slug);

                        Events.ExecuteOnGetAssetInfo(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAssetInfoDefaultImplementation(e, "/assets/{id}", uriBuilderLocalVar.Path, id, key, slug);
                Events.ExecuteOnErrorGetAssetInfo(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAssetInfoApiResponse"/>
        /// </summary>
        public partial class GetAssetInfoApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetAssetInfoApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAssetInfoApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAssetInfoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAssetInfoApiResponse(ILogger<GetAssetInfoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetAssetInfoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAssetInfoApiResponse(ILogger<GetAssetInfoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AssetResponseDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AssetResponseDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.AssetResponseDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAssetMetadata(ref Guid id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetAssetMetadataDefaultImplementation(IGetAssetMetadataApiResponse apiResponseLocalVar, Guid id)
        {
            bool suppressDefaultLog = false;
            AfterGetAssetMetadata(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetAssetMetadata(ref bool suppressDefaultLog, IGetAssetMetadataApiResponse apiResponseLocalVar, Guid id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGetAssetMetadataDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAssetMetadata(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGetAssetMetadata(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id);

        /// <summary>
        ///  This endpoint requires the &#x60;asset.read&#x60; permission.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetMetadataApiResponse"/>&gt;</returns>
        public async Task<IGetAssetMetadataApiResponse?> GetAssetMetadataOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAssetMetadataAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  This endpoint requires the &#x60;asset.read&#x60; permission.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetMetadataApiResponse"/>&gt;</returns>
        public async Task<IGetAssetMetadataApiResponse> GetAssetMetadataAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetAssetMetadata(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/assets/{id}/metadata"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/assets/{id}/metadata");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar3 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar3);

                    bearerTokenLocalVar3.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetAssetMetadataApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAssetMetadataApiResponse>();
                        GetAssetMetadataApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/assets/{id}/metadata", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetAssetMetadataDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetAssetMetadata(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAssetMetadataDefaultImplementation(e, "/assets/{id}/metadata", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetAssetMetadata(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAssetMetadataApiResponse"/>
        /// </summary>
        public partial class GetAssetMetadataApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetAssetMetadataApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAssetMetadataApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAssetMetadataApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAssetMetadataApiResponse(ILogger<GetAssetMetadataApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetAssetMetadataApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAssetMetadataApiResponse(ILogger<GetAssetMetadataApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<AssetMetadataResponseDto>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<AssetMetadataResponseDto>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<AssetMetadataResponseDto>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAssetMetadataByKey(ref Guid id, ref AssetMetadataKey key);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="key"></param>
        private void AfterGetAssetMetadataByKeyDefaultImplementation(IGetAssetMetadataByKeyApiResponse apiResponseLocalVar, Guid id, AssetMetadataKey key)
        {
            bool suppressDefaultLog = false;
            AfterGetAssetMetadataByKey(ref suppressDefaultLog, apiResponseLocalVar, id, key);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="key"></param>
        partial void AfterGetAssetMetadataByKey(ref bool suppressDefaultLog, IGetAssetMetadataByKeyApiResponse apiResponseLocalVar, Guid id, AssetMetadataKey key);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="key"></param>
        private void OnErrorGetAssetMetadataByKeyDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, AssetMetadataKey key)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAssetMetadataByKey(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, key);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="key"></param>
        partial void OnErrorGetAssetMetadataByKey(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, AssetMetadataKey key);

        /// <summary>
        ///  This endpoint requires the &#x60;asset.read&#x60; permission.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="key"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetMetadataByKeyApiResponse"/>&gt;</returns>
        public async Task<IGetAssetMetadataByKeyApiResponse?> GetAssetMetadataByKeyOrDefaultAsync(Guid id, AssetMetadataKey key, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAssetMetadataByKeyAsync(id, key, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  This endpoint requires the &#x60;asset.read&#x60; permission.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="key"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetMetadataByKeyApiResponse"/>&gt;</returns>
        public async Task<IGetAssetMetadataByKeyApiResponse> GetAssetMetadataByKeyAsync(Guid id, AssetMetadataKey key, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetAssetMetadataByKey(ref id, ref key);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/assets/{id}/metadata/{key}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/assets/{id}/metadata/{key}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bkey%7D", Uri.EscapeDataString(key.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar3 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar3);

                    bearerTokenLocalVar3.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetAssetMetadataByKeyApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAssetMetadataByKeyApiResponse>();
                        GetAssetMetadataByKeyApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/assets/{id}/metadata/{key}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetAssetMetadataByKeyDefaultImplementation(apiResponseLocalVar, id, key);

                        Events.ExecuteOnGetAssetMetadataByKey(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAssetMetadataByKeyDefaultImplementation(e, "/assets/{id}/metadata/{key}", uriBuilderLocalVar.Path, id, key);
                Events.ExecuteOnErrorGetAssetMetadataByKey(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAssetMetadataByKeyApiResponse"/>
        /// </summary>
        public partial class GetAssetMetadataByKeyApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetAssetMetadataByKeyApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAssetMetadataByKeyApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAssetMetadataByKeyApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAssetMetadataByKeyApiResponse(ILogger<GetAssetMetadataByKeyApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetAssetMetadataByKeyApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAssetMetadataByKeyApiResponse(ILogger<GetAssetMetadataByKeyApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AssetMetadataResponseDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AssetMetadataResponseDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.AssetMetadataResponseDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAssetStatistics(ref Option<bool> isFavorite, ref Option<bool> isTrashed, ref Option<AssetVisibility> visibility);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="isFavorite"></param>
        /// <param name="isTrashed"></param>
        /// <param name="visibility"></param>
        private void AfterGetAssetStatisticsDefaultImplementation(IGetAssetStatisticsApiResponse apiResponseLocalVar, Option<bool> isFavorite, Option<bool> isTrashed, Option<AssetVisibility> visibility)
        {
            bool suppressDefaultLog = false;
            AfterGetAssetStatistics(ref suppressDefaultLog, apiResponseLocalVar, isFavorite, isTrashed, visibility);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="isFavorite"></param>
        /// <param name="isTrashed"></param>
        /// <param name="visibility"></param>
        partial void AfterGetAssetStatistics(ref bool suppressDefaultLog, IGetAssetStatisticsApiResponse apiResponseLocalVar, Option<bool> isFavorite, Option<bool> isTrashed, Option<AssetVisibility> visibility);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="isFavorite"></param>
        /// <param name="isTrashed"></param>
        /// <param name="visibility"></param>
        private void OnErrorGetAssetStatisticsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<bool> isFavorite, Option<bool> isTrashed, Option<AssetVisibility> visibility)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAssetStatistics(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, isFavorite, isTrashed, visibility);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="isFavorite"></param>
        /// <param name="isTrashed"></param>
        /// <param name="visibility"></param>
        partial void OnErrorGetAssetStatistics(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<bool> isFavorite, Option<bool> isTrashed, Option<AssetVisibility> visibility);

        /// <summary>
        ///  This endpoint requires the &#x60;asset.statistics&#x60; permission.
        /// </summary>
        /// <param name="isFavorite"> (optional)</param>
        /// <param name="isTrashed"> (optional)</param>
        /// <param name="visibility"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetStatisticsApiResponse"/>&gt;</returns>
        public async Task<IGetAssetStatisticsApiResponse?> GetAssetStatisticsOrDefaultAsync(Option<bool> isFavorite = default, Option<bool> isTrashed = default, Option<AssetVisibility> visibility = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAssetStatisticsAsync(isFavorite, isTrashed, visibility, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  This endpoint requires the &#x60;asset.statistics&#x60; permission.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="isFavorite"> (optional)</param>
        /// <param name="isTrashed"> (optional)</param>
        /// <param name="visibility"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetStatisticsApiResponse"/>&gt;</returns>
        public async Task<IGetAssetStatisticsApiResponse> GetAssetStatisticsAsync(Option<bool> isFavorite = default, Option<bool> isTrashed = default, Option<AssetVisibility> visibility = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetAssetStatistics(ref isFavorite, ref isTrashed, ref visibility);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/assets/statistics"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/assets/statistics");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (isFavorite.IsSet)
                        parseQueryStringLocalVar["isFavorite"] = ClientUtils.ParameterToString(isFavorite.Value);

                    if (isTrashed.IsSet)
                        parseQueryStringLocalVar["isTrashed"] = ClientUtils.ParameterToString(isTrashed.Value);

                    if (visibility.IsSet)
                        parseQueryStringLocalVar["visibility"] = ClientUtils.ParameterToString(visibility.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar3 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar3);

                    bearerTokenLocalVar3.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetAssetStatisticsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAssetStatisticsApiResponse>();
                        GetAssetStatisticsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/assets/statistics", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetAssetStatisticsDefaultImplementation(apiResponseLocalVar, isFavorite, isTrashed, visibility);

                        Events.ExecuteOnGetAssetStatistics(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAssetStatisticsDefaultImplementation(e, "/assets/statistics", uriBuilderLocalVar.Path, isFavorite, isTrashed, visibility);
                Events.ExecuteOnErrorGetAssetStatistics(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAssetStatisticsApiResponse"/>
        /// </summary>
        public partial class GetAssetStatisticsApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetAssetStatisticsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAssetStatisticsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAssetStatisticsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAssetStatisticsApiResponse(ILogger<GetAssetStatisticsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetAssetStatisticsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAssetStatisticsApiResponse(ILogger<GetAssetStatisticsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AssetStatsResponseDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AssetStatsResponseDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.AssetStatsResponseDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetRandom(ref Option<decimal> count);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="count"></param>
        private void AfterGetRandomDefaultImplementation(IGetRandomApiResponse apiResponseLocalVar, Option<decimal> count)
        {
            bool suppressDefaultLog = false;
            AfterGetRandom(ref suppressDefaultLog, apiResponseLocalVar, count);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="count"></param>
        partial void AfterGetRandom(ref bool suppressDefaultLog, IGetRandomApiResponse apiResponseLocalVar, Option<decimal> count);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="count"></param>
        private void OnErrorGetRandomDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<decimal> count)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetRandom(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, count);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="count"></param>
        partial void OnErrorGetRandom(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<decimal> count);

        /// <summary>
        ///  This property was deprecated in v1.116.0. This endpoint requires the &#x60;asset.read&#x60; permission.
        /// </summary>
        /// <param name="count"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRandomApiResponse"/>&gt;</returns>
        public async Task<IGetRandomApiResponse?> GetRandomOrDefaultAsync(Option<decimal> count = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetRandomAsync(count, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  This property was deprecated in v1.116.0. This endpoint requires the &#x60;asset.read&#x60; permission.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="count"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRandomApiResponse"/>&gt;</returns>
        public async Task<IGetRandomApiResponse> GetRandomAsync(Option<decimal> count = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetRandom(ref count);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/assets/random"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/assets/random");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (count.IsSet)
                        parseQueryStringLocalVar["count"] = ClientUtils.ParameterToString(count.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar3 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar3);

                    bearerTokenLocalVar3.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetRandomApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetRandomApiResponse>();
                        GetRandomApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/assets/random", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetRandomDefaultImplementation(apiResponseLocalVar, count);

                        Events.ExecuteOnGetRandom(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetRandomDefaultImplementation(e, "/assets/random", uriBuilderLocalVar.Path, count);
                Events.ExecuteOnErrorGetRandom(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetRandomApiResponse"/>
        /// </summary>
        public partial class GetRandomApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetRandomApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetRandomApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetRandomApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetRandomApiResponse(ILogger<GetRandomApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetRandomApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetRandomApiResponse(ILogger<GetRandomApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<AssetResponseDto>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<AssetResponseDto>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<AssetResponseDto>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPlayAssetVideo(ref Guid id, ref Option<string> key, ref Option<string> slug);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        /// <returns></returns>
        private void ValidatePlayAssetVideo(Option<string> key, Option<string> slug)
        {
            if (key.IsSet && key.Value == null)
                throw new ArgumentNullException(nameof(key));

            if (slug.IsSet && slug.Value == null)
                throw new ArgumentNullException(nameof(slug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        private void AfterPlayAssetVideoDefaultImplementation(IPlayAssetVideoApiResponse apiResponseLocalVar, Guid id, Option<string> key, Option<string> slug)
        {
            bool suppressDefaultLog = false;
            AfterPlayAssetVideo(ref suppressDefaultLog, apiResponseLocalVar, id, key, slug);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        partial void AfterPlayAssetVideo(ref bool suppressDefaultLog, IPlayAssetVideoApiResponse apiResponseLocalVar, Guid id, Option<string> key, Option<string> slug);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        private void OnErrorPlayAssetVideoDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<string> key, Option<string> slug)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPlayAssetVideo(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, key, slug);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        partial void OnErrorPlayAssetVideo(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<string> key, Option<string> slug);

        /// <summary>
        ///  This endpoint requires the &#x60;asset.view&#x60; permission.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPlayAssetVideoApiResponse"/>&gt;</returns>
        public async Task<IPlayAssetVideoApiResponse?> PlayAssetVideoOrDefaultAsync(Guid id, Option<string> key = default, Option<string> slug = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PlayAssetVideoAsync(id, key, slug, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  This endpoint requires the &#x60;asset.view&#x60; permission.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPlayAssetVideoApiResponse"/>&gt;</returns>
        public async Task<IPlayAssetVideoApiResponse> PlayAssetVideoAsync(Guid id, Option<string> key = default, Option<string> slug = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePlayAssetVideo(key, slug);

                FormatPlayAssetVideo(ref id, ref key, ref slug);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/assets/{id}/video/playback"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/assets/{id}/video/playback");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (key.IsSet)
                        parseQueryStringLocalVar["key"] = ClientUtils.ParameterToString(key.Value);

                    if (slug.IsSet)
                        parseQueryStringLocalVar["slug"] = ClientUtils.ParameterToString(slug.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar3 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar3);

                    bearerTokenLocalVar3.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/octet-stream"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<PlayAssetVideoApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PlayAssetVideoApiResponse>();
                        PlayAssetVideoApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            case (200):
                            {
                                byte[] responseBytesArrayLocalVar = await httpResponseMessageLocalVar.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false);
                                System.IO.Stream responseContentStreamLocalVar = new System.IO.MemoryStream(responseBytesArrayLocalVar);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentStreamLocalVar, "/assets/{id}/video/playback", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/assets/{id}/video/playback", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterPlayAssetVideoDefaultImplementation(apiResponseLocalVar, id, key, slug);

                        Events.ExecuteOnPlayAssetVideo(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPlayAssetVideoDefaultImplementation(e, "/assets/{id}/video/playback", uriBuilderLocalVar.Path, id, key, slug);
                Events.ExecuteOnErrorPlayAssetVideo(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PlayAssetVideoApiResponse"/>
        /// </summary>
        public partial class PlayAssetVideoApiResponse : Org.OpenAPITools.Client.ApiResponse, IPlayAssetVideoApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PlayAssetVideoApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PlayAssetVideoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PlayAssetVideoApiResponse(ILogger<PlayAssetVideoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="PlayAssetVideoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PlayAssetVideoApiResponse(ILogger<PlayAssetVideoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public System.IO.Stream? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? ContentStream
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out System.IO.Stream? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatReplaceAsset(ref Guid id, ref System.IO.Stream assetData, ref string deviceAssetId, ref string deviceId, ref DateTime fileCreatedAt, ref DateTime fileModifiedAt, ref Option<string> key, ref Option<string> slug, ref Option<string> duration, ref Option<string> filename);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="assetData"></param>
        /// <param name="deviceAssetId"></param>
        /// <param name="deviceId"></param>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        /// <param name="duration"></param>
        /// <param name="filename"></param>
        /// <returns></returns>
        private void ValidateReplaceAsset(System.IO.Stream assetData, string deviceAssetId, string deviceId, Option<string> key, Option<string> slug, Option<string> duration, Option<string> filename)
        {
            if (assetData == null)
                throw new ArgumentNullException(nameof(assetData));

            if (deviceAssetId == null)
                throw new ArgumentNullException(nameof(deviceAssetId));

            if (deviceId == null)
                throw new ArgumentNullException(nameof(deviceId));

            if (key.IsSet && key.Value == null)
                throw new ArgumentNullException(nameof(key));

            if (slug.IsSet && slug.Value == null)
                throw new ArgumentNullException(nameof(slug));

            if (duration.IsSet && duration.Value == null)
                throw new ArgumentNullException(nameof(duration));

            if (filename.IsSet && filename.Value == null)
                throw new ArgumentNullException(nameof(filename));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="assetData"></param>
        /// <param name="deviceAssetId"></param>
        /// <param name="deviceId"></param>
        /// <param name="fileCreatedAt"></param>
        /// <param name="fileModifiedAt"></param>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        /// <param name="duration"></param>
        /// <param name="filename"></param>
        private void AfterReplaceAssetDefaultImplementation(IReplaceAssetApiResponse apiResponseLocalVar, Guid id, System.IO.Stream assetData, string deviceAssetId, string deviceId, DateTime fileCreatedAt, DateTime fileModifiedAt, Option<string> key, Option<string> slug, Option<string> duration, Option<string> filename)
        {
            bool suppressDefaultLog = false;
            AfterReplaceAsset(ref suppressDefaultLog, apiResponseLocalVar, id, assetData, deviceAssetId, deviceId, fileCreatedAt, fileModifiedAt, key, slug, duration, filename);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="assetData"></param>
        /// <param name="deviceAssetId"></param>
        /// <param name="deviceId"></param>
        /// <param name="fileCreatedAt"></param>
        /// <param name="fileModifiedAt"></param>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        /// <param name="duration"></param>
        /// <param name="filename"></param>
        partial void AfterReplaceAsset(ref bool suppressDefaultLog, IReplaceAssetApiResponse apiResponseLocalVar, Guid id, System.IO.Stream assetData, string deviceAssetId, string deviceId, DateTime fileCreatedAt, DateTime fileModifiedAt, Option<string> key, Option<string> slug, Option<string> duration, Option<string> filename);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="assetData"></param>
        /// <param name="deviceAssetId"></param>
        /// <param name="deviceId"></param>
        /// <param name="fileCreatedAt"></param>
        /// <param name="fileModifiedAt"></param>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        /// <param name="duration"></param>
        /// <param name="filename"></param>
        private void OnErrorReplaceAssetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, System.IO.Stream assetData, string deviceAssetId, string deviceId, DateTime fileCreatedAt, DateTime fileModifiedAt, Option<string> key, Option<string> slug, Option<string> duration, Option<string> filename)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorReplaceAsset(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, assetData, deviceAssetId, deviceId, fileCreatedAt, fileModifiedAt, key, slug, duration, filename);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="assetData"></param>
        /// <param name="deviceAssetId"></param>
        /// <param name="deviceId"></param>
        /// <param name="fileCreatedAt"></param>
        /// <param name="fileModifiedAt"></param>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        /// <param name="duration"></param>
        /// <param name="filename"></param>
        partial void OnErrorReplaceAsset(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, System.IO.Stream assetData, string deviceAssetId, string deviceId, DateTime fileCreatedAt, DateTime fileModifiedAt, Option<string> key, Option<string> slug, Option<string> duration, Option<string> filename);

        /// <summary>
        /// Replace the asset with new file, without changing its id This property was deprecated in v1.142.0. Replace the asset with new file, without changing its id. This endpoint requires the &#x60;asset.replace&#x60; permission.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="assetData"></param>
        /// <param name="deviceAssetId"></param>
        /// <param name="deviceId"></param>
        /// <param name="fileCreatedAt"></param>
        /// <param name="fileModifiedAt"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="duration"> (optional)</param>
        /// <param name="filename"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReplaceAssetApiResponse"/>&gt;</returns>
        public async Task<IReplaceAssetApiResponse?> ReplaceAssetOrDefaultAsync(Guid id, System.IO.Stream assetData, string deviceAssetId, string deviceId, DateTime fileCreatedAt, DateTime fileModifiedAt, Option<string> key = default, Option<string> slug = default, Option<string> duration = default, Option<string> filename = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ReplaceAssetAsync(id, assetData, deviceAssetId, deviceId, fileCreatedAt, fileModifiedAt, key, slug, duration, filename, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Replace the asset with new file, without changing its id This property was deprecated in v1.142.0. Replace the asset with new file, without changing its id. This endpoint requires the &#x60;asset.replace&#x60; permission.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="assetData"></param>
        /// <param name="deviceAssetId"></param>
        /// <param name="deviceId"></param>
        /// <param name="fileCreatedAt"></param>
        /// <param name="fileModifiedAt"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="duration"> (optional)</param>
        /// <param name="filename"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReplaceAssetApiResponse"/>&gt;</returns>
        public async Task<IReplaceAssetApiResponse> ReplaceAssetAsync(Guid id, System.IO.Stream assetData, string deviceAssetId, string deviceId, DateTime fileCreatedAt, DateTime fileModifiedAt, Option<string> key = default, Option<string> slug = default, Option<string> duration = default, Option<string> filename = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateReplaceAsset(assetData, deviceAssetId, deviceId, key, slug, duration, filename);

                FormatReplaceAsset(ref id, ref assetData, ref deviceAssetId, ref deviceId, ref fileCreatedAt, ref fileModifiedAt, ref key, ref slug, ref duration, ref filename);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/assets/{id}/original"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/assets/{id}/original");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (key.IsSet)
                        parseQueryStringLocalVar["key"] = ClientUtils.ParameterToString(key.Value);

                    if (slug.IsSet)
                        parseQueryStringLocalVar["slug"] = ClientUtils.ParameterToString(slug.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));                    multipartContentLocalVar.Add(new StreamContent(assetData));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("deviceAssetId", ClientUtils.ParameterToString(deviceAssetId)));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("deviceId", ClientUtils.ParameterToString(deviceId)));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("fileCreatedAt", ClientUtils.ParameterToString(fileCreatedAt)));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("fileModifiedAt", ClientUtils.ParameterToString(fileModifiedAt)));

                    if (duration.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("duration", ClientUtils.ParameterToString(duration.Value)));

                    if (filename.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("filename", ClientUtils.ParameterToString(filename.Value)));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar3 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar3);

                    bearerTokenLocalVar3.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "multipart/form-data"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ReplaceAssetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ReplaceAssetApiResponse>();
                        ReplaceAssetApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/assets/{id}/original", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterReplaceAssetDefaultImplementation(apiResponseLocalVar, id, assetData, deviceAssetId, deviceId, fileCreatedAt, fileModifiedAt, key, slug, duration, filename);

                        Events.ExecuteOnReplaceAsset(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorReplaceAssetDefaultImplementation(e, "/assets/{id}/original", uriBuilderLocalVar.Path, id, assetData, deviceAssetId, deviceId, fileCreatedAt, fileModifiedAt, key, slug, duration, filename);
                Events.ExecuteOnErrorReplaceAsset(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ReplaceAssetApiResponse"/>
        /// </summary>
        public partial class ReplaceAssetApiResponse : Org.OpenAPITools.Client.ApiResponse, IReplaceAssetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ReplaceAssetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ReplaceAssetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ReplaceAssetApiResponse(ILogger<ReplaceAssetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ReplaceAssetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ReplaceAssetApiResponse(ILogger<ReplaceAssetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AssetMediaResponseDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AssetMediaResponseDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.AssetMediaResponseDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatRunAssetJobs(AssetJobsDto assetJobsDto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="assetJobsDto"></param>
        /// <returns></returns>
        private void ValidateRunAssetJobs(AssetJobsDto assetJobsDto)
        {
            if (assetJobsDto == null)
                throw new ArgumentNullException(nameof(assetJobsDto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="assetJobsDto"></param>
        private void AfterRunAssetJobsDefaultImplementation(IRunAssetJobsApiResponse apiResponseLocalVar, AssetJobsDto assetJobsDto)
        {
            bool suppressDefaultLog = false;
            AfterRunAssetJobs(ref suppressDefaultLog, apiResponseLocalVar, assetJobsDto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="assetJobsDto"></param>
        partial void AfterRunAssetJobs(ref bool suppressDefaultLog, IRunAssetJobsApiResponse apiResponseLocalVar, AssetJobsDto assetJobsDto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="assetJobsDto"></param>
        private void OnErrorRunAssetJobsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AssetJobsDto assetJobsDto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorRunAssetJobs(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, assetJobsDto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="assetJobsDto"></param>
        partial void OnErrorRunAssetJobs(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AssetJobsDto assetJobsDto);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="assetJobsDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRunAssetJobsApiResponse"/>&gt;</returns>
        public async Task<IRunAssetJobsApiResponse?> RunAssetJobsOrDefaultAsync(AssetJobsDto assetJobsDto, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RunAssetJobsAsync(assetJobsDto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetJobsDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRunAssetJobsApiResponse"/>&gt;</returns>
        public async Task<IRunAssetJobsApiResponse> RunAssetJobsAsync(AssetJobsDto assetJobsDto, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateRunAssetJobs(assetJobsDto);

                FormatRunAssetJobs(assetJobsDto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/assets/jobs"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/assets/jobs");

                    httpRequestMessageLocalVar.Content = (assetJobsDto as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(assetJobsDto, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar3 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar3);

                    bearerTokenLocalVar3.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<RunAssetJobsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<RunAssetJobsApiResponse>();
                        RunAssetJobsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/assets/jobs", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterRunAssetJobsDefaultImplementation(apiResponseLocalVar, assetJobsDto);

                        Events.ExecuteOnRunAssetJobs(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRunAssetJobsDefaultImplementation(e, "/assets/jobs", uriBuilderLocalVar.Path, assetJobsDto);
                Events.ExecuteOnErrorRunAssetJobs(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="RunAssetJobsApiResponse"/>
        /// </summary>
        public partial class RunAssetJobsApiResponse : Org.OpenAPITools.Client.ApiResponse, IRunAssetJobsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<RunAssetJobsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="RunAssetJobsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RunAssetJobsApiResponse(ILogger<RunAssetJobsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="RunAssetJobsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RunAssetJobsApiResponse(ILogger<RunAssetJobsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateAsset(ref Guid id, UpdateAssetDto updateAssetDto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="updateAssetDto"></param>
        /// <returns></returns>
        private void ValidateUpdateAsset(UpdateAssetDto updateAssetDto)
        {
            if (updateAssetDto == null)
                throw new ArgumentNullException(nameof(updateAssetDto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="updateAssetDto"></param>
        private void AfterUpdateAssetDefaultImplementation(IUpdateAssetApiResponse apiResponseLocalVar, Guid id, UpdateAssetDto updateAssetDto)
        {
            bool suppressDefaultLog = false;
            AfterUpdateAsset(ref suppressDefaultLog, apiResponseLocalVar, id, updateAssetDto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="updateAssetDto"></param>
        partial void AfterUpdateAsset(ref bool suppressDefaultLog, IUpdateAssetApiResponse apiResponseLocalVar, Guid id, UpdateAssetDto updateAssetDto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="updateAssetDto"></param>
        private void OnErrorUpdateAssetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, UpdateAssetDto updateAssetDto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateAsset(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, updateAssetDto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="updateAssetDto"></param>
        partial void OnErrorUpdateAsset(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, UpdateAssetDto updateAssetDto);

        /// <summary>
        ///  This endpoint requires the &#x60;asset.update&#x60; permission.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="updateAssetDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateAssetApiResponse"/>&gt;</returns>
        public async Task<IUpdateAssetApiResponse?> UpdateAssetOrDefaultAsync(Guid id, UpdateAssetDto updateAssetDto, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateAssetAsync(id, updateAssetDto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  This endpoint requires the &#x60;asset.update&#x60; permission.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateAssetDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateAssetApiResponse"/>&gt;</returns>
        public async Task<IUpdateAssetApiResponse> UpdateAssetAsync(Guid id, UpdateAssetDto updateAssetDto, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateAsset(updateAssetDto);

                FormatUpdateAsset(ref id, updateAssetDto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/assets/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/assets/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (updateAssetDto as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(updateAssetDto, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar3 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar3);

                    bearerTokenLocalVar3.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<UpdateAssetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateAssetApiResponse>();
                        UpdateAssetApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/assets/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterUpdateAssetDefaultImplementation(apiResponseLocalVar, id, updateAssetDto);

                        Events.ExecuteOnUpdateAsset(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateAssetDefaultImplementation(e, "/assets/{id}", uriBuilderLocalVar.Path, id, updateAssetDto);
                Events.ExecuteOnErrorUpdateAsset(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateAssetApiResponse"/>
        /// </summary>
        public partial class UpdateAssetApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateAssetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateAssetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateAssetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateAssetApiResponse(ILogger<UpdateAssetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="UpdateAssetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateAssetApiResponse(ILogger<UpdateAssetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AssetResponseDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AssetResponseDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.AssetResponseDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateAssetMetadata(ref Guid id, AssetMetadataUpsertDto assetMetadataUpsertDto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="assetMetadataUpsertDto"></param>
        /// <returns></returns>
        private void ValidateUpdateAssetMetadata(AssetMetadataUpsertDto assetMetadataUpsertDto)
        {
            if (assetMetadataUpsertDto == null)
                throw new ArgumentNullException(nameof(assetMetadataUpsertDto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="assetMetadataUpsertDto"></param>
        private void AfterUpdateAssetMetadataDefaultImplementation(IUpdateAssetMetadataApiResponse apiResponseLocalVar, Guid id, AssetMetadataUpsertDto assetMetadataUpsertDto)
        {
            bool suppressDefaultLog = false;
            AfterUpdateAssetMetadata(ref suppressDefaultLog, apiResponseLocalVar, id, assetMetadataUpsertDto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="assetMetadataUpsertDto"></param>
        partial void AfterUpdateAssetMetadata(ref bool suppressDefaultLog, IUpdateAssetMetadataApiResponse apiResponseLocalVar, Guid id, AssetMetadataUpsertDto assetMetadataUpsertDto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="assetMetadataUpsertDto"></param>
        private void OnErrorUpdateAssetMetadataDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, AssetMetadataUpsertDto assetMetadataUpsertDto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateAssetMetadata(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, assetMetadataUpsertDto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="assetMetadataUpsertDto"></param>
        partial void OnErrorUpdateAssetMetadata(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, AssetMetadataUpsertDto assetMetadataUpsertDto);

        /// <summary>
        ///  This endpoint requires the &#x60;asset.update&#x60; permission.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="assetMetadataUpsertDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateAssetMetadataApiResponse"/>&gt;</returns>
        public async Task<IUpdateAssetMetadataApiResponse?> UpdateAssetMetadataOrDefaultAsync(Guid id, AssetMetadataUpsertDto assetMetadataUpsertDto, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateAssetMetadataAsync(id, assetMetadataUpsertDto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  This endpoint requires the &#x60;asset.update&#x60; permission.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="assetMetadataUpsertDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateAssetMetadataApiResponse"/>&gt;</returns>
        public async Task<IUpdateAssetMetadataApiResponse> UpdateAssetMetadataAsync(Guid id, AssetMetadataUpsertDto assetMetadataUpsertDto, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateAssetMetadata(assetMetadataUpsertDto);

                FormatUpdateAssetMetadata(ref id, assetMetadataUpsertDto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/assets/{id}/metadata"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/assets/{id}/metadata");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (assetMetadataUpsertDto as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(assetMetadataUpsertDto, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar3 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar3);

                    bearerTokenLocalVar3.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<UpdateAssetMetadataApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateAssetMetadataApiResponse>();
                        UpdateAssetMetadataApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/assets/{id}/metadata", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterUpdateAssetMetadataDefaultImplementation(apiResponseLocalVar, id, assetMetadataUpsertDto);

                        Events.ExecuteOnUpdateAssetMetadata(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateAssetMetadataDefaultImplementation(e, "/assets/{id}/metadata", uriBuilderLocalVar.Path, id, assetMetadataUpsertDto);
                Events.ExecuteOnErrorUpdateAssetMetadata(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateAssetMetadataApiResponse"/>
        /// </summary>
        public partial class UpdateAssetMetadataApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateAssetMetadataApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateAssetMetadataApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateAssetMetadataApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateAssetMetadataApiResponse(ILogger<UpdateAssetMetadataApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="UpdateAssetMetadataApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateAssetMetadataApiResponse(ILogger<UpdateAssetMetadataApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<AssetMetadataResponseDto>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<AssetMetadataResponseDto>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<AssetMetadataResponseDto>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateAssets(AssetBulkUpdateDto assetBulkUpdateDto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="assetBulkUpdateDto"></param>
        /// <returns></returns>
        private void ValidateUpdateAssets(AssetBulkUpdateDto assetBulkUpdateDto)
        {
            if (assetBulkUpdateDto == null)
                throw new ArgumentNullException(nameof(assetBulkUpdateDto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="assetBulkUpdateDto"></param>
        private void AfterUpdateAssetsDefaultImplementation(IUpdateAssetsApiResponse apiResponseLocalVar, AssetBulkUpdateDto assetBulkUpdateDto)
        {
            bool suppressDefaultLog = false;
            AfterUpdateAssets(ref suppressDefaultLog, apiResponseLocalVar, assetBulkUpdateDto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="assetBulkUpdateDto"></param>
        partial void AfterUpdateAssets(ref bool suppressDefaultLog, IUpdateAssetsApiResponse apiResponseLocalVar, AssetBulkUpdateDto assetBulkUpdateDto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="assetBulkUpdateDto"></param>
        private void OnErrorUpdateAssetsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AssetBulkUpdateDto assetBulkUpdateDto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateAssets(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, assetBulkUpdateDto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="assetBulkUpdateDto"></param>
        partial void OnErrorUpdateAssets(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AssetBulkUpdateDto assetBulkUpdateDto);

        /// <summary>
        ///  This endpoint requires the &#x60;asset.update&#x60; permission.
        /// </summary>
        /// <param name="assetBulkUpdateDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateAssetsApiResponse"/>&gt;</returns>
        public async Task<IUpdateAssetsApiResponse?> UpdateAssetsOrDefaultAsync(AssetBulkUpdateDto assetBulkUpdateDto, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateAssetsAsync(assetBulkUpdateDto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  This endpoint requires the &#x60;asset.update&#x60; permission.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetBulkUpdateDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateAssetsApiResponse"/>&gt;</returns>
        public async Task<IUpdateAssetsApiResponse> UpdateAssetsAsync(AssetBulkUpdateDto assetBulkUpdateDto, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateAssets(assetBulkUpdateDto);

                FormatUpdateAssets(assetBulkUpdateDto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/assets"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/assets");

                    httpRequestMessageLocalVar.Content = (assetBulkUpdateDto as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(assetBulkUpdateDto, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar3 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar3);

                    bearerTokenLocalVar3.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<UpdateAssetsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateAssetsApiResponse>();
                        UpdateAssetsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/assets", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterUpdateAssetsDefaultImplementation(apiResponseLocalVar, assetBulkUpdateDto);

                        Events.ExecuteOnUpdateAssets(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateAssetsDefaultImplementation(e, "/assets", uriBuilderLocalVar.Path, assetBulkUpdateDto);
                Events.ExecuteOnErrorUpdateAssets(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateAssetsApiResponse"/>
        /// </summary>
        public partial class UpdateAssetsApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateAssetsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateAssetsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateAssetsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateAssetsApiResponse(ILogger<UpdateAssetsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="UpdateAssetsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateAssetsApiResponse(ILogger<UpdateAssetsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUploadAsset(ref System.IO.Stream assetData, ref string deviceAssetId, ref string deviceId, ref DateTime fileCreatedAt, ref DateTime fileModifiedAt, List<AssetMetadataUpsertItemDto> metadata, ref Option<string> key, ref Option<string> slug, ref Option<string> xImmichChecksum, ref Option<string> duration, ref Option<string> filename, ref Option<bool> isFavorite, ref Option<Guid> livePhotoVideoId, ref Option<System.IO.Stream> sidecarData, ref Option<AssetVisibility> visibility);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="assetData"></param>
        /// <param name="deviceAssetId"></param>
        /// <param name="deviceId"></param>
        /// <param name="metadata"></param>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        /// <param name="xImmichChecksum"></param>
        /// <param name="duration"></param>
        /// <param name="filename"></param>
        /// <param name="sidecarData"></param>
        /// <returns></returns>
        private void ValidateUploadAsset(System.IO.Stream assetData, string deviceAssetId, string deviceId, List<AssetMetadataUpsertItemDto> metadata, Option<string> key, Option<string> slug, Option<string> xImmichChecksum, Option<string> duration, Option<string> filename, Option<System.IO.Stream> sidecarData)
        {
            if (assetData == null)
                throw new ArgumentNullException(nameof(assetData));

            if (deviceAssetId == null)
                throw new ArgumentNullException(nameof(deviceAssetId));

            if (deviceId == null)
                throw new ArgumentNullException(nameof(deviceId));

            if (metadata == null)
                throw new ArgumentNullException(nameof(metadata));

            if (key.IsSet && key.Value == null)
                throw new ArgumentNullException(nameof(key));

            if (slug.IsSet && slug.Value == null)
                throw new ArgumentNullException(nameof(slug));

            if (xImmichChecksum.IsSet && xImmichChecksum.Value == null)
                throw new ArgumentNullException(nameof(xImmichChecksum));

            if (duration.IsSet && duration.Value == null)
                throw new ArgumentNullException(nameof(duration));

            if (filename.IsSet && filename.Value == null)
                throw new ArgumentNullException(nameof(filename));

            if (sidecarData.IsSet && sidecarData.Value == null)
                throw new ArgumentNullException(nameof(sidecarData));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="assetData"></param>
        /// <param name="deviceAssetId"></param>
        /// <param name="deviceId"></param>
        /// <param name="fileCreatedAt"></param>
        /// <param name="fileModifiedAt"></param>
        /// <param name="metadata"></param>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        /// <param name="xImmichChecksum"></param>
        /// <param name="duration"></param>
        /// <param name="filename"></param>
        /// <param name="isFavorite"></param>
        /// <param name="livePhotoVideoId"></param>
        /// <param name="sidecarData"></param>
        /// <param name="visibility"></param>
        private void AfterUploadAssetDefaultImplementation(IUploadAssetApiResponse apiResponseLocalVar, System.IO.Stream assetData, string deviceAssetId, string deviceId, DateTime fileCreatedAt, DateTime fileModifiedAt, List<AssetMetadataUpsertItemDto> metadata, Option<string> key, Option<string> slug, Option<string> xImmichChecksum, Option<string> duration, Option<string> filename, Option<bool> isFavorite, Option<Guid> livePhotoVideoId, Option<System.IO.Stream> sidecarData, Option<AssetVisibility> visibility)
        {
            bool suppressDefaultLog = false;
            AfterUploadAsset(ref suppressDefaultLog, apiResponseLocalVar, assetData, deviceAssetId, deviceId, fileCreatedAt, fileModifiedAt, metadata, key, slug, xImmichChecksum, duration, filename, isFavorite, livePhotoVideoId, sidecarData, visibility);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="assetData"></param>
        /// <param name="deviceAssetId"></param>
        /// <param name="deviceId"></param>
        /// <param name="fileCreatedAt"></param>
        /// <param name="fileModifiedAt"></param>
        /// <param name="metadata"></param>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        /// <param name="xImmichChecksum"></param>
        /// <param name="duration"></param>
        /// <param name="filename"></param>
        /// <param name="isFavorite"></param>
        /// <param name="livePhotoVideoId"></param>
        /// <param name="sidecarData"></param>
        /// <param name="visibility"></param>
        partial void AfterUploadAsset(ref bool suppressDefaultLog, IUploadAssetApiResponse apiResponseLocalVar, System.IO.Stream assetData, string deviceAssetId, string deviceId, DateTime fileCreatedAt, DateTime fileModifiedAt, List<AssetMetadataUpsertItemDto> metadata, Option<string> key, Option<string> slug, Option<string> xImmichChecksum, Option<string> duration, Option<string> filename, Option<bool> isFavorite, Option<Guid> livePhotoVideoId, Option<System.IO.Stream> sidecarData, Option<AssetVisibility> visibility);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="assetData"></param>
        /// <param name="deviceAssetId"></param>
        /// <param name="deviceId"></param>
        /// <param name="fileCreatedAt"></param>
        /// <param name="fileModifiedAt"></param>
        /// <param name="metadata"></param>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        /// <param name="xImmichChecksum"></param>
        /// <param name="duration"></param>
        /// <param name="filename"></param>
        /// <param name="isFavorite"></param>
        /// <param name="livePhotoVideoId"></param>
        /// <param name="sidecarData"></param>
        /// <param name="visibility"></param>
        private void OnErrorUploadAssetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, System.IO.Stream assetData, string deviceAssetId, string deviceId, DateTime fileCreatedAt, DateTime fileModifiedAt, List<AssetMetadataUpsertItemDto> metadata, Option<string> key, Option<string> slug, Option<string> xImmichChecksum, Option<string> duration, Option<string> filename, Option<bool> isFavorite, Option<Guid> livePhotoVideoId, Option<System.IO.Stream> sidecarData, Option<AssetVisibility> visibility)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUploadAsset(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, assetData, deviceAssetId, deviceId, fileCreatedAt, fileModifiedAt, metadata, key, slug, xImmichChecksum, duration, filename, isFavorite, livePhotoVideoId, sidecarData, visibility);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="assetData"></param>
        /// <param name="deviceAssetId"></param>
        /// <param name="deviceId"></param>
        /// <param name="fileCreatedAt"></param>
        /// <param name="fileModifiedAt"></param>
        /// <param name="metadata"></param>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        /// <param name="xImmichChecksum"></param>
        /// <param name="duration"></param>
        /// <param name="filename"></param>
        /// <param name="isFavorite"></param>
        /// <param name="livePhotoVideoId"></param>
        /// <param name="sidecarData"></param>
        /// <param name="visibility"></param>
        partial void OnErrorUploadAsset(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, System.IO.Stream assetData, string deviceAssetId, string deviceId, DateTime fileCreatedAt, DateTime fileModifiedAt, List<AssetMetadataUpsertItemDto> metadata, Option<string> key, Option<string> slug, Option<string> xImmichChecksum, Option<string> duration, Option<string> filename, Option<bool> isFavorite, Option<Guid> livePhotoVideoId, Option<System.IO.Stream> sidecarData, Option<AssetVisibility> visibility);

        /// <summary>
        ///  This endpoint requires the &#x60;asset.upload&#x60; permission.
        /// </summary>
        /// <param name="assetData"></param>
        /// <param name="deviceAssetId"></param>
        /// <param name="deviceId"></param>
        /// <param name="fileCreatedAt"></param>
        /// <param name="fileModifiedAt"></param>
        /// <param name="metadata"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="xImmichChecksum">sha1 checksum that can be used for duplicate detection before the file is uploaded (optional)</param>
        /// <param name="duration"> (optional)</param>
        /// <param name="filename"> (optional)</param>
        /// <param name="isFavorite"> (optional)</param>
        /// <param name="livePhotoVideoId"> (optional)</param>
        /// <param name="sidecarData"> (optional)</param>
        /// <param name="visibility"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadAssetApiResponse"/>&gt;</returns>
        public async Task<IUploadAssetApiResponse?> UploadAssetOrDefaultAsync(System.IO.Stream assetData, string deviceAssetId, string deviceId, DateTime fileCreatedAt, DateTime fileModifiedAt, List<AssetMetadataUpsertItemDto> metadata, Option<string> key = default, Option<string> slug = default, Option<string> xImmichChecksum = default, Option<string> duration = default, Option<string> filename = default, Option<bool> isFavorite = default, Option<Guid> livePhotoVideoId = default, Option<System.IO.Stream> sidecarData = default, Option<AssetVisibility> visibility = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UploadAssetAsync(assetData, deviceAssetId, deviceId, fileCreatedAt, fileModifiedAt, metadata, key, slug, xImmichChecksum, duration, filename, isFavorite, livePhotoVideoId, sidecarData, visibility, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  This endpoint requires the &#x60;asset.upload&#x60; permission.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetData"></param>
        /// <param name="deviceAssetId"></param>
        /// <param name="deviceId"></param>
        /// <param name="fileCreatedAt"></param>
        /// <param name="fileModifiedAt"></param>
        /// <param name="metadata"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="xImmichChecksum">sha1 checksum that can be used for duplicate detection before the file is uploaded (optional)</param>
        /// <param name="duration"> (optional)</param>
        /// <param name="filename"> (optional)</param>
        /// <param name="isFavorite"> (optional)</param>
        /// <param name="livePhotoVideoId"> (optional)</param>
        /// <param name="sidecarData"> (optional)</param>
        /// <param name="visibility"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadAssetApiResponse"/>&gt;</returns>
        public async Task<IUploadAssetApiResponse> UploadAssetAsync(System.IO.Stream assetData, string deviceAssetId, string deviceId, DateTime fileCreatedAt, DateTime fileModifiedAt, List<AssetMetadataUpsertItemDto> metadata, Option<string> key = default, Option<string> slug = default, Option<string> xImmichChecksum = default, Option<string> duration = default, Option<string> filename = default, Option<bool> isFavorite = default, Option<Guid> livePhotoVideoId = default, Option<System.IO.Stream> sidecarData = default, Option<AssetVisibility> visibility = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUploadAsset(assetData, deviceAssetId, deviceId, metadata, key, slug, xImmichChecksum, duration, filename, sidecarData);

                FormatUploadAsset(ref assetData, ref deviceAssetId, ref deviceId, ref fileCreatedAt, ref fileModifiedAt, metadata, ref key, ref slug, ref xImmichChecksum, ref duration, ref filename, ref isFavorite, ref livePhotoVideoId, ref sidecarData, ref visibility);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/assets"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/assets");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (key.IsSet)
                        parseQueryStringLocalVar["key"] = ClientUtils.ParameterToString(key.Value);

                    if (slug.IsSet)
                        parseQueryStringLocalVar["slug"] = ClientUtils.ParameterToString(slug.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (xImmichChecksum.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("x-immich-checksum", ClientUtils.ParameterToString(xImmichChecksum.Value));

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));                    multipartContentLocalVar.Add(new StreamContent(assetData));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("deviceAssetId", ClientUtils.ParameterToString(deviceAssetId)));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("deviceId", ClientUtils.ParameterToString(deviceId)));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("fileCreatedAt", ClientUtils.ParameterToString(fileCreatedAt)));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("fileModifiedAt", ClientUtils.ParameterToString(fileModifiedAt)));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("metadata", ClientUtils.ParameterToString(metadata)));

                    if (duration.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("duration", ClientUtils.ParameterToString(duration.Value)));

                    if (filename.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("filename", ClientUtils.ParameterToString(filename.Value)));

                    if (isFavorite.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("isFavorite", ClientUtils.ParameterToString(isFavorite.Value)));

                    if (livePhotoVideoId.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("livePhotoVideoId", ClientUtils.ParameterToString(livePhotoVideoId.Value)));

                    if (sidecarData.IsSet)
                        multipartContentLocalVar.Add(new StreamContent(sidecarData.Value));

                    if (visibility.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("visibility", ClientUtils.ParameterToString(visibility.Value)));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar3 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar3);

                    bearerTokenLocalVar3.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "multipart/form-data"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<UploadAssetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UploadAssetApiResponse>();
                        UploadAssetApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/assets", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterUploadAssetDefaultImplementation(apiResponseLocalVar, assetData, deviceAssetId, deviceId, fileCreatedAt, fileModifiedAt, metadata, key, slug, xImmichChecksum, duration, filename, isFavorite, livePhotoVideoId, sidecarData, visibility);

                        Events.ExecuteOnUploadAsset(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUploadAssetDefaultImplementation(e, "/assets", uriBuilderLocalVar.Path, assetData, deviceAssetId, deviceId, fileCreatedAt, fileModifiedAt, metadata, key, slug, xImmichChecksum, duration, filename, isFavorite, livePhotoVideoId, sidecarData, visibility);
                Events.ExecuteOnErrorUploadAsset(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UploadAssetApiResponse"/>
        /// </summary>
        public partial class UploadAssetApiResponse : Org.OpenAPITools.Client.ApiResponse, IUploadAssetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UploadAssetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UploadAssetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UploadAssetApiResponse(ILogger<UploadAssetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="UploadAssetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UploadAssetApiResponse(ILogger<UploadAssetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AssetMediaResponseDto? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AssetMediaResponseDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out Org.OpenAPITools.Model.AssetMediaResponseDto? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatViewAsset(ref Guid id, ref Option<string> key, ref Option<AssetMediaSize> size, ref Option<string> slug);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        /// <returns></returns>
        private void ValidateViewAsset(Option<string> key, Option<string> slug)
        {
            if (key.IsSet && key.Value == null)
                throw new ArgumentNullException(nameof(key));

            if (slug.IsSet && slug.Value == null)
                throw new ArgumentNullException(nameof(slug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="key"></param>
        /// <param name="size"></param>
        /// <param name="slug"></param>
        private void AfterViewAssetDefaultImplementation(IViewAssetApiResponse apiResponseLocalVar, Guid id, Option<string> key, Option<AssetMediaSize> size, Option<string> slug)
        {
            bool suppressDefaultLog = false;
            AfterViewAsset(ref suppressDefaultLog, apiResponseLocalVar, id, key, size, slug);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="key"></param>
        /// <param name="size"></param>
        /// <param name="slug"></param>
        partial void AfterViewAsset(ref bool suppressDefaultLog, IViewAssetApiResponse apiResponseLocalVar, Guid id, Option<string> key, Option<AssetMediaSize> size, Option<string> slug);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="key"></param>
        /// <param name="size"></param>
        /// <param name="slug"></param>
        private void OnErrorViewAssetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<string> key, Option<AssetMediaSize> size, Option<string> slug)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorViewAsset(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, key, size, slug);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="key"></param>
        /// <param name="size"></param>
        /// <param name="slug"></param>
        partial void OnErrorViewAsset(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<string> key, Option<AssetMediaSize> size, Option<string> slug);

        /// <summary>
        ///  This endpoint requires the &#x60;asset.view&#x60; permission.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IViewAssetApiResponse"/>&gt;</returns>
        public async Task<IViewAssetApiResponse?> ViewAssetOrDefaultAsync(Guid id, Option<string> key = default, Option<AssetMediaSize> size = default, Option<string> slug = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ViewAssetAsync(id, key, size, slug, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  This endpoint requires the &#x60;asset.view&#x60; permission.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IViewAssetApiResponse"/>&gt;</returns>
        public async Task<IViewAssetApiResponse> ViewAssetAsync(Guid id, Option<string> key = default, Option<AssetMediaSize> size = default, Option<string> slug = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateViewAsset(key, slug);

                FormatViewAsset(ref id, ref key, ref size, ref slug);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/assets/{id}/thumbnail"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/assets/{id}/thumbnail");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (key.IsSet)
                        parseQueryStringLocalVar["key"] = ClientUtils.ParameterToString(key.Value);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    if (slug.IsSet)
                        parseQueryStringLocalVar["slug"] = ClientUtils.ParameterToString(slug.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar3 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar3);

                    bearerTokenLocalVar3.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/octet-stream"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ViewAssetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ViewAssetApiResponse>();
                        ViewAssetApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            case (200):
                            {
                                byte[] responseBytesArrayLocalVar = await httpResponseMessageLocalVar.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false);
                                System.IO.Stream responseContentStreamLocalVar = new System.IO.MemoryStream(responseBytesArrayLocalVar);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentStreamLocalVar, "/assets/{id}/thumbnail", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/assets/{id}/thumbnail", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterViewAssetDefaultImplementation(apiResponseLocalVar, id, key, size, slug);

                        Events.ExecuteOnViewAsset(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorViewAssetDefaultImplementation(e, "/assets/{id}/thumbnail", uriBuilderLocalVar.Path, id, key, size, slug);
                Events.ExecuteOnErrorViewAsset(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ViewAssetApiResponse"/>
        /// </summary>
        public partial class ViewAssetApiResponse : Org.OpenAPITools.Client.ApiResponse, IViewAssetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ViewAssetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ViewAssetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ViewAssetApiResponse(ILogger<ViewAssetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ViewAssetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ViewAssetApiResponse(ILogger<ViewAssetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public System.IO.Stream? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? ContentStream
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out System.IO.Stream? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
