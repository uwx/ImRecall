// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ITimelineApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        TimelineApiEvents Events { get; }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint requires the &#x60;asset.read&#x60; permission.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeBucket">Time bucket identifier in YYYY-MM-DD format (e.g., \&quot;2024-01-01\&quot; for January 2024)</param>
        /// <param name="albumId">Filter assets belonging to a specific album (optional)</param>
        /// <param name="isFavorite">Filter by favorite status (true for favorites only, false for non-favorites only) (optional)</param>
        /// <param name="isTrashed">Filter by trash status (true for trashed assets only, false for non-trashed only) (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <param name="order">Sort order for assets within time buckets (ASC for oldest first, DESC for newest first) (optional)</param>
        /// <param name="personId">Filter assets containing a specific person (face recognition) (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="tagId">Filter assets with a specific tag (optional)</param>
        /// <param name="userId">Filter assets by specific user ID (optional)</param>
        /// <param name="visibility">Filter by asset visibility status (ARCHIVE, TIMELINE, HIDDEN, LOCKED) (optional)</param>
        /// <param name="withCoordinates">Include location data in the response (optional)</param>
        /// <param name="withPartners">Include assets shared by partners (optional)</param>
        /// <param name="withStacked">Include stacked assets in the response. When true, only primary assets from stacks are returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTimeBucketApiResponse"/>&gt;</returns>
        Task<IGetTimeBucketApiResponse> GetTimeBucketAsync(string timeBucket, Option<Guid> albumId = default, Option<bool> isFavorite = default, Option<bool> isTrashed = default, Option<string> key = default, Option<AssetOrder> order = default, Option<Guid> personId = default, Option<string> slug = default, Option<Guid> tagId = default, Option<Guid> userId = default, Option<AssetVisibility> visibility = default, Option<bool> withCoordinates = default, Option<bool> withPartners = default, Option<bool> withStacked = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint requires the &#x60;asset.read&#x60; permission.
        /// </remarks>
        /// <param name="timeBucket">Time bucket identifier in YYYY-MM-DD format (e.g., \&quot;2024-01-01\&quot; for January 2024)</param>
        /// <param name="albumId">Filter assets belonging to a specific album (optional)</param>
        /// <param name="isFavorite">Filter by favorite status (true for favorites only, false for non-favorites only) (optional)</param>
        /// <param name="isTrashed">Filter by trash status (true for trashed assets only, false for non-trashed only) (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <param name="order">Sort order for assets within time buckets (ASC for oldest first, DESC for newest first) (optional)</param>
        /// <param name="personId">Filter assets containing a specific person (face recognition) (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="tagId">Filter assets with a specific tag (optional)</param>
        /// <param name="userId">Filter assets by specific user ID (optional)</param>
        /// <param name="visibility">Filter by asset visibility status (ARCHIVE, TIMELINE, HIDDEN, LOCKED) (optional)</param>
        /// <param name="withCoordinates">Include location data in the response (optional)</param>
        /// <param name="withPartners">Include assets shared by partners (optional)</param>
        /// <param name="withStacked">Include stacked assets in the response. When true, only primary assets from stacks are returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTimeBucketApiResponse"/>?&gt;</returns>
        Task<IGetTimeBucketApiResponse?> GetTimeBucketOrDefaultAsync(string timeBucket, Option<Guid> albumId = default, Option<bool> isFavorite = default, Option<bool> isTrashed = default, Option<string> key = default, Option<AssetOrder> order = default, Option<Guid> personId = default, Option<string> slug = default, Option<Guid> tagId = default, Option<Guid> userId = default, Option<AssetVisibility> visibility = default, Option<bool> withCoordinates = default, Option<bool> withPartners = default, Option<bool> withStacked = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint requires the &#x60;asset.read&#x60; permission.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">Filter assets belonging to a specific album (optional)</param>
        /// <param name="isFavorite">Filter by favorite status (true for favorites only, false for non-favorites only) (optional)</param>
        /// <param name="isTrashed">Filter by trash status (true for trashed assets only, false for non-trashed only) (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <param name="order">Sort order for assets within time buckets (ASC for oldest first, DESC for newest first) (optional)</param>
        /// <param name="personId">Filter assets containing a specific person (face recognition) (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="tagId">Filter assets with a specific tag (optional)</param>
        /// <param name="userId">Filter assets by specific user ID (optional)</param>
        /// <param name="visibility">Filter by asset visibility status (ARCHIVE, TIMELINE, HIDDEN, LOCKED) (optional)</param>
        /// <param name="withCoordinates">Include location data in the response (optional)</param>
        /// <param name="withPartners">Include assets shared by partners (optional)</param>
        /// <param name="withStacked">Include stacked assets in the response. When true, only primary assets from stacks are returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTimeBucketsApiResponse"/>&gt;</returns>
        Task<IGetTimeBucketsApiResponse> GetTimeBucketsAsync(Option<Guid> albumId = default, Option<bool> isFavorite = default, Option<bool> isTrashed = default, Option<string> key = default, Option<AssetOrder> order = default, Option<Guid> personId = default, Option<string> slug = default, Option<Guid> tagId = default, Option<Guid> userId = default, Option<AssetVisibility> visibility = default, Option<bool> withCoordinates = default, Option<bool> withPartners = default, Option<bool> withStacked = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint requires the &#x60;asset.read&#x60; permission.
        /// </remarks>
        /// <param name="albumId">Filter assets belonging to a specific album (optional)</param>
        /// <param name="isFavorite">Filter by favorite status (true for favorites only, false for non-favorites only) (optional)</param>
        /// <param name="isTrashed">Filter by trash status (true for trashed assets only, false for non-trashed only) (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <param name="order">Sort order for assets within time buckets (ASC for oldest first, DESC for newest first) (optional)</param>
        /// <param name="personId">Filter assets containing a specific person (face recognition) (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="tagId">Filter assets with a specific tag (optional)</param>
        /// <param name="userId">Filter assets by specific user ID (optional)</param>
        /// <param name="visibility">Filter by asset visibility status (ARCHIVE, TIMELINE, HIDDEN, LOCKED) (optional)</param>
        /// <param name="withCoordinates">Include location data in the response (optional)</param>
        /// <param name="withPartners">Include assets shared by partners (optional)</param>
        /// <param name="withStacked">Include stacked assets in the response. When true, only primary assets from stacks are returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTimeBucketsApiResponse"/>?&gt;</returns>
        Task<IGetTimeBucketsApiResponse?> GetTimeBucketsOrDefaultAsync(Option<Guid> albumId = default, Option<bool> isFavorite = default, Option<bool> isTrashed = default, Option<string> key = default, Option<AssetOrder> order = default, Option<Guid> personId = default, Option<string> slug = default, Option<Guid> tagId = default, Option<Guid> userId = default, Option<AssetVisibility> visibility = default, Option<bool> withCoordinates = default, Option<bool> withPartners = default, Option<bool> withStacked = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetTimeBucketApiResponse"/>
    /// </summary>
    public interface IGetTimeBucketApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.TimeBucketAssetResponseDto?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetTimeBucketsApiResponse"/>
    /// </summary>
    public interface IGetTimeBucketsApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<TimeBucketsResponseDto>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class TimelineApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetTimeBucket;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetTimeBucket;

        internal void ExecuteOnGetTimeBucket(TimelineApi.GetTimeBucketApiResponse apiResponse)
        {
            OnGetTimeBucket?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTimeBucket(Exception exception)
        {
            OnErrorGetTimeBucket?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetTimeBuckets;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetTimeBuckets;

        internal void ExecuteOnGetTimeBuckets(TimelineApi.GetTimeBucketsApiResponse apiResponse)
        {
            OnGetTimeBuckets?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTimeBuckets(Exception exception)
        {
            OnErrorGetTimeBuckets?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class TimelineApi : ITimelineApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<TimelineApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public TimelineApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="TimelineApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TimelineApi(ILogger<TimelineApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, TimelineApiEvents timelineApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<TimelineApi>();
            HttpClient = httpClient;
            Events = timelineApiEvents;
            ApiKeyProvider = apiKeyProvider;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatGetTimeBucket(ref string timeBucket, ref Option<Guid> albumId, ref Option<bool> isFavorite, ref Option<bool> isTrashed, ref Option<string> key, ref Option<AssetOrder> order, ref Option<Guid> personId, ref Option<string> slug, ref Option<Guid> tagId, ref Option<Guid> userId, ref Option<AssetVisibility> visibility, ref Option<bool> withCoordinates, ref Option<bool> withPartners, ref Option<bool> withStacked);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="timeBucket"></param>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        /// <returns></returns>
        private void ValidateGetTimeBucket(string timeBucket, Option<string> key, Option<string> slug)
        {
            if (timeBucket == null)
                throw new ArgumentNullException(nameof(timeBucket));

            if (key.IsSet && key.Value == null)
                throw new ArgumentNullException(nameof(key));

            if (slug.IsSet && slug.Value == null)
                throw new ArgumentNullException(nameof(slug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="timeBucket"></param>
        /// <param name="albumId"></param>
        /// <param name="isFavorite"></param>
        /// <param name="isTrashed"></param>
        /// <param name="key"></param>
        /// <param name="order"></param>
        /// <param name="personId"></param>
        /// <param name="slug"></param>
        /// <param name="tagId"></param>
        /// <param name="userId"></param>
        /// <param name="visibility"></param>
        /// <param name="withCoordinates"></param>
        /// <param name="withPartners"></param>
        /// <param name="withStacked"></param>
        private void AfterGetTimeBucketDefaultImplementation(IGetTimeBucketApiResponse apiResponseLocalVar, string timeBucket, Option<Guid> albumId, Option<bool> isFavorite, Option<bool> isTrashed, Option<string> key, Option<AssetOrder> order, Option<Guid> personId, Option<string> slug, Option<Guid> tagId, Option<Guid> userId, Option<AssetVisibility> visibility, Option<bool> withCoordinates, Option<bool> withPartners, Option<bool> withStacked)
        {
            bool suppressDefaultLog = false;
            AfterGetTimeBucket(ref suppressDefaultLog, apiResponseLocalVar, timeBucket, albumId, isFavorite, isTrashed, key, order, personId, slug, tagId, userId, visibility, withCoordinates, withPartners, withStacked);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="timeBucket"></param>
        /// <param name="albumId"></param>
        /// <param name="isFavorite"></param>
        /// <param name="isTrashed"></param>
        /// <param name="key"></param>
        /// <param name="order"></param>
        /// <param name="personId"></param>
        /// <param name="slug"></param>
        /// <param name="tagId"></param>
        /// <param name="userId"></param>
        /// <param name="visibility"></param>
        /// <param name="withCoordinates"></param>
        /// <param name="withPartners"></param>
        /// <param name="withStacked"></param>
        partial void AfterGetTimeBucket(ref bool suppressDefaultLog, IGetTimeBucketApiResponse apiResponseLocalVar, string timeBucket, Option<Guid> albumId, Option<bool> isFavorite, Option<bool> isTrashed, Option<string> key, Option<AssetOrder> order, Option<Guid> personId, Option<string> slug, Option<Guid> tagId, Option<Guid> userId, Option<AssetVisibility> visibility, Option<bool> withCoordinates, Option<bool> withPartners, Option<bool> withStacked);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="timeBucket"></param>
        /// <param name="albumId"></param>
        /// <param name="isFavorite"></param>
        /// <param name="isTrashed"></param>
        /// <param name="key"></param>
        /// <param name="order"></param>
        /// <param name="personId"></param>
        /// <param name="slug"></param>
        /// <param name="tagId"></param>
        /// <param name="userId"></param>
        /// <param name="visibility"></param>
        /// <param name="withCoordinates"></param>
        /// <param name="withPartners"></param>
        /// <param name="withStacked"></param>
        private void OnErrorGetTimeBucketDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string timeBucket, Option<Guid> albumId, Option<bool> isFavorite, Option<bool> isTrashed, Option<string> key, Option<AssetOrder> order, Option<Guid> personId, Option<string> slug, Option<Guid> tagId, Option<Guid> userId, Option<AssetVisibility> visibility, Option<bool> withCoordinates, Option<bool> withPartners, Option<bool> withStacked)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTimeBucket(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, timeBucket, albumId, isFavorite, isTrashed, key, order, personId, slug, tagId, userId, visibility, withCoordinates, withPartners, withStacked);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="timeBucket"></param>
        /// <param name="albumId"></param>
        /// <param name="isFavorite"></param>
        /// <param name="isTrashed"></param>
        /// <param name="key"></param>
        /// <param name="order"></param>
        /// <param name="personId"></param>
        /// <param name="slug"></param>
        /// <param name="tagId"></param>
        /// <param name="userId"></param>
        /// <param name="visibility"></param>
        /// <param name="withCoordinates"></param>
        /// <param name="withPartners"></param>
        /// <param name="withStacked"></param>
        partial void OnErrorGetTimeBucket(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string timeBucket, Option<Guid> albumId, Option<bool> isFavorite, Option<bool> isTrashed, Option<string> key, Option<AssetOrder> order, Option<Guid> personId, Option<string> slug, Option<Guid> tagId, Option<Guid> userId, Option<AssetVisibility> visibility, Option<bool> withCoordinates, Option<bool> withPartners, Option<bool> withStacked);

        /// <summary>
        ///  This endpoint requires the &#x60;asset.read&#x60; permission.
        /// </summary>
        /// <param name="timeBucket">Time bucket identifier in YYYY-MM-DD format (e.g., \&quot;2024-01-01\&quot; for January 2024)</param>
        /// <param name="albumId">Filter assets belonging to a specific album (optional)</param>
        /// <param name="isFavorite">Filter by favorite status (true for favorites only, false for non-favorites only) (optional)</param>
        /// <param name="isTrashed">Filter by trash status (true for trashed assets only, false for non-trashed only) (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <param name="order">Sort order for assets within time buckets (ASC for oldest first, DESC for newest first) (optional)</param>
        /// <param name="personId">Filter assets containing a specific person (face recognition) (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="tagId">Filter assets with a specific tag (optional)</param>
        /// <param name="userId">Filter assets by specific user ID (optional)</param>
        /// <param name="visibility">Filter by asset visibility status (ARCHIVE, TIMELINE, HIDDEN, LOCKED) (optional)</param>
        /// <param name="withCoordinates">Include location data in the response (optional)</param>
        /// <param name="withPartners">Include assets shared by partners (optional)</param>
        /// <param name="withStacked">Include stacked assets in the response. When true, only primary assets from stacks are returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTimeBucketApiResponse"/>&gt;</returns>
        public async Task<IGetTimeBucketApiResponse?> GetTimeBucketOrDefaultAsync(string timeBucket, Option<Guid> albumId = default, Option<bool> isFavorite = default, Option<bool> isTrashed = default, Option<string> key = default, Option<AssetOrder> order = default, Option<Guid> personId = default, Option<string> slug = default, Option<Guid> tagId = default, Option<Guid> userId = default, Option<AssetVisibility> visibility = default, Option<bool> withCoordinates = default, Option<bool> withPartners = default, Option<bool> withStacked = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTimeBucketAsync(timeBucket, albumId, isFavorite, isTrashed, key, order, personId, slug, tagId, userId, visibility, withCoordinates, withPartners, withStacked, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  This endpoint requires the &#x60;asset.read&#x60; permission.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeBucket">Time bucket identifier in YYYY-MM-DD format (e.g., \&quot;2024-01-01\&quot; for January 2024)</param>
        /// <param name="albumId">Filter assets belonging to a specific album (optional)</param>
        /// <param name="isFavorite">Filter by favorite status (true for favorites only, false for non-favorites only) (optional)</param>
        /// <param name="isTrashed">Filter by trash status (true for trashed assets only, false for non-trashed only) (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <param name="order">Sort order for assets within time buckets (ASC for oldest first, DESC for newest first) (optional)</param>
        /// <param name="personId">Filter assets containing a specific person (face recognition) (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="tagId">Filter assets with a specific tag (optional)</param>
        /// <param name="userId">Filter assets by specific user ID (optional)</param>
        /// <param name="visibility">Filter by asset visibility status (ARCHIVE, TIMELINE, HIDDEN, LOCKED) (optional)</param>
        /// <param name="withCoordinates">Include location data in the response (optional)</param>
        /// <param name="withPartners">Include assets shared by partners (optional)</param>
        /// <param name="withStacked">Include stacked assets in the response. When true, only primary assets from stacks are returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTimeBucketApiResponse"/>&gt;</returns>
        public async Task<IGetTimeBucketApiResponse> GetTimeBucketAsync(string timeBucket, Option<Guid> albumId = default, Option<bool> isFavorite = default, Option<bool> isTrashed = default, Option<string> key = default, Option<AssetOrder> order = default, Option<Guid> personId = default, Option<string> slug = default, Option<Guid> tagId = default, Option<Guid> userId = default, Option<AssetVisibility> visibility = default, Option<bool> withCoordinates = default, Option<bool> withPartners = default, Option<bool> withStacked = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetTimeBucket(timeBucket, key, slug);

                FormatGetTimeBucket(ref timeBucket, ref albumId, ref isFavorite, ref isTrashed, ref key, ref order, ref personId, ref slug, ref tagId, ref userId, ref visibility, ref withCoordinates, ref withPartners, ref withStacked);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/timeline/bucket"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/timeline/bucket");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["timeBucket"] = ClientUtils.ParameterToString(timeBucket);

                    if (albumId.IsSet)
                        parseQueryStringLocalVar["albumId"] = ClientUtils.ParameterToString(albumId.Value);

                    if (isFavorite.IsSet)
                        parseQueryStringLocalVar["isFavorite"] = ClientUtils.ParameterToString(isFavorite.Value);

                    if (isTrashed.IsSet)
                        parseQueryStringLocalVar["isTrashed"] = ClientUtils.ParameterToString(isTrashed.Value);

                    if (key.IsSet)
                        parseQueryStringLocalVar["key"] = ClientUtils.ParameterToString(key.Value);

                    if (order.IsSet)
                        parseQueryStringLocalVar["order"] = ClientUtils.ParameterToString(order.Value);

                    if (personId.IsSet)
                        parseQueryStringLocalVar["personId"] = ClientUtils.ParameterToString(personId.Value);

                    if (slug.IsSet)
                        parseQueryStringLocalVar["slug"] = ClientUtils.ParameterToString(slug.Value);

                    if (tagId.IsSet)
                        parseQueryStringLocalVar["tagId"] = ClientUtils.ParameterToString(tagId.Value);

                    if (userId.IsSet)
                        parseQueryStringLocalVar["userId"] = ClientUtils.ParameterToString(userId.Value);

                    if (visibility.IsSet)
                        parseQueryStringLocalVar["visibility"] = ClientUtils.ParameterToString(visibility.Value);

                    if (withCoordinates.IsSet)
                        parseQueryStringLocalVar["withCoordinates"] = ClientUtils.ParameterToString(withCoordinates.Value);

                    if (withPartners.IsSet)
                        parseQueryStringLocalVar["withPartners"] = ClientUtils.ParameterToString(withPartners.Value);

                    if (withStacked.IsSet)
                        parseQueryStringLocalVar["withStacked"] = ClientUtils.ParameterToString(withStacked.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar3 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar3);

                    bearerTokenLocalVar3.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetTimeBucketApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTimeBucketApiResponse>();
                        GetTimeBucketApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/timeline/bucket", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetTimeBucketDefaultImplementation(apiResponseLocalVar, timeBucket, albumId, isFavorite, isTrashed, key, order, personId, slug, tagId, userId, visibility, withCoordinates, withPartners, withStacked);

                        Events.ExecuteOnGetTimeBucket(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTimeBucketDefaultImplementation(e, "/timeline/bucket", uriBuilderLocalVar.Path, timeBucket, albumId, isFavorite, isTrashed, key, order, personId, slug, tagId, userId, visibility, withCoordinates, withPartners, withStacked);
                Events.ExecuteOnErrorGetTimeBucket(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTimeBucketApiResponse"/>
        /// </summary>
        public partial class GetTimeBucketApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetTimeBucketApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTimeBucketApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTimeBucketApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTimeBucketApiResponse(ILogger<GetTimeBucketApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetTimeBucketApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTimeBucketApiResponse(ILogger<GetTimeBucketApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.TimeBucketAssetResponseDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.TimeBucketAssetResponseDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.TimeBucketAssetResponseDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetTimeBuckets(ref Option<Guid> albumId, ref Option<bool> isFavorite, ref Option<bool> isTrashed, ref Option<string> key, ref Option<AssetOrder> order, ref Option<Guid> personId, ref Option<string> slug, ref Option<Guid> tagId, ref Option<Guid> userId, ref Option<AssetVisibility> visibility, ref Option<bool> withCoordinates, ref Option<bool> withPartners, ref Option<bool> withStacked);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        /// <returns></returns>
        private void ValidateGetTimeBuckets(Option<string> key, Option<string> slug)
        {
            if (key.IsSet && key.Value == null)
                throw new ArgumentNullException(nameof(key));

            if (slug.IsSet && slug.Value == null)
                throw new ArgumentNullException(nameof(slug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="albumId"></param>
        /// <param name="isFavorite"></param>
        /// <param name="isTrashed"></param>
        /// <param name="key"></param>
        /// <param name="order"></param>
        /// <param name="personId"></param>
        /// <param name="slug"></param>
        /// <param name="tagId"></param>
        /// <param name="userId"></param>
        /// <param name="visibility"></param>
        /// <param name="withCoordinates"></param>
        /// <param name="withPartners"></param>
        /// <param name="withStacked"></param>
        private void AfterGetTimeBucketsDefaultImplementation(IGetTimeBucketsApiResponse apiResponseLocalVar, Option<Guid> albumId, Option<bool> isFavorite, Option<bool> isTrashed, Option<string> key, Option<AssetOrder> order, Option<Guid> personId, Option<string> slug, Option<Guid> tagId, Option<Guid> userId, Option<AssetVisibility> visibility, Option<bool> withCoordinates, Option<bool> withPartners, Option<bool> withStacked)
        {
            bool suppressDefaultLog = false;
            AfterGetTimeBuckets(ref suppressDefaultLog, apiResponseLocalVar, albumId, isFavorite, isTrashed, key, order, personId, slug, tagId, userId, visibility, withCoordinates, withPartners, withStacked);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="albumId"></param>
        /// <param name="isFavorite"></param>
        /// <param name="isTrashed"></param>
        /// <param name="key"></param>
        /// <param name="order"></param>
        /// <param name="personId"></param>
        /// <param name="slug"></param>
        /// <param name="tagId"></param>
        /// <param name="userId"></param>
        /// <param name="visibility"></param>
        /// <param name="withCoordinates"></param>
        /// <param name="withPartners"></param>
        /// <param name="withStacked"></param>
        partial void AfterGetTimeBuckets(ref bool suppressDefaultLog, IGetTimeBucketsApiResponse apiResponseLocalVar, Option<Guid> albumId, Option<bool> isFavorite, Option<bool> isTrashed, Option<string> key, Option<AssetOrder> order, Option<Guid> personId, Option<string> slug, Option<Guid> tagId, Option<Guid> userId, Option<AssetVisibility> visibility, Option<bool> withCoordinates, Option<bool> withPartners, Option<bool> withStacked);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="albumId"></param>
        /// <param name="isFavorite"></param>
        /// <param name="isTrashed"></param>
        /// <param name="key"></param>
        /// <param name="order"></param>
        /// <param name="personId"></param>
        /// <param name="slug"></param>
        /// <param name="tagId"></param>
        /// <param name="userId"></param>
        /// <param name="visibility"></param>
        /// <param name="withCoordinates"></param>
        /// <param name="withPartners"></param>
        /// <param name="withStacked"></param>
        private void OnErrorGetTimeBucketsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<Guid> albumId, Option<bool> isFavorite, Option<bool> isTrashed, Option<string> key, Option<AssetOrder> order, Option<Guid> personId, Option<string> slug, Option<Guid> tagId, Option<Guid> userId, Option<AssetVisibility> visibility, Option<bool> withCoordinates, Option<bool> withPartners, Option<bool> withStacked)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTimeBuckets(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, albumId, isFavorite, isTrashed, key, order, personId, slug, tagId, userId, visibility, withCoordinates, withPartners, withStacked);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="albumId"></param>
        /// <param name="isFavorite"></param>
        /// <param name="isTrashed"></param>
        /// <param name="key"></param>
        /// <param name="order"></param>
        /// <param name="personId"></param>
        /// <param name="slug"></param>
        /// <param name="tagId"></param>
        /// <param name="userId"></param>
        /// <param name="visibility"></param>
        /// <param name="withCoordinates"></param>
        /// <param name="withPartners"></param>
        /// <param name="withStacked"></param>
        partial void OnErrorGetTimeBuckets(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<Guid> albumId, Option<bool> isFavorite, Option<bool> isTrashed, Option<string> key, Option<AssetOrder> order, Option<Guid> personId, Option<string> slug, Option<Guid> tagId, Option<Guid> userId, Option<AssetVisibility> visibility, Option<bool> withCoordinates, Option<bool> withPartners, Option<bool> withStacked);

        /// <summary>
        ///  This endpoint requires the &#x60;asset.read&#x60; permission.
        /// </summary>
        /// <param name="albumId">Filter assets belonging to a specific album (optional)</param>
        /// <param name="isFavorite">Filter by favorite status (true for favorites only, false for non-favorites only) (optional)</param>
        /// <param name="isTrashed">Filter by trash status (true for trashed assets only, false for non-trashed only) (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <param name="order">Sort order for assets within time buckets (ASC for oldest first, DESC for newest first) (optional)</param>
        /// <param name="personId">Filter assets containing a specific person (face recognition) (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="tagId">Filter assets with a specific tag (optional)</param>
        /// <param name="userId">Filter assets by specific user ID (optional)</param>
        /// <param name="visibility">Filter by asset visibility status (ARCHIVE, TIMELINE, HIDDEN, LOCKED) (optional)</param>
        /// <param name="withCoordinates">Include location data in the response (optional)</param>
        /// <param name="withPartners">Include assets shared by partners (optional)</param>
        /// <param name="withStacked">Include stacked assets in the response. When true, only primary assets from stacks are returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTimeBucketsApiResponse"/>&gt;</returns>
        public async Task<IGetTimeBucketsApiResponse?> GetTimeBucketsOrDefaultAsync(Option<Guid> albumId = default, Option<bool> isFavorite = default, Option<bool> isTrashed = default, Option<string> key = default, Option<AssetOrder> order = default, Option<Guid> personId = default, Option<string> slug = default, Option<Guid> tagId = default, Option<Guid> userId = default, Option<AssetVisibility> visibility = default, Option<bool> withCoordinates = default, Option<bool> withPartners = default, Option<bool> withStacked = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTimeBucketsAsync(albumId, isFavorite, isTrashed, key, order, personId, slug, tagId, userId, visibility, withCoordinates, withPartners, withStacked, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  This endpoint requires the &#x60;asset.read&#x60; permission.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">Filter assets belonging to a specific album (optional)</param>
        /// <param name="isFavorite">Filter by favorite status (true for favorites only, false for non-favorites only) (optional)</param>
        /// <param name="isTrashed">Filter by trash status (true for trashed assets only, false for non-trashed only) (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <param name="order">Sort order for assets within time buckets (ASC for oldest first, DESC for newest first) (optional)</param>
        /// <param name="personId">Filter assets containing a specific person (face recognition) (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="tagId">Filter assets with a specific tag (optional)</param>
        /// <param name="userId">Filter assets by specific user ID (optional)</param>
        /// <param name="visibility">Filter by asset visibility status (ARCHIVE, TIMELINE, HIDDEN, LOCKED) (optional)</param>
        /// <param name="withCoordinates">Include location data in the response (optional)</param>
        /// <param name="withPartners">Include assets shared by partners (optional)</param>
        /// <param name="withStacked">Include stacked assets in the response. When true, only primary assets from stacks are returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTimeBucketsApiResponse"/>&gt;</returns>
        public async Task<IGetTimeBucketsApiResponse> GetTimeBucketsAsync(Option<Guid> albumId = default, Option<bool> isFavorite = default, Option<bool> isTrashed = default, Option<string> key = default, Option<AssetOrder> order = default, Option<Guid> personId = default, Option<string> slug = default, Option<Guid> tagId = default, Option<Guid> userId = default, Option<AssetVisibility> visibility = default, Option<bool> withCoordinates = default, Option<bool> withPartners = default, Option<bool> withStacked = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetTimeBuckets(key, slug);

                FormatGetTimeBuckets(ref albumId, ref isFavorite, ref isTrashed, ref key, ref order, ref personId, ref slug, ref tagId, ref userId, ref visibility, ref withCoordinates, ref withPartners, ref withStacked);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/timeline/buckets"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/timeline/buckets");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (albumId.IsSet)
                        parseQueryStringLocalVar["albumId"] = ClientUtils.ParameterToString(albumId.Value);

                    if (isFavorite.IsSet)
                        parseQueryStringLocalVar["isFavorite"] = ClientUtils.ParameterToString(isFavorite.Value);

                    if (isTrashed.IsSet)
                        parseQueryStringLocalVar["isTrashed"] = ClientUtils.ParameterToString(isTrashed.Value);

                    if (key.IsSet)
                        parseQueryStringLocalVar["key"] = ClientUtils.ParameterToString(key.Value);

                    if (order.IsSet)
                        parseQueryStringLocalVar["order"] = ClientUtils.ParameterToString(order.Value);

                    if (personId.IsSet)
                        parseQueryStringLocalVar["personId"] = ClientUtils.ParameterToString(personId.Value);

                    if (slug.IsSet)
                        parseQueryStringLocalVar["slug"] = ClientUtils.ParameterToString(slug.Value);

                    if (tagId.IsSet)
                        parseQueryStringLocalVar["tagId"] = ClientUtils.ParameterToString(tagId.Value);

                    if (userId.IsSet)
                        parseQueryStringLocalVar["userId"] = ClientUtils.ParameterToString(userId.Value);

                    if (visibility.IsSet)
                        parseQueryStringLocalVar["visibility"] = ClientUtils.ParameterToString(visibility.Value);

                    if (withCoordinates.IsSet)
                        parseQueryStringLocalVar["withCoordinates"] = ClientUtils.ParameterToString(withCoordinates.Value);

                    if (withPartners.IsSet)
                        parseQueryStringLocalVar["withPartners"] = ClientUtils.ParameterToString(withPartners.Value);

                    if (withStacked.IsSet)
                        parseQueryStringLocalVar["withStacked"] = ClientUtils.ParameterToString(withStacked.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar3 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar3);

                    bearerTokenLocalVar3.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetTimeBucketsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTimeBucketsApiResponse>();
                        GetTimeBucketsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/timeline/buckets", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetTimeBucketsDefaultImplementation(apiResponseLocalVar, albumId, isFavorite, isTrashed, key, order, personId, slug, tagId, userId, visibility, withCoordinates, withPartners, withStacked);

                        Events.ExecuteOnGetTimeBuckets(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTimeBucketsDefaultImplementation(e, "/timeline/buckets", uriBuilderLocalVar.Path, albumId, isFavorite, isTrashed, key, order, personId, slug, tagId, userId, visibility, withCoordinates, withPartners, withStacked);
                Events.ExecuteOnErrorGetTimeBuckets(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTimeBucketsApiResponse"/>
        /// </summary>
        public partial class GetTimeBucketsApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetTimeBucketsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTimeBucketsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTimeBucketsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTimeBucketsApiResponse(ILogger<GetTimeBucketsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetTimeBucketsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTimeBucketsApiResponse(ILogger<GetTimeBucketsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TimeBucketsResponseDto>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TimeBucketsResponseDto>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TimeBucketsResponseDto>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
