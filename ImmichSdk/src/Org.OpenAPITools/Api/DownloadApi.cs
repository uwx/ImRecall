// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IDownloadApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        DownloadApiEvents Events { get; }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint requires the &#x60;asset.download&#x60; permission.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIdsDto"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadArchiveApiResponse"/>&gt;</returns>
        Task<IDownloadArchiveApiResponse> DownloadArchiveAsync(AssetIdsDto assetIdsDto, Option<string> key = default, Option<string> slug = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint requires the &#x60;asset.download&#x60; permission.
        /// </remarks>
        /// <param name="assetIdsDto"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadArchiveApiResponse"/>?&gt;</returns>
        Task<IDownloadArchiveApiResponse?> DownloadArchiveOrDefaultAsync(AssetIdsDto assetIdsDto, Option<string> key = default, Option<string> slug = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint requires the &#x60;asset.download&#x60; permission.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="downloadInfoDto"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDownloadInfoApiResponse"/>&gt;</returns>
        Task<IGetDownloadInfoApiResponse> GetDownloadInfoAsync(DownloadInfoDto downloadInfoDto, Option<string> key = default, Option<string> slug = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint requires the &#x60;asset.download&#x60; permission.
        /// </remarks>
        /// <param name="downloadInfoDto"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDownloadInfoApiResponse"/>?&gt;</returns>
        Task<IGetDownloadInfoApiResponse?> GetDownloadInfoOrDefaultAsync(DownloadInfoDto downloadInfoDto, Option<string> key = default, Option<string> slug = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDownloadArchiveApiResponse"/>
    /// </summary>
    public interface IDownloadArchiveApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<System.IO.Stream?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetDownloadInfoApiResponse"/>
    /// </summary>
    public interface IGetDownloadInfoApiResponse : Org.OpenAPITools.Client.IApiResponse, ICreated<Org.OpenAPITools.Model.DownloadResponseDto?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class DownloadApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDownloadArchive;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDownloadArchive;

        internal void ExecuteOnDownloadArchive(DownloadApi.DownloadArchiveApiResponse apiResponse)
        {
            OnDownloadArchive?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDownloadArchive(Exception exception)
        {
            OnErrorDownloadArchive?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetDownloadInfo;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetDownloadInfo;

        internal void ExecuteOnGetDownloadInfo(DownloadApi.GetDownloadInfoApiResponse apiResponse)
        {
            OnGetDownloadInfo?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetDownloadInfo(Exception exception)
        {
            OnErrorGetDownloadInfo?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class DownloadApi : IDownloadApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<DownloadApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public DownloadApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="DownloadApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DownloadApi(ILogger<DownloadApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, DownloadApiEvents downloadApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<DownloadApi>();
            HttpClient = httpClient;
            Events = downloadApiEvents;
            ApiKeyProvider = apiKeyProvider;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatDownloadArchive(AssetIdsDto assetIdsDto, ref Option<string> key, ref Option<string> slug);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="assetIdsDto"></param>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        /// <returns></returns>
        private void ValidateDownloadArchive(AssetIdsDto assetIdsDto, Option<string> key, Option<string> slug)
        {
            if (assetIdsDto == null)
                throw new ArgumentNullException(nameof(assetIdsDto));

            if (key.IsSet && key.Value == null)
                throw new ArgumentNullException(nameof(key));

            if (slug.IsSet && slug.Value == null)
                throw new ArgumentNullException(nameof(slug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="assetIdsDto"></param>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        private void AfterDownloadArchiveDefaultImplementation(IDownloadArchiveApiResponse apiResponseLocalVar, AssetIdsDto assetIdsDto, Option<string> key, Option<string> slug)
        {
            bool suppressDefaultLog = false;
            AfterDownloadArchive(ref suppressDefaultLog, apiResponseLocalVar, assetIdsDto, key, slug);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="assetIdsDto"></param>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        partial void AfterDownloadArchive(ref bool suppressDefaultLog, IDownloadArchiveApiResponse apiResponseLocalVar, AssetIdsDto assetIdsDto, Option<string> key, Option<string> slug);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="assetIdsDto"></param>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        private void OnErrorDownloadArchiveDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AssetIdsDto assetIdsDto, Option<string> key, Option<string> slug)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDownloadArchive(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, assetIdsDto, key, slug);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="assetIdsDto"></param>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        partial void OnErrorDownloadArchive(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AssetIdsDto assetIdsDto, Option<string> key, Option<string> slug);

        /// <summary>
        ///  This endpoint requires the &#x60;asset.download&#x60; permission.
        /// </summary>
        /// <param name="assetIdsDto"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadArchiveApiResponse"/>&gt;</returns>
        public async Task<IDownloadArchiveApiResponse?> DownloadArchiveOrDefaultAsync(AssetIdsDto assetIdsDto, Option<string> key = default, Option<string> slug = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DownloadArchiveAsync(assetIdsDto, key, slug, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  This endpoint requires the &#x60;asset.download&#x60; permission.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIdsDto"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadArchiveApiResponse"/>&gt;</returns>
        public async Task<IDownloadArchiveApiResponse> DownloadArchiveAsync(AssetIdsDto assetIdsDto, Option<string> key = default, Option<string> slug = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDownloadArchive(assetIdsDto, key, slug);

                FormatDownloadArchive(assetIdsDto, ref key, ref slug);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/download/archive"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/download/archive");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (key.IsSet)
                        parseQueryStringLocalVar["key"] = ClientUtils.ParameterToString(key.Value);

                    if (slug.IsSet)
                        parseQueryStringLocalVar["slug"] = ClientUtils.ParameterToString(slug.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (assetIdsDto as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(assetIdsDto, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar3 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar3);

                    bearerTokenLocalVar3.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/octet-stream"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<DownloadArchiveApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DownloadArchiveApiResponse>();
                        DownloadArchiveApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            case (200):
                            {
                                byte[] responseBytesArrayLocalVar = await httpResponseMessageLocalVar.Content.ReadAsByteArrayAsync(cancellationToken).ConfigureAwait(false);
                                System.IO.Stream responseContentStreamLocalVar = new System.IO.MemoryStream(responseBytesArrayLocalVar);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentStreamLocalVar, "/download/archive", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/download/archive", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterDownloadArchiveDefaultImplementation(apiResponseLocalVar, assetIdsDto, key, slug);

                        Events.ExecuteOnDownloadArchive(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDownloadArchiveDefaultImplementation(e, "/download/archive", uriBuilderLocalVar.Path, assetIdsDto, key, slug);
                Events.ExecuteOnErrorDownloadArchive(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DownloadArchiveApiResponse"/>
        /// </summary>
        public partial class DownloadArchiveApiResponse : Org.OpenAPITools.Client.ApiResponse, IDownloadArchiveApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DownloadArchiveApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DownloadArchiveApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DownloadArchiveApiResponse(ILogger<DownloadArchiveApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="DownloadArchiveApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DownloadArchiveApiResponse(ILogger<DownloadArchiveApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public System.IO.Stream? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? ContentStream
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out System.IO.Stream? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetDownloadInfo(DownloadInfoDto downloadInfoDto, ref Option<string> key, ref Option<string> slug);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="downloadInfoDto"></param>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        /// <returns></returns>
        private void ValidateGetDownloadInfo(DownloadInfoDto downloadInfoDto, Option<string> key, Option<string> slug)
        {
            if (downloadInfoDto == null)
                throw new ArgumentNullException(nameof(downloadInfoDto));

            if (key.IsSet && key.Value == null)
                throw new ArgumentNullException(nameof(key));

            if (slug.IsSet && slug.Value == null)
                throw new ArgumentNullException(nameof(slug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="downloadInfoDto"></param>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        private void AfterGetDownloadInfoDefaultImplementation(IGetDownloadInfoApiResponse apiResponseLocalVar, DownloadInfoDto downloadInfoDto, Option<string> key, Option<string> slug)
        {
            bool suppressDefaultLog = false;
            AfterGetDownloadInfo(ref suppressDefaultLog, apiResponseLocalVar, downloadInfoDto, key, slug);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="downloadInfoDto"></param>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        partial void AfterGetDownloadInfo(ref bool suppressDefaultLog, IGetDownloadInfoApiResponse apiResponseLocalVar, DownloadInfoDto downloadInfoDto, Option<string> key, Option<string> slug);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="downloadInfoDto"></param>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        private void OnErrorGetDownloadInfoDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, DownloadInfoDto downloadInfoDto, Option<string> key, Option<string> slug)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetDownloadInfo(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, downloadInfoDto, key, slug);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="downloadInfoDto"></param>
        /// <param name="key"></param>
        /// <param name="slug"></param>
        partial void OnErrorGetDownloadInfo(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, DownloadInfoDto downloadInfoDto, Option<string> key, Option<string> slug);

        /// <summary>
        ///  This endpoint requires the &#x60;asset.download&#x60; permission.
        /// </summary>
        /// <param name="downloadInfoDto"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDownloadInfoApiResponse"/>&gt;</returns>
        public async Task<IGetDownloadInfoApiResponse?> GetDownloadInfoOrDefaultAsync(DownloadInfoDto downloadInfoDto, Option<string> key = default, Option<string> slug = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetDownloadInfoAsync(downloadInfoDto, key, slug, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  This endpoint requires the &#x60;asset.download&#x60; permission.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="downloadInfoDto"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="slug"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDownloadInfoApiResponse"/>&gt;</returns>
        public async Task<IGetDownloadInfoApiResponse> GetDownloadInfoAsync(DownloadInfoDto downloadInfoDto, Option<string> key = default, Option<string> slug = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetDownloadInfo(downloadInfoDto, key, slug);

                FormatGetDownloadInfo(downloadInfoDto, ref key, ref slug);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/download/info"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/download/info");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (key.IsSet)
                        parseQueryStringLocalVar["key"] = ClientUtils.ParameterToString(key.Value);

                    if (slug.IsSet)
                        parseQueryStringLocalVar["slug"] = ClientUtils.ParameterToString(slug.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (downloadInfoDto as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(downloadInfoDto, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar3 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar3);

                    bearerTokenLocalVar3.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetDownloadInfoApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetDownloadInfoApiResponse>();
                        GetDownloadInfoApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/download/info", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetDownloadInfoDefaultImplementation(apiResponseLocalVar, downloadInfoDto, key, slug);

                        Events.ExecuteOnGetDownloadInfo(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetDownloadInfoDefaultImplementation(e, "/download/info", uriBuilderLocalVar.Path, downloadInfoDto, key, slug);
                Events.ExecuteOnErrorGetDownloadInfo(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetDownloadInfoApiResponse"/>
        /// </summary>
        public partial class GetDownloadInfoApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetDownloadInfoApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetDownloadInfoApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetDownloadInfoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetDownloadInfoApiResponse(ILogger<GetDownloadInfoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetDownloadInfoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetDownloadInfoApiResponse(ILogger<GetDownloadInfoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.DownloadResponseDto? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.DownloadResponseDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out Org.OpenAPITools.Model.DownloadResponseDto? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
