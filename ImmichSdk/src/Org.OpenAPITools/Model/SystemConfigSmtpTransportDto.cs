// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SystemConfigSmtpTransportDto
    /// </summary>
    public partial class SystemConfigSmtpTransportDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigSmtpTransportDto" /> class.
        /// </summary>
        /// <param name="host">host</param>
        /// <param name="ignoreCert">ignoreCert</param>
        /// <param name="password">password</param>
        /// <param name="port">port</param>
        /// <param name="secure">secure</param>
        /// <param name="username">username</param>
        [JsonConstructor]
        public SystemConfigSmtpTransportDto(string host, bool ignoreCert, string password, decimal port, bool secure, string username)
        {
            Host = host;
            IgnoreCert = ignoreCert;
            Password = password;
            Port = port;
            Secure = secure;
            Username = username;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Host
        /// </summary>
        [JsonPropertyName("host")]
        public string Host { get; set; }

        /// <summary>
        /// Gets or Sets IgnoreCert
        /// </summary>
        [JsonPropertyName("ignoreCert")]
        public bool IgnoreCert { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [JsonPropertyName("password")]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets Port
        /// </summary>
        [JsonPropertyName("port")]
        public decimal Port { get; set; }

        /// <summary>
        /// Gets or Sets Secure
        /// </summary>
        [JsonPropertyName("secure")]
        public bool Secure { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [JsonPropertyName("username")]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SystemConfigSmtpTransportDto {\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  IgnoreCert: ").Append(IgnoreCert).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  Secure: ").Append(Secure).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Port (decimal) maximum
            if (this.Port > (decimal)65535)
            {
                yield return new ValidationResult("Invalid value for Port, must be a value less than or equal to 65535.", new [] { "Port" });
            }

            // Port (decimal) minimum
            if (this.Port < (decimal)0)
            {
                yield return new ValidationResult("Invalid value for Port, must be a value greater than or equal to 0.", new [] { "Port" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SystemConfigSmtpTransportDto" />
    /// </summary>
    public class SystemConfigSmtpTransportDtoJsonConverter : JsonConverter<SystemConfigSmtpTransportDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="SystemConfigSmtpTransportDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SystemConfigSmtpTransportDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> host = default;
            Option<bool?> ignoreCert = default;
            Option<string?> password = default;
            Option<decimal?> port = default;
            Option<bool?> secure = default;
            Option<string?> username = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "host":
                            host = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ignoreCert":
                            ignoreCert = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "password":
                            password = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "port":
                            port = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "secure":
                            secure = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "username":
                            username = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!host.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigSmtpTransportDto.", nameof(host));

            if (!ignoreCert.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigSmtpTransportDto.", nameof(ignoreCert));

            if (!password.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigSmtpTransportDto.", nameof(password));

            if (!port.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigSmtpTransportDto.", nameof(port));

            if (!secure.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigSmtpTransportDto.", nameof(secure));

            if (!username.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigSmtpTransportDto.", nameof(username));

            if (host.IsSet && host.Value == null)
                throw new ArgumentNullException(nameof(host), "Property is not nullable for class SystemConfigSmtpTransportDto.");

            if (ignoreCert.IsSet && ignoreCert.Value == null)
                throw new ArgumentNullException(nameof(ignoreCert), "Property is not nullable for class SystemConfigSmtpTransportDto.");

            if (password.IsSet && password.Value == null)
                throw new ArgumentNullException(nameof(password), "Property is not nullable for class SystemConfigSmtpTransportDto.");

            if (port.IsSet && port.Value == null)
                throw new ArgumentNullException(nameof(port), "Property is not nullable for class SystemConfigSmtpTransportDto.");

            if (secure.IsSet && secure.Value == null)
                throw new ArgumentNullException(nameof(secure), "Property is not nullable for class SystemConfigSmtpTransportDto.");

            if (username.IsSet && username.Value == null)
                throw new ArgumentNullException(nameof(username), "Property is not nullable for class SystemConfigSmtpTransportDto.");

            return new SystemConfigSmtpTransportDto(host.Value!, ignoreCert.Value!.Value!, password.Value!, port.Value!.Value!, secure.Value!.Value!, username.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="SystemConfigSmtpTransportDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="systemConfigSmtpTransportDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SystemConfigSmtpTransportDto systemConfigSmtpTransportDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, systemConfigSmtpTransportDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SystemConfigSmtpTransportDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="systemConfigSmtpTransportDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SystemConfigSmtpTransportDto systemConfigSmtpTransportDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (systemConfigSmtpTransportDto.Host == null)
                throw new ArgumentNullException(nameof(systemConfigSmtpTransportDto.Host), "Property is required for class SystemConfigSmtpTransportDto.");

            if (systemConfigSmtpTransportDto.Password == null)
                throw new ArgumentNullException(nameof(systemConfigSmtpTransportDto.Password), "Property is required for class SystemConfigSmtpTransportDto.");

            if (systemConfigSmtpTransportDto.Username == null)
                throw new ArgumentNullException(nameof(systemConfigSmtpTransportDto.Username), "Property is required for class SystemConfigSmtpTransportDto.");

            writer.WriteString("host", systemConfigSmtpTransportDto.Host);

            writer.WriteBoolean("ignoreCert", systemConfigSmtpTransportDto.IgnoreCert);

            writer.WriteString("password", systemConfigSmtpTransportDto.Password);

            writer.WriteNumber("port", systemConfigSmtpTransportDto.Port);

            writer.WriteBoolean("secure", systemConfigSmtpTransportDto.Secure);

            writer.WriteString("username", systemConfigSmtpTransportDto.Username);
        }
    }
}
