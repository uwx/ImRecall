// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// NotificationDto
    /// </summary>
    public partial class NotificationDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationDto" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt</param>
        /// <param name="id">id</param>
        /// <param name="level">level</param>
        /// <param name="title">title</param>
        /// <param name="type">type</param>
        /// <param name="data">data</param>
        /// <param name="description">description</param>
        /// <param name="readAt">readAt</param>
        [JsonConstructor]
        public NotificationDto(DateTime createdAt, string id, NotificationLevel level, string title, NotificationType type, Option<Object?> data = default, Option<string?> description = default, Option<DateTime?> readAt = default)
        {
            CreatedAt = createdAt;
            Id = id;
            Level = level;
            Title = title;
            Type = type;
            DataOption = data;
            DescriptionOption = description;
            ReadAtOption = readAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Level
        /// </summary>
        [JsonPropertyName("level")]
        public NotificationLevel Level { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public NotificationType Type { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// Used to track the state of Data
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> DataOption { get; private set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [JsonPropertyName("data")]
        public Object? Data { get { return this.DataOption; } set { this.DataOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReadAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> ReadAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReadAt
        /// </summary>
        [JsonPropertyName("readAt")]
        public DateTime? ReadAt { get { return this.ReadAtOption; } set { this.ReadAtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NotificationDto {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ReadAt: ").Append(ReadAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="NotificationDto" />
    /// </summary>
    public class NotificationDtoJsonConverter : JsonConverter<NotificationDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ReadAt
        /// </summary>
        public static string ReadAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="NotificationDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override NotificationDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> createdAt = default;
            Option<string?> id = default;
            Option<NotificationLevel?> level = default;
            Option<string?> title = default;
            Option<NotificationType?> type = default;
            Option<Object?> data = default;
            Option<string?> description = default;
            Option<DateTime?> readAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "level":
                            string? levelRawValue = utf8JsonReader.GetString();
                            if (levelRawValue != null)
                                level = new Option<NotificationLevel?>(NotificationLevelValueConverter.FromStringOrDefault(levelRawValue));
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<NotificationType?>(NotificationTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "data":
                            data = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "readAt":
                            readAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class NotificationDto.", nameof(createdAt));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class NotificationDto.", nameof(id));

            if (!level.IsSet)
                throw new ArgumentException("Property is required for class NotificationDto.", nameof(level));

            if (!title.IsSet)
                throw new ArgumentException("Property is required for class NotificationDto.", nameof(title));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class NotificationDto.", nameof(type));

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class NotificationDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class NotificationDto.");

            if (level.IsSet && level.Value == null)
                throw new ArgumentNullException(nameof(level), "Property is not nullable for class NotificationDto.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class NotificationDto.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class NotificationDto.");

            if (data.IsSet && data.Value == null)
                throw new ArgumentNullException(nameof(data), "Property is not nullable for class NotificationDto.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class NotificationDto.");

            if (readAt.IsSet && readAt.Value == null)
                throw new ArgumentNullException(nameof(readAt), "Property is not nullable for class NotificationDto.");

            return new NotificationDto(createdAt.Value!.Value!, id.Value!, level.Value!.Value!, title.Value!, type.Value!.Value!, data, description, readAt);
        }

        /// <summary>
        /// Serializes a <see cref="NotificationDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="notificationDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, NotificationDto notificationDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, notificationDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="NotificationDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="notificationDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, NotificationDto notificationDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (notificationDto.Id == null)
                throw new ArgumentNullException(nameof(notificationDto.Id), "Property is required for class NotificationDto.");

            if (notificationDto.Title == null)
                throw new ArgumentNullException(nameof(notificationDto.Title), "Property is required for class NotificationDto.");

            if (notificationDto.DataOption.IsSet && notificationDto.Data == null)
                throw new ArgumentNullException(nameof(notificationDto.Data), "Property is required for class NotificationDto.");

            if (notificationDto.DescriptionOption.IsSet && notificationDto.Description == null)
                throw new ArgumentNullException(nameof(notificationDto.Description), "Property is required for class NotificationDto.");

            writer.WriteString("createdAt", notificationDto.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("id", notificationDto.Id);

            var levelRawValue = NotificationLevelValueConverter.ToJsonValue(notificationDto.Level);
            writer.WriteString("level", levelRawValue);

            writer.WriteString("title", notificationDto.Title);

            var typeRawValue = NotificationTypeValueConverter.ToJsonValue(notificationDto.Type);
            writer.WriteString("type", typeRawValue);

            if (notificationDto.DataOption.IsSet)
            {
                writer.WritePropertyName("data");
                JsonSerializer.Serialize(writer, notificationDto.Data, jsonSerializerOptions);
            }
            if (notificationDto.DescriptionOption.IsSet)
                writer.WriteString("description", notificationDto.Description);

            if (notificationDto.ReadAtOption.IsSet)
                writer.WriteString("readAt", notificationDto.ReadAtOption.Value!.Value.ToString(ReadAtFormat));
        }
    }
}
