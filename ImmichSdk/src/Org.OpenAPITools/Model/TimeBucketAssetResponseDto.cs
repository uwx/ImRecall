// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TimeBucketAssetResponseDto
    /// </summary>
    public partial class TimeBucketAssetResponseDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeBucketAssetResponseDto" /> class.
        /// </summary>
        /// <param name="city">Array of city names extracted from EXIF GPS data</param>
        /// <param name="country">Array of country names extracted from EXIF GPS data</param>
        /// <param name="duration">Array of video durations in HH:MM:SS format (null for images)</param>
        /// <param name="fileCreatedAt">Array of file creation timestamps in UTC (ISO 8601 format, without timezone)</param>
        /// <param name="id">Array of asset IDs in the time bucket</param>
        /// <param name="isFavorite">Array indicating whether each asset is favorited</param>
        /// <param name="isImage">Array indicating whether each asset is an image (false for videos)</param>
        /// <param name="isTrashed">Array indicating whether each asset is in the trash</param>
        /// <param name="livePhotoVideoId">Array of live photo video asset IDs (null for non-live photos)</param>
        /// <param name="localOffsetHours">Array of UTC offset hours at the time each photo was taken. Positive values are east of UTC, negative values are west of UTC. Values may be fractional (e.g., 5.5 for +05:30, -9.75 for -09:45). Applying this offset to &#39;fileCreatedAt&#39; will give you the time the photo was taken from the photographer&#39;s perspective.</param>
        /// <param name="ownerId">Array of owner IDs for each asset</param>
        /// <param name="projectionType">Array of projection types for 360° content (e.g., \&quot;EQUIRECTANGULAR\&quot;, \&quot;CUBEFACE\&quot;, \&quot;CYLINDRICAL\&quot;)</param>
        /// <param name="ratio">Array of aspect ratios (width/height) for each asset</param>
        /// <param name="thumbhash">Array of BlurHash strings for generating asset previews (base64 encoded)</param>
        /// <param name="visibility">Array of visibility statuses for each asset (e.g., ARCHIVE, TIMELINE, HIDDEN, LOCKED)</param>
        /// <param name="latitude">Array of latitude coordinates extracted from EXIF GPS data</param>
        /// <param name="longitude">Array of longitude coordinates extracted from EXIF GPS data</param>
        /// <param name="stack">Array of stack information as [stackId, assetCount] tuples (null for non-stacked assets)</param>
        [JsonConstructor]
        public TimeBucketAssetResponseDto(List<string> city, List<string> country, List<string> duration, List<string> fileCreatedAt, List<string> id, List<bool> isFavorite, List<bool> isImage, List<bool> isTrashed, List<string> livePhotoVideoId, List<decimal> localOffsetHours, List<string> ownerId, List<string> projectionType, List<decimal> ratio, List<string> thumbhash, List<AssetVisibility> visibility, Option<List<decimal>?> latitude = default, Option<List<decimal>?> longitude = default, Option<List<List<string>>?> stack = default)
        {
            City = city;
            Country = country;
            Duration = duration;
            FileCreatedAt = fileCreatedAt;
            Id = id;
            IsFavorite = isFavorite;
            IsImage = isImage;
            IsTrashed = isTrashed;
            LivePhotoVideoId = livePhotoVideoId;
            LocalOffsetHours = localOffsetHours;
            OwnerId = ownerId;
            ProjectionType = projectionType;
            Ratio = ratio;
            Thumbhash = thumbhash;
            Visibility = visibility;
            LatitudeOption = latitude;
            LongitudeOption = longitude;
            StackOption = stack;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Array of city names extracted from EXIF GPS data
        /// </summary>
        /// <value>Array of city names extracted from EXIF GPS data</value>
        [JsonPropertyName("city")]
        public List<string> City { get; set; }

        /// <summary>
        /// Array of country names extracted from EXIF GPS data
        /// </summary>
        /// <value>Array of country names extracted from EXIF GPS data</value>
        [JsonPropertyName("country")]
        public List<string> Country { get; set; }

        /// <summary>
        /// Array of video durations in HH:MM:SS format (null for images)
        /// </summary>
        /// <value>Array of video durations in HH:MM:SS format (null for images)</value>
        [JsonPropertyName("duration")]
        public List<string> Duration { get; set; }

        /// <summary>
        /// Array of file creation timestamps in UTC (ISO 8601 format, without timezone)
        /// </summary>
        /// <value>Array of file creation timestamps in UTC (ISO 8601 format, without timezone)</value>
        [JsonPropertyName("fileCreatedAt")]
        public List<string> FileCreatedAt { get; set; }

        /// <summary>
        /// Array of asset IDs in the time bucket
        /// </summary>
        /// <value>Array of asset IDs in the time bucket</value>
        [JsonPropertyName("id")]
        public List<string> Id { get; set; }

        /// <summary>
        /// Array indicating whether each asset is favorited
        /// </summary>
        /// <value>Array indicating whether each asset is favorited</value>
        [JsonPropertyName("isFavorite")]
        public List<bool> IsFavorite { get; set; }

        /// <summary>
        /// Array indicating whether each asset is an image (false for videos)
        /// </summary>
        /// <value>Array indicating whether each asset is an image (false for videos)</value>
        [JsonPropertyName("isImage")]
        public List<bool> IsImage { get; set; }

        /// <summary>
        /// Array indicating whether each asset is in the trash
        /// </summary>
        /// <value>Array indicating whether each asset is in the trash</value>
        [JsonPropertyName("isTrashed")]
        public List<bool> IsTrashed { get; set; }

        /// <summary>
        /// Array of live photo video asset IDs (null for non-live photos)
        /// </summary>
        /// <value>Array of live photo video asset IDs (null for non-live photos)</value>
        [JsonPropertyName("livePhotoVideoId")]
        public List<string> LivePhotoVideoId { get; set; }

        /// <summary>
        /// Array of UTC offset hours at the time each photo was taken. Positive values are east of UTC, negative values are west of UTC. Values may be fractional (e.g., 5.5 for +05:30, -9.75 for -09:45). Applying this offset to &#39;fileCreatedAt&#39; will give you the time the photo was taken from the photographer&#39;s perspective.
        /// </summary>
        /// <value>Array of UTC offset hours at the time each photo was taken. Positive values are east of UTC, negative values are west of UTC. Values may be fractional (e.g., 5.5 for +05:30, -9.75 for -09:45). Applying this offset to &#39;fileCreatedAt&#39; will give you the time the photo was taken from the photographer&#39;s perspective.</value>
        [JsonPropertyName("localOffsetHours")]
        public List<decimal> LocalOffsetHours { get; set; }

        /// <summary>
        /// Array of owner IDs for each asset
        /// </summary>
        /// <value>Array of owner IDs for each asset</value>
        [JsonPropertyName("ownerId")]
        public List<string> OwnerId { get; set; }

        /// <summary>
        /// Array of projection types for 360° content (e.g., \&quot;EQUIRECTANGULAR\&quot;, \&quot;CUBEFACE\&quot;, \&quot;CYLINDRICAL\&quot;)
        /// </summary>
        /// <value>Array of projection types for 360° content (e.g., \&quot;EQUIRECTANGULAR\&quot;, \&quot;CUBEFACE\&quot;, \&quot;CYLINDRICAL\&quot;)</value>
        [JsonPropertyName("projectionType")]
        public List<string> ProjectionType { get; set; }

        /// <summary>
        /// Array of aspect ratios (width/height) for each asset
        /// </summary>
        /// <value>Array of aspect ratios (width/height) for each asset</value>
        [JsonPropertyName("ratio")]
        public List<decimal> Ratio { get; set; }

        /// <summary>
        /// Array of BlurHash strings for generating asset previews (base64 encoded)
        /// </summary>
        /// <value>Array of BlurHash strings for generating asset previews (base64 encoded)</value>
        [JsonPropertyName("thumbhash")]
        public List<string> Thumbhash { get; set; }

        /// <summary>
        /// Array of visibility statuses for each asset (e.g., ARCHIVE, TIMELINE, HIDDEN, LOCKED)
        /// </summary>
        /// <value>Array of visibility statuses for each asset (e.g., ARCHIVE, TIMELINE, HIDDEN, LOCKED)</value>
        [JsonPropertyName("visibility")]
        public List<AssetVisibility> Visibility { get; set; }

        /// <summary>
        /// Used to track the state of Latitude
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<decimal>?> LatitudeOption { get; private set; }

        /// <summary>
        /// Array of latitude coordinates extracted from EXIF GPS data
        /// </summary>
        /// <value>Array of latitude coordinates extracted from EXIF GPS data</value>
        [JsonPropertyName("latitude")]
        public List<decimal>? Latitude { get { return this.LatitudeOption; } set { this.LatitudeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Longitude
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<decimal>?> LongitudeOption { get; private set; }

        /// <summary>
        /// Array of longitude coordinates extracted from EXIF GPS data
        /// </summary>
        /// <value>Array of longitude coordinates extracted from EXIF GPS data</value>
        [JsonPropertyName("longitude")]
        public List<decimal>? Longitude { get { return this.LongitudeOption; } set { this.LongitudeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Stack
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<List<string>>?> StackOption { get; private set; }

        /// <summary>
        /// Array of stack information as [stackId, assetCount] tuples (null for non-stacked assets)
        /// </summary>
        /// <value>Array of stack information as [stackId, assetCount] tuples (null for non-stacked assets)</value>
        [JsonPropertyName("stack")]
        public List<List<string>>? Stack { get { return this.StackOption; } set { this.StackOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TimeBucketAssetResponseDto {\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  FileCreatedAt: ").Append(FileCreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsFavorite: ").Append(IsFavorite).Append("\n");
            sb.Append("  IsImage: ").Append(IsImage).Append("\n");
            sb.Append("  IsTrashed: ").Append(IsTrashed).Append("\n");
            sb.Append("  LivePhotoVideoId: ").Append(LivePhotoVideoId).Append("\n");
            sb.Append("  LocalOffsetHours: ").Append(LocalOffsetHours).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  ProjectionType: ").Append(ProjectionType).Append("\n");
            sb.Append("  Ratio: ").Append(Ratio).Append("\n");
            sb.Append("  Thumbhash: ").Append(Thumbhash).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Stack: ").Append(Stack).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TimeBucketAssetResponseDto" />
    /// </summary>
    public class TimeBucketAssetResponseDtoJsonConverter : JsonConverter<TimeBucketAssetResponseDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="TimeBucketAssetResponseDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TimeBucketAssetResponseDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>?> city = default;
            Option<List<string>?> country = default;
            Option<List<string>?> duration = default;
            Option<List<string>?> fileCreatedAt = default;
            Option<List<string>?> id = default;
            Option<List<bool>?> isFavorite = default;
            Option<List<bool>?> isImage = default;
            Option<List<bool>?> isTrashed = default;
            Option<List<string>?> livePhotoVideoId = default;
            Option<List<decimal>?> localOffsetHours = default;
            Option<List<string>?> ownerId = default;
            Option<List<string>?> projectionType = default;
            Option<List<decimal>?> ratio = default;
            Option<List<string>?> thumbhash = default;
            Option<List<AssetVisibility>?> visibility = default;
            Option<List<decimal>?> latitude = default;
            Option<List<decimal>?> longitude = default;
            Option<List<List<string>>?> stack = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "city":
                            city = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "country":
                            country = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "duration":
                            duration = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "fileCreatedAt":
                            fileCreatedAt = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "isFavorite":
                            isFavorite = new Option<List<bool>?>(JsonSerializer.Deserialize<List<bool>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "isImage":
                            isImage = new Option<List<bool>?>(JsonSerializer.Deserialize<List<bool>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "isTrashed":
                            isTrashed = new Option<List<bool>?>(JsonSerializer.Deserialize<List<bool>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "livePhotoVideoId":
                            livePhotoVideoId = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "localOffsetHours":
                            localOffsetHours = new Option<List<decimal>?>(JsonSerializer.Deserialize<List<decimal>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "ownerId":
                            ownerId = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "projectionType":
                            projectionType = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "ratio":
                            ratio = new Option<List<decimal>?>(JsonSerializer.Deserialize<List<decimal>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "thumbhash":
                            thumbhash = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "visibility":
                            visibility = new Option<List<AssetVisibility>?>(JsonSerializer.Deserialize<List<AssetVisibility>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "latitude":
                            latitude = new Option<List<decimal>?>(JsonSerializer.Deserialize<List<decimal>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "longitude":
                            longitude = new Option<List<decimal>?>(JsonSerializer.Deserialize<List<decimal>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "stack":
                            stack = new Option<List<List<string>>?>(JsonSerializer.Deserialize<List<List<string>>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!city.IsSet)
                throw new ArgumentException("Property is required for class TimeBucketAssetResponseDto.", nameof(city));

            if (!country.IsSet)
                throw new ArgumentException("Property is required for class TimeBucketAssetResponseDto.", nameof(country));

            if (!duration.IsSet)
                throw new ArgumentException("Property is required for class TimeBucketAssetResponseDto.", nameof(duration));

            if (!fileCreatedAt.IsSet)
                throw new ArgumentException("Property is required for class TimeBucketAssetResponseDto.", nameof(fileCreatedAt));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class TimeBucketAssetResponseDto.", nameof(id));

            if (!isFavorite.IsSet)
                throw new ArgumentException("Property is required for class TimeBucketAssetResponseDto.", nameof(isFavorite));

            if (!isImage.IsSet)
                throw new ArgumentException("Property is required for class TimeBucketAssetResponseDto.", nameof(isImage));

            if (!isTrashed.IsSet)
                throw new ArgumentException("Property is required for class TimeBucketAssetResponseDto.", nameof(isTrashed));

            if (!livePhotoVideoId.IsSet)
                throw new ArgumentException("Property is required for class TimeBucketAssetResponseDto.", nameof(livePhotoVideoId));

            if (!localOffsetHours.IsSet)
                throw new ArgumentException("Property is required for class TimeBucketAssetResponseDto.", nameof(localOffsetHours));

            if (!ownerId.IsSet)
                throw new ArgumentException("Property is required for class TimeBucketAssetResponseDto.", nameof(ownerId));

            if (!projectionType.IsSet)
                throw new ArgumentException("Property is required for class TimeBucketAssetResponseDto.", nameof(projectionType));

            if (!ratio.IsSet)
                throw new ArgumentException("Property is required for class TimeBucketAssetResponseDto.", nameof(ratio));

            if (!thumbhash.IsSet)
                throw new ArgumentException("Property is required for class TimeBucketAssetResponseDto.", nameof(thumbhash));

            if (!visibility.IsSet)
                throw new ArgumentException("Property is required for class TimeBucketAssetResponseDto.", nameof(visibility));

            if (city.IsSet && city.Value == null)
                throw new ArgumentNullException(nameof(city), "Property is not nullable for class TimeBucketAssetResponseDto.");

            if (country.IsSet && country.Value == null)
                throw new ArgumentNullException(nameof(country), "Property is not nullable for class TimeBucketAssetResponseDto.");

            if (duration.IsSet && duration.Value == null)
                throw new ArgumentNullException(nameof(duration), "Property is not nullable for class TimeBucketAssetResponseDto.");

            if (fileCreatedAt.IsSet && fileCreatedAt.Value == null)
                throw new ArgumentNullException(nameof(fileCreatedAt), "Property is not nullable for class TimeBucketAssetResponseDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class TimeBucketAssetResponseDto.");

            if (isFavorite.IsSet && isFavorite.Value == null)
                throw new ArgumentNullException(nameof(isFavorite), "Property is not nullable for class TimeBucketAssetResponseDto.");

            if (isImage.IsSet && isImage.Value == null)
                throw new ArgumentNullException(nameof(isImage), "Property is not nullable for class TimeBucketAssetResponseDto.");

            if (isTrashed.IsSet && isTrashed.Value == null)
                throw new ArgumentNullException(nameof(isTrashed), "Property is not nullable for class TimeBucketAssetResponseDto.");

            if (livePhotoVideoId.IsSet && livePhotoVideoId.Value == null)
                throw new ArgumentNullException(nameof(livePhotoVideoId), "Property is not nullable for class TimeBucketAssetResponseDto.");

            if (localOffsetHours.IsSet && localOffsetHours.Value == null)
                throw new ArgumentNullException(nameof(localOffsetHours), "Property is not nullable for class TimeBucketAssetResponseDto.");

            if (ownerId.IsSet && ownerId.Value == null)
                throw new ArgumentNullException(nameof(ownerId), "Property is not nullable for class TimeBucketAssetResponseDto.");

            if (projectionType.IsSet && projectionType.Value == null)
                throw new ArgumentNullException(nameof(projectionType), "Property is not nullable for class TimeBucketAssetResponseDto.");

            if (ratio.IsSet && ratio.Value == null)
                throw new ArgumentNullException(nameof(ratio), "Property is not nullable for class TimeBucketAssetResponseDto.");

            if (thumbhash.IsSet && thumbhash.Value == null)
                throw new ArgumentNullException(nameof(thumbhash), "Property is not nullable for class TimeBucketAssetResponseDto.");

            if (visibility.IsSet && visibility.Value == null)
                throw new ArgumentNullException(nameof(visibility), "Property is not nullable for class TimeBucketAssetResponseDto.");

            if (latitude.IsSet && latitude.Value == null)
                throw new ArgumentNullException(nameof(latitude), "Property is not nullable for class TimeBucketAssetResponseDto.");

            if (longitude.IsSet && longitude.Value == null)
                throw new ArgumentNullException(nameof(longitude), "Property is not nullable for class TimeBucketAssetResponseDto.");

            if (stack.IsSet && stack.Value == null)
                throw new ArgumentNullException(nameof(stack), "Property is not nullable for class TimeBucketAssetResponseDto.");

            return new TimeBucketAssetResponseDto(city.Value!, country.Value!, duration.Value!, fileCreatedAt.Value!, id.Value!, isFavorite.Value!, isImage.Value!, isTrashed.Value!, livePhotoVideoId.Value!, localOffsetHours.Value!, ownerId.Value!, projectionType.Value!, ratio.Value!, thumbhash.Value!, visibility.Value!, latitude, longitude, stack);
        }

        /// <summary>
        /// Serializes a <see cref="TimeBucketAssetResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="timeBucketAssetResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TimeBucketAssetResponseDto timeBucketAssetResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, timeBucketAssetResponseDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TimeBucketAssetResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="timeBucketAssetResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TimeBucketAssetResponseDto timeBucketAssetResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (timeBucketAssetResponseDto.City == null)
                throw new ArgumentNullException(nameof(timeBucketAssetResponseDto.City), "Property is required for class TimeBucketAssetResponseDto.");

            if (timeBucketAssetResponseDto.Country == null)
                throw new ArgumentNullException(nameof(timeBucketAssetResponseDto.Country), "Property is required for class TimeBucketAssetResponseDto.");

            if (timeBucketAssetResponseDto.Duration == null)
                throw new ArgumentNullException(nameof(timeBucketAssetResponseDto.Duration), "Property is required for class TimeBucketAssetResponseDto.");

            if (timeBucketAssetResponseDto.FileCreatedAt == null)
                throw new ArgumentNullException(nameof(timeBucketAssetResponseDto.FileCreatedAt), "Property is required for class TimeBucketAssetResponseDto.");

            if (timeBucketAssetResponseDto.Id == null)
                throw new ArgumentNullException(nameof(timeBucketAssetResponseDto.Id), "Property is required for class TimeBucketAssetResponseDto.");

            if (timeBucketAssetResponseDto.IsFavorite == null)
                throw new ArgumentNullException(nameof(timeBucketAssetResponseDto.IsFavorite), "Property is required for class TimeBucketAssetResponseDto.");

            if (timeBucketAssetResponseDto.IsImage == null)
                throw new ArgumentNullException(nameof(timeBucketAssetResponseDto.IsImage), "Property is required for class TimeBucketAssetResponseDto.");

            if (timeBucketAssetResponseDto.IsTrashed == null)
                throw new ArgumentNullException(nameof(timeBucketAssetResponseDto.IsTrashed), "Property is required for class TimeBucketAssetResponseDto.");

            if (timeBucketAssetResponseDto.LivePhotoVideoId == null)
                throw new ArgumentNullException(nameof(timeBucketAssetResponseDto.LivePhotoVideoId), "Property is required for class TimeBucketAssetResponseDto.");

            if (timeBucketAssetResponseDto.LocalOffsetHours == null)
                throw new ArgumentNullException(nameof(timeBucketAssetResponseDto.LocalOffsetHours), "Property is required for class TimeBucketAssetResponseDto.");

            if (timeBucketAssetResponseDto.OwnerId == null)
                throw new ArgumentNullException(nameof(timeBucketAssetResponseDto.OwnerId), "Property is required for class TimeBucketAssetResponseDto.");

            if (timeBucketAssetResponseDto.ProjectionType == null)
                throw new ArgumentNullException(nameof(timeBucketAssetResponseDto.ProjectionType), "Property is required for class TimeBucketAssetResponseDto.");

            if (timeBucketAssetResponseDto.Ratio == null)
                throw new ArgumentNullException(nameof(timeBucketAssetResponseDto.Ratio), "Property is required for class TimeBucketAssetResponseDto.");

            if (timeBucketAssetResponseDto.Thumbhash == null)
                throw new ArgumentNullException(nameof(timeBucketAssetResponseDto.Thumbhash), "Property is required for class TimeBucketAssetResponseDto.");

            if (timeBucketAssetResponseDto.Visibility == null)
                throw new ArgumentNullException(nameof(timeBucketAssetResponseDto.Visibility), "Property is required for class TimeBucketAssetResponseDto.");

            if (timeBucketAssetResponseDto.LatitudeOption.IsSet && timeBucketAssetResponseDto.Latitude == null)
                throw new ArgumentNullException(nameof(timeBucketAssetResponseDto.Latitude), "Property is required for class TimeBucketAssetResponseDto.");

            if (timeBucketAssetResponseDto.LongitudeOption.IsSet && timeBucketAssetResponseDto.Longitude == null)
                throw new ArgumentNullException(nameof(timeBucketAssetResponseDto.Longitude), "Property is required for class TimeBucketAssetResponseDto.");

            if (timeBucketAssetResponseDto.StackOption.IsSet && timeBucketAssetResponseDto.Stack == null)
                throw new ArgumentNullException(nameof(timeBucketAssetResponseDto.Stack), "Property is required for class TimeBucketAssetResponseDto.");

            writer.WritePropertyName("city");
            JsonSerializer.Serialize(writer, timeBucketAssetResponseDto.City, jsonSerializerOptions);
            writer.WritePropertyName("country");
            JsonSerializer.Serialize(writer, timeBucketAssetResponseDto.Country, jsonSerializerOptions);
            writer.WritePropertyName("duration");
            JsonSerializer.Serialize(writer, timeBucketAssetResponseDto.Duration, jsonSerializerOptions);
            writer.WritePropertyName("fileCreatedAt");
            JsonSerializer.Serialize(writer, timeBucketAssetResponseDto.FileCreatedAt, jsonSerializerOptions);
            writer.WritePropertyName("id");
            JsonSerializer.Serialize(writer, timeBucketAssetResponseDto.Id, jsonSerializerOptions);
            writer.WritePropertyName("isFavorite");
            JsonSerializer.Serialize(writer, timeBucketAssetResponseDto.IsFavorite, jsonSerializerOptions);
            writer.WritePropertyName("isImage");
            JsonSerializer.Serialize(writer, timeBucketAssetResponseDto.IsImage, jsonSerializerOptions);
            writer.WritePropertyName("isTrashed");
            JsonSerializer.Serialize(writer, timeBucketAssetResponseDto.IsTrashed, jsonSerializerOptions);
            writer.WritePropertyName("livePhotoVideoId");
            JsonSerializer.Serialize(writer, timeBucketAssetResponseDto.LivePhotoVideoId, jsonSerializerOptions);
            writer.WritePropertyName("localOffsetHours");
            JsonSerializer.Serialize(writer, timeBucketAssetResponseDto.LocalOffsetHours, jsonSerializerOptions);
            writer.WritePropertyName("ownerId");
            JsonSerializer.Serialize(writer, timeBucketAssetResponseDto.OwnerId, jsonSerializerOptions);
            writer.WritePropertyName("projectionType");
            JsonSerializer.Serialize(writer, timeBucketAssetResponseDto.ProjectionType, jsonSerializerOptions);
            writer.WritePropertyName("ratio");
            JsonSerializer.Serialize(writer, timeBucketAssetResponseDto.Ratio, jsonSerializerOptions);
            writer.WritePropertyName("thumbhash");
            JsonSerializer.Serialize(writer, timeBucketAssetResponseDto.Thumbhash, jsonSerializerOptions);
            writer.WritePropertyName("visibility");
            JsonSerializer.Serialize(writer, timeBucketAssetResponseDto.Visibility, jsonSerializerOptions);
            if (timeBucketAssetResponseDto.LatitudeOption.IsSet)
            {
                writer.WritePropertyName("latitude");
                JsonSerializer.Serialize(writer, timeBucketAssetResponseDto.Latitude, jsonSerializerOptions);
            }
            if (timeBucketAssetResponseDto.LongitudeOption.IsSet)
            {
                writer.WritePropertyName("longitude");
                JsonSerializer.Serialize(writer, timeBucketAssetResponseDto.Longitude, jsonSerializerOptions);
            }
            if (timeBucketAssetResponseDto.StackOption.IsSet)
            {
                writer.WritePropertyName("stack");
                JsonSerializer.Serialize(writer, timeBucketAssetResponseDto.Stack, jsonSerializerOptions);
            }
        }
    }
}
