// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ServerVersionResponseDto
    /// </summary>
    public partial class ServerVersionResponseDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerVersionResponseDto" /> class.
        /// </summary>
        /// <param name="major">major</param>
        /// <param name="minor">minor</param>
        /// <param name="patch">patch</param>
        [JsonConstructor]
        public ServerVersionResponseDto(int major, int minor, int patch)
        {
            Major = major;
            Minor = minor;
            Patch = patch;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Major
        /// </summary>
        [JsonPropertyName("major")]
        public int Major { get; set; }

        /// <summary>
        /// Gets or Sets Minor
        /// </summary>
        [JsonPropertyName("minor")]
        public int Minor { get; set; }

        /// <summary>
        /// Gets or Sets Patch
        /// </summary>
        [JsonPropertyName("patch")]
        public int Patch { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServerVersionResponseDto {\n");
            sb.Append("  Major: ").Append(Major).Append("\n");
            sb.Append("  Minor: ").Append(Minor).Append("\n");
            sb.Append("  Patch: ").Append(Patch).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ServerVersionResponseDto" />
    /// </summary>
    public class ServerVersionResponseDtoJsonConverter : JsonConverter<ServerVersionResponseDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="ServerVersionResponseDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ServerVersionResponseDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> major = default;
            Option<int?> minor = default;
            Option<int?> patch = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "major":
                            major = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "minor":
                            minor = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "patch":
                            patch = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!major.IsSet)
                throw new ArgumentException("Property is required for class ServerVersionResponseDto.", nameof(major));

            if (!minor.IsSet)
                throw new ArgumentException("Property is required for class ServerVersionResponseDto.", nameof(minor));

            if (!patch.IsSet)
                throw new ArgumentException("Property is required for class ServerVersionResponseDto.", nameof(patch));

            if (major.IsSet && major.Value == null)
                throw new ArgumentNullException(nameof(major), "Property is not nullable for class ServerVersionResponseDto.");

            if (minor.IsSet && minor.Value == null)
                throw new ArgumentNullException(nameof(minor), "Property is not nullable for class ServerVersionResponseDto.");

            if (patch.IsSet && patch.Value == null)
                throw new ArgumentNullException(nameof(patch), "Property is not nullable for class ServerVersionResponseDto.");

            return new ServerVersionResponseDto(major.Value!.Value!, minor.Value!.Value!, patch.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ServerVersionResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="serverVersionResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ServerVersionResponseDto serverVersionResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, serverVersionResponseDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ServerVersionResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="serverVersionResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ServerVersionResponseDto serverVersionResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("major", serverVersionResponseDto.Major);

            writer.WriteNumber("minor", serverVersionResponseDto.Minor);

            writer.WriteNumber("patch", serverVersionResponseDto.Patch);
        }
    }
}
