// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AvatarUpdate
    /// </summary>
    public partial class AvatarUpdate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AvatarUpdate" /> class.
        /// </summary>
        /// <param name="color">color</param>
        [JsonConstructor]
        public AvatarUpdate(Option<UserAvatarColor?> color = default)
        {
            ColorOption = color;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Color
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<UserAvatarColor?> ColorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [JsonPropertyName("color")]
        public UserAvatarColor? Color { get { return this.ColorOption; } set { this.ColorOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AvatarUpdate {\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AvatarUpdate" />
    /// </summary>
    public class AvatarUpdateJsonConverter : JsonConverter<AvatarUpdate>
    {
        /// <summary>
        /// Deserializes json to <see cref="AvatarUpdate" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AvatarUpdate Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<UserAvatarColor?> color = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "color":
                            string? colorRawValue = utf8JsonReader.GetString();
                            if (colorRawValue != null)
                                color = new Option<UserAvatarColor?>(UserAvatarColorValueConverter.FromStringOrDefault(colorRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (color.IsSet && color.Value == null)
                throw new ArgumentNullException(nameof(color), "Property is not nullable for class AvatarUpdate.");

            return new AvatarUpdate(color);
        }

        /// <summary>
        /// Serializes a <see cref="AvatarUpdate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="avatarUpdate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AvatarUpdate avatarUpdate, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, avatarUpdate, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AvatarUpdate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="avatarUpdate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AvatarUpdate avatarUpdate, JsonSerializerOptions jsonSerializerOptions)
        {
            if (avatarUpdate.ColorOption.IsSet)
            {
                var colorRawValue = UserAvatarColorValueConverter.ToJsonValue(avatarUpdate.Color!.Value);
                writer.WriteString("color", colorRawValue);
            }
        }
    }
}
