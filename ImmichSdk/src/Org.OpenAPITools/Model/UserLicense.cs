// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// UserLicense
    /// </summary>
    public partial class UserLicense : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserLicense" /> class.
        /// </summary>
        /// <param name="activatedAt">activatedAt</param>
        /// <param name="activationKey">activationKey</param>
        /// <param name="licenseKey">licenseKey</param>
        [JsonConstructor]
        public UserLicense(DateTime activatedAt, string activationKey, string licenseKey)
        {
            ActivatedAt = activatedAt;
            ActivationKey = activationKey;
            LicenseKey = licenseKey;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets ActivatedAt
        /// </summary>
        [JsonPropertyName("activatedAt")]
        public DateTime ActivatedAt { get; set; }

        /// <summary>
        /// Gets or Sets ActivationKey
        /// </summary>
        [JsonPropertyName("activationKey")]
        public string ActivationKey { get; set; }

        /// <summary>
        /// Gets or Sets LicenseKey
        /// </summary>
        [JsonPropertyName("licenseKey")]
        public string LicenseKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserLicense {\n");
            sb.Append("  ActivatedAt: ").Append(ActivatedAt).Append("\n");
            sb.Append("  ActivationKey: ").Append(ActivationKey).Append("\n");
            sb.Append("  LicenseKey: ").Append(LicenseKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserLicense" />
    /// </summary>
    public class UserLicenseJsonConverter : JsonConverter<UserLicense>
    {
        /// <summary>
        /// The format to use to serialize ActivatedAt
        /// </summary>
        public static string ActivatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="UserLicense" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UserLicense Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> activatedAt = default;
            Option<string?> activationKey = default;
            Option<string?> licenseKey = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "activatedAt":
                            activatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "activationKey":
                            activationKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "licenseKey":
                            licenseKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!activatedAt.IsSet)
                throw new ArgumentException("Property is required for class UserLicense.", nameof(activatedAt));

            if (!activationKey.IsSet)
                throw new ArgumentException("Property is required for class UserLicense.", nameof(activationKey));

            if (!licenseKey.IsSet)
                throw new ArgumentException("Property is required for class UserLicense.", nameof(licenseKey));

            if (activatedAt.IsSet && activatedAt.Value == null)
                throw new ArgumentNullException(nameof(activatedAt), "Property is not nullable for class UserLicense.");

            if (activationKey.IsSet && activationKey.Value == null)
                throw new ArgumentNullException(nameof(activationKey), "Property is not nullable for class UserLicense.");

            if (licenseKey.IsSet && licenseKey.Value == null)
                throw new ArgumentNullException(nameof(licenseKey), "Property is not nullable for class UserLicense.");

            return new UserLicense(activatedAt.Value!.Value!, activationKey.Value!, licenseKey.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="UserLicense" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userLicense"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UserLicense userLicense, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, userLicense, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UserLicense" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userLicense"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UserLicense userLicense, JsonSerializerOptions jsonSerializerOptions)
        {
            if (userLicense.ActivationKey == null)
                throw new ArgumentNullException(nameof(userLicense.ActivationKey), "Property is required for class UserLicense.");

            if (userLicense.LicenseKey == null)
                throw new ArgumentNullException(nameof(userLicense.LicenseKey), "Property is required for class UserLicense.");

            writer.WriteString("activatedAt", userLicense.ActivatedAt.ToString(ActivatedAtFormat));

            writer.WriteString("activationKey", userLicense.ActivationKey);

            writer.WriteString("licenseKey", userLicense.LicenseKey);
        }
    }
}
