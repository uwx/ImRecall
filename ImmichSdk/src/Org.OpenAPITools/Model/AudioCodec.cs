// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines AudioCodec
    /// </summary>
    public enum AudioCodec
    {
        /// <summary>
        /// Enum Mp3 for value: mp3
        /// </summary>
        Mp3 = 1,

        /// <summary>
        /// Enum Aac for value: aac
        /// </summary>
        Aac = 2,

        /// <summary>
        /// Enum Libopus for value: libopus
        /// </summary>
        Libopus = 3,

        /// <summary>
        /// Enum PcmS16le for value: pcm_s16le
        /// </summary>
        PcmS16le = 4
    }

    /// <summary>
    /// Converts <see cref="AudioCodec"/> to and from the JSON value
    /// </summary>
    public static class AudioCodecValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="AudioCodec"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AudioCodec FromString(string value)
        {
            if (value.Equals("mp3"))
                return AudioCodec.Mp3;

            if (value.Equals("aac"))
                return AudioCodec.Aac;

            if (value.Equals("libopus"))
                return AudioCodec.Libopus;

            if (value.Equals("pcm_s16le"))
                return AudioCodec.PcmS16le;

            throw new NotImplementedException($"Could not convert value to type AudioCodec: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="AudioCodec"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AudioCodec? FromStringOrDefault(string value)
        {
            if (value.Equals("mp3"))
                return AudioCodec.Mp3;

            if (value.Equals("aac"))
                return AudioCodec.Aac;

            if (value.Equals("libopus"))
                return AudioCodec.Libopus;

            if (value.Equals("pcm_s16le"))
                return AudioCodec.PcmS16le;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AudioCodec"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(AudioCodec value)
        {
            if (value == AudioCodec.Mp3)
                return "mp3";

            if (value == AudioCodec.Aac)
                return "aac";

            if (value == AudioCodec.Libopus)
                return "libopus";

            if (value == AudioCodec.PcmS16le)
                return "pcm_s16le";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AudioCodec"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class AudioCodecJsonConverter : JsonConverter<AudioCodec>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override AudioCodec Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            AudioCodec? result = rawValue == null
                ? null
                : AudioCodecValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the AudioCodec to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="audioCodec"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, AudioCodec audioCodec, JsonSerializerOptions options)
        {
            writer.WriteStringValue(AudioCodecValueConverter.ToJsonValue(audioCodec).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AudioCodec"/>
    /// </summary>
    public class AudioCodecNullableJsonConverter : JsonConverter<AudioCodec?>
    {
        /// <summary>
        /// Returns a AudioCodec from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override AudioCodec? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            AudioCodec? result = rawValue == null
                ? null
                : AudioCodecValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the AudioCodec to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="audioCodec"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, AudioCodec? audioCodec, JsonSerializerOptions options)
        {
            writer.WriteStringValue(audioCodec.HasValue ? AudioCodecValueConverter.ToJsonValue(audioCodec.Value).ToString() : "null");
        }
    }
}
