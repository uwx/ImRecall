// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SyncAssetV1
    /// </summary>
    public partial class SyncAssetV1 : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SyncAssetV1" /> class.
        /// </summary>
        /// <param name="checksum">checksum</param>
        /// <param name="id">id</param>
        /// <param name="isFavorite">isFavorite</param>
        /// <param name="originalFileName">originalFileName</param>
        /// <param name="ownerId">ownerId</param>
        /// <param name="type">type</param>
        /// <param name="visibility">visibility</param>
        /// <param name="deletedAt">deletedAt</param>
        /// <param name="duration">duration</param>
        /// <param name="fileCreatedAt">fileCreatedAt</param>
        /// <param name="fileModifiedAt">fileModifiedAt</param>
        /// <param name="libraryId">libraryId</param>
        /// <param name="livePhotoVideoId">livePhotoVideoId</param>
        /// <param name="localDateTime">localDateTime</param>
        /// <param name="stackId">stackId</param>
        /// <param name="thumbhash">thumbhash</param>
        [JsonConstructor]
        public SyncAssetV1(string checksum, string id, bool isFavorite, string originalFileName, string ownerId, AssetTypeEnum type, AssetVisibility visibility, DateTime? deletedAt = default, string? duration = default, DateTime? fileCreatedAt = default, DateTime? fileModifiedAt = default, string? libraryId = default, string? livePhotoVideoId = default, DateTime? localDateTime = default, string? stackId = default, string? thumbhash = default)
        {
            Checksum = checksum;
            Id = id;
            IsFavorite = isFavorite;
            OriginalFileName = originalFileName;
            OwnerId = ownerId;
            Type = type;
            Visibility = visibility;
            DeletedAt = deletedAt;
            Duration = duration;
            FileCreatedAt = fileCreatedAt;
            FileModifiedAt = fileModifiedAt;
            LibraryId = libraryId;
            LivePhotoVideoId = livePhotoVideoId;
            LocalDateTime = localDateTime;
            StackId = stackId;
            Thumbhash = thumbhash;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public AssetTypeEnum Type { get; set; }

        /// <summary>
        /// Gets or Sets Visibility
        /// </summary>
        [JsonPropertyName("visibility")]
        public AssetVisibility Visibility { get; set; }

        /// <summary>
        /// Gets or Sets Checksum
        /// </summary>
        [JsonPropertyName("checksum")]
        public string Checksum { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IsFavorite
        /// </summary>
        [JsonPropertyName("isFavorite")]
        public bool IsFavorite { get; set; }

        /// <summary>
        /// Gets or Sets OriginalFileName
        /// </summary>
        [JsonPropertyName("originalFileName")]
        public string OriginalFileName { get; set; }

        /// <summary>
        /// Gets or Sets OwnerId
        /// </summary>
        [JsonPropertyName("ownerId")]
        public string OwnerId { get; set; }

        /// <summary>
        /// Gets or Sets DeletedAt
        /// </summary>
        [JsonPropertyName("deletedAt")]
        public DateTime? DeletedAt { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [JsonPropertyName("duration")]
        public string? Duration { get; set; }

        /// <summary>
        /// Gets or Sets FileCreatedAt
        /// </summary>
        [JsonPropertyName("fileCreatedAt")]
        public DateTime? FileCreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets FileModifiedAt
        /// </summary>
        [JsonPropertyName("fileModifiedAt")]
        public DateTime? FileModifiedAt { get; set; }

        /// <summary>
        /// Gets or Sets LibraryId
        /// </summary>
        [JsonPropertyName("libraryId")]
        public string? LibraryId { get; set; }

        /// <summary>
        /// Gets or Sets LivePhotoVideoId
        /// </summary>
        [JsonPropertyName("livePhotoVideoId")]
        public string? LivePhotoVideoId { get; set; }

        /// <summary>
        /// Gets or Sets LocalDateTime
        /// </summary>
        [JsonPropertyName("localDateTime")]
        public DateTime? LocalDateTime { get; set; }

        /// <summary>
        /// Gets or Sets StackId
        /// </summary>
        [JsonPropertyName("stackId")]
        public string? StackId { get; set; }

        /// <summary>
        /// Gets or Sets Thumbhash
        /// </summary>
        [JsonPropertyName("thumbhash")]
        public string? Thumbhash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SyncAssetV1 {\n");
            sb.Append("  Checksum: ").Append(Checksum).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsFavorite: ").Append(IsFavorite).Append("\n");
            sb.Append("  OriginalFileName: ").Append(OriginalFileName).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("  DeletedAt: ").Append(DeletedAt).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  FileCreatedAt: ").Append(FileCreatedAt).Append("\n");
            sb.Append("  FileModifiedAt: ").Append(FileModifiedAt).Append("\n");
            sb.Append("  LibraryId: ").Append(LibraryId).Append("\n");
            sb.Append("  LivePhotoVideoId: ").Append(LivePhotoVideoId).Append("\n");
            sb.Append("  LocalDateTime: ").Append(LocalDateTime).Append("\n");
            sb.Append("  StackId: ").Append(StackId).Append("\n");
            sb.Append("  Thumbhash: ").Append(Thumbhash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SyncAssetV1" />
    /// </summary>
    public class SyncAssetV1JsonConverter : JsonConverter<SyncAssetV1>
    {
        /// <summary>
        /// The format to use to serialize DeletedAt
        /// </summary>
        public static string DeletedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize FileCreatedAt
        /// </summary>
        public static string FileCreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize FileModifiedAt
        /// </summary>
        public static string FileModifiedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize LocalDateTime
        /// </summary>
        public static string LocalDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="SyncAssetV1" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SyncAssetV1 Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> checksum = default;
            Option<string?> id = default;
            Option<bool?> isFavorite = default;
            Option<string?> originalFileName = default;
            Option<string?> ownerId = default;
            Option<AssetTypeEnum?> type = default;
            Option<AssetVisibility?> visibility = default;
            Option<DateTime?> deletedAt = default;
            Option<string?> duration = default;
            Option<DateTime?> fileCreatedAt = default;
            Option<DateTime?> fileModifiedAt = default;
            Option<string?> libraryId = default;
            Option<string?> livePhotoVideoId = default;
            Option<DateTime?> localDateTime = default;
            Option<string?> stackId = default;
            Option<string?> thumbhash = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "checksum":
                            checksum = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "isFavorite":
                            isFavorite = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "originalFileName":
                            originalFileName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ownerId":
                            ownerId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<AssetTypeEnum?>(AssetTypeEnumValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "visibility":
                            string? visibilityRawValue = utf8JsonReader.GetString();
                            if (visibilityRawValue != null)
                                visibility = new Option<AssetVisibility?>(AssetVisibilityValueConverter.FromStringOrDefault(visibilityRawValue));
                            break;
                        case "deletedAt":
                            deletedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "duration":
                            duration = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "fileCreatedAt":
                            fileCreatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "fileModifiedAt":
                            fileModifiedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "libraryId":
                            libraryId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "livePhotoVideoId":
                            livePhotoVideoId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "localDateTime":
                            localDateTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "stackId":
                            stackId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "thumbhash":
                            thumbhash = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!checksum.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetV1.", nameof(checksum));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetV1.", nameof(id));

            if (!isFavorite.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetV1.", nameof(isFavorite));

            if (!originalFileName.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetV1.", nameof(originalFileName));

            if (!ownerId.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetV1.", nameof(ownerId));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetV1.", nameof(type));

            if (!visibility.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetV1.", nameof(visibility));

            if (!deletedAt.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetV1.", nameof(deletedAt));

            if (!duration.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetV1.", nameof(duration));

            if (!fileCreatedAt.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetV1.", nameof(fileCreatedAt));

            if (!fileModifiedAt.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetV1.", nameof(fileModifiedAt));

            if (!libraryId.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetV1.", nameof(libraryId));

            if (!livePhotoVideoId.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetV1.", nameof(livePhotoVideoId));

            if (!localDateTime.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetV1.", nameof(localDateTime));

            if (!stackId.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetV1.", nameof(stackId));

            if (!thumbhash.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetV1.", nameof(thumbhash));

            if (checksum.IsSet && checksum.Value == null)
                throw new ArgumentNullException(nameof(checksum), "Property is not nullable for class SyncAssetV1.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class SyncAssetV1.");

            if (isFavorite.IsSet && isFavorite.Value == null)
                throw new ArgumentNullException(nameof(isFavorite), "Property is not nullable for class SyncAssetV1.");

            if (originalFileName.IsSet && originalFileName.Value == null)
                throw new ArgumentNullException(nameof(originalFileName), "Property is not nullable for class SyncAssetV1.");

            if (ownerId.IsSet && ownerId.Value == null)
                throw new ArgumentNullException(nameof(ownerId), "Property is not nullable for class SyncAssetV1.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class SyncAssetV1.");

            if (visibility.IsSet && visibility.Value == null)
                throw new ArgumentNullException(nameof(visibility), "Property is not nullable for class SyncAssetV1.");

            return new SyncAssetV1(checksum.Value!, id.Value!, isFavorite.Value!.Value!, originalFileName.Value!, ownerId.Value!, type.Value!.Value!, visibility.Value!.Value!, deletedAt.Value!, duration.Value!, fileCreatedAt.Value!, fileModifiedAt.Value!, libraryId.Value!, livePhotoVideoId.Value!, localDateTime.Value!, stackId.Value!, thumbhash.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="SyncAssetV1" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="syncAssetV1"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SyncAssetV1 syncAssetV1, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, syncAssetV1, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SyncAssetV1" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="syncAssetV1"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SyncAssetV1 syncAssetV1, JsonSerializerOptions jsonSerializerOptions)
        {
            if (syncAssetV1.Checksum == null)
                throw new ArgumentNullException(nameof(syncAssetV1.Checksum), "Property is required for class SyncAssetV1.");

            if (syncAssetV1.Id == null)
                throw new ArgumentNullException(nameof(syncAssetV1.Id), "Property is required for class SyncAssetV1.");

            if (syncAssetV1.OriginalFileName == null)
                throw new ArgumentNullException(nameof(syncAssetV1.OriginalFileName), "Property is required for class SyncAssetV1.");

            if (syncAssetV1.OwnerId == null)
                throw new ArgumentNullException(nameof(syncAssetV1.OwnerId), "Property is required for class SyncAssetV1.");

            writer.WriteString("checksum", syncAssetV1.Checksum);

            writer.WriteString("id", syncAssetV1.Id);

            writer.WriteBoolean("isFavorite", syncAssetV1.IsFavorite);

            writer.WriteString("originalFileName", syncAssetV1.OriginalFileName);

            writer.WriteString("ownerId", syncAssetV1.OwnerId);

            var typeRawValue = AssetTypeEnumValueConverter.ToJsonValue(syncAssetV1.Type);
            writer.WriteString("type", typeRawValue);

            var visibilityRawValue = AssetVisibilityValueConverter.ToJsonValue(syncAssetV1.Visibility);
            writer.WriteString("visibility", visibilityRawValue);

            if (syncAssetV1.DeletedAt != null)
                writer.WriteString("deletedAt", syncAssetV1.DeletedAt.Value.ToString(DeletedAtFormat));
            else
                writer.WriteNull("deletedAt");

            if (syncAssetV1.Duration != null)
                writer.WriteString("duration", syncAssetV1.Duration);
            else
                writer.WriteNull("duration");

            if (syncAssetV1.FileCreatedAt != null)
                writer.WriteString("fileCreatedAt", syncAssetV1.FileCreatedAt.Value.ToString(FileCreatedAtFormat));
            else
                writer.WriteNull("fileCreatedAt");

            if (syncAssetV1.FileModifiedAt != null)
                writer.WriteString("fileModifiedAt", syncAssetV1.FileModifiedAt.Value.ToString(FileModifiedAtFormat));
            else
                writer.WriteNull("fileModifiedAt");

            if (syncAssetV1.LibraryId != null)
                writer.WriteString("libraryId", syncAssetV1.LibraryId);
            else
                writer.WriteNull("libraryId");

            if (syncAssetV1.LivePhotoVideoId != null)
                writer.WriteString("livePhotoVideoId", syncAssetV1.LivePhotoVideoId);
            else
                writer.WriteNull("livePhotoVideoId");

            if (syncAssetV1.LocalDateTime != null)
                writer.WriteString("localDateTime", syncAssetV1.LocalDateTime.Value.ToString(LocalDateTimeFormat));
            else
                writer.WriteNull("localDateTime");

            if (syncAssetV1.StackId != null)
                writer.WriteString("stackId", syncAssetV1.StackId);
            else
                writer.WriteNull("stackId");

            if (syncAssetV1.Thumbhash != null)
                writer.WriteString("thumbhash", syncAssetV1.Thumbhash);
            else
                writer.WriteNull("thumbhash");
        }
    }
}
