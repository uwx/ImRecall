// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DownloadResponseDto
    /// </summary>
    public partial class DownloadResponseDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DownloadResponseDto" /> class.
        /// </summary>
        /// <param name="archives">archives</param>
        /// <param name="totalSize">totalSize</param>
        [JsonConstructor]
        public DownloadResponseDto(List<DownloadArchiveInfo> archives, int totalSize)
        {
            Archives = archives;
            TotalSize = totalSize;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Archives
        /// </summary>
        [JsonPropertyName("archives")]
        public List<DownloadArchiveInfo> Archives { get; set; }

        /// <summary>
        /// Gets or Sets TotalSize
        /// </summary>
        [JsonPropertyName("totalSize")]
        public int TotalSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DownloadResponseDto {\n");
            sb.Append("  Archives: ").Append(Archives).Append("\n");
            sb.Append("  TotalSize: ").Append(TotalSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DownloadResponseDto" />
    /// </summary>
    public class DownloadResponseDtoJsonConverter : JsonConverter<DownloadResponseDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="DownloadResponseDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DownloadResponseDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<DownloadArchiveInfo>?> archives = default;
            Option<int?> totalSize = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "archives":
                            archives = new Option<List<DownloadArchiveInfo>?>(JsonSerializer.Deserialize<List<DownloadArchiveInfo>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "totalSize":
                            totalSize = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!archives.IsSet)
                throw new ArgumentException("Property is required for class DownloadResponseDto.", nameof(archives));

            if (!totalSize.IsSet)
                throw new ArgumentException("Property is required for class DownloadResponseDto.", nameof(totalSize));

            if (archives.IsSet && archives.Value == null)
                throw new ArgumentNullException(nameof(archives), "Property is not nullable for class DownloadResponseDto.");

            if (totalSize.IsSet && totalSize.Value == null)
                throw new ArgumentNullException(nameof(totalSize), "Property is not nullable for class DownloadResponseDto.");

            return new DownloadResponseDto(archives.Value!, totalSize.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="DownloadResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="downloadResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DownloadResponseDto downloadResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, downloadResponseDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DownloadResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="downloadResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DownloadResponseDto downloadResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (downloadResponseDto.Archives == null)
                throw new ArgumentNullException(nameof(downloadResponseDto.Archives), "Property is required for class DownloadResponseDto.");

            writer.WritePropertyName("archives");
            JsonSerializer.Serialize(writer, downloadResponseDto.Archives, jsonSerializerOptions);
            writer.WriteNumber("totalSize", downloadResponseDto.TotalSize);
        }
    }
}
