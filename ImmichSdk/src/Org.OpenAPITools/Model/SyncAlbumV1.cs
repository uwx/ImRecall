// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SyncAlbumV1
    /// </summary>
    public partial class SyncAlbumV1 : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SyncAlbumV1" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt</param>
        /// <param name="description">description</param>
        /// <param name="id">id</param>
        /// <param name="isActivityEnabled">isActivityEnabled</param>
        /// <param name="name">name</param>
        /// <param name="order">order</param>
        /// <param name="ownerId">ownerId</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="thumbnailAssetId">thumbnailAssetId</param>
        [JsonConstructor]
        public SyncAlbumV1(DateTime createdAt, string description, string id, bool isActivityEnabled, string name, AssetOrder order, string ownerId, DateTime updatedAt, string? thumbnailAssetId = default)
        {
            CreatedAt = createdAt;
            Description = description;
            Id = id;
            IsActivityEnabled = isActivityEnabled;
            Name = name;
            Order = order;
            OwnerId = ownerId;
            UpdatedAt = updatedAt;
            ThumbnailAssetId = thumbnailAssetId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [JsonPropertyName("order")]
        public AssetOrder Order { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IsActivityEnabled
        /// </summary>
        [JsonPropertyName("isActivityEnabled")]
        public bool IsActivityEnabled { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OwnerId
        /// </summary>
        [JsonPropertyName("ownerId")]
        public string OwnerId { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets ThumbnailAssetId
        /// </summary>
        [JsonPropertyName("thumbnailAssetId")]
        public string? ThumbnailAssetId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SyncAlbumV1 {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsActivityEnabled: ").Append(IsActivityEnabled).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  ThumbnailAssetId: ").Append(ThumbnailAssetId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SyncAlbumV1" />
    /// </summary>
    public class SyncAlbumV1JsonConverter : JsonConverter<SyncAlbumV1>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="SyncAlbumV1" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SyncAlbumV1 Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> createdAt = default;
            Option<string?> description = default;
            Option<string?> id = default;
            Option<bool?> isActivityEnabled = default;
            Option<string?> name = default;
            Option<AssetOrder?> order = default;
            Option<string?> ownerId = default;
            Option<DateTime?> updatedAt = default;
            Option<string?> thumbnailAssetId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "isActivityEnabled":
                            isActivityEnabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "order":
                            string? orderRawValue = utf8JsonReader.GetString();
                            if (orderRawValue != null)
                                order = new Option<AssetOrder?>(AssetOrderValueConverter.FromStringOrDefault(orderRawValue));
                            break;
                        case "ownerId":
                            ownerId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "updatedAt":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "thumbnailAssetId":
                            thumbnailAssetId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class SyncAlbumV1.", nameof(createdAt));

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class SyncAlbumV1.", nameof(description));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class SyncAlbumV1.", nameof(id));

            if (!isActivityEnabled.IsSet)
                throw new ArgumentException("Property is required for class SyncAlbumV1.", nameof(isActivityEnabled));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class SyncAlbumV1.", nameof(name));

            if (!order.IsSet)
                throw new ArgumentException("Property is required for class SyncAlbumV1.", nameof(order));

            if (!ownerId.IsSet)
                throw new ArgumentException("Property is required for class SyncAlbumV1.", nameof(ownerId));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class SyncAlbumV1.", nameof(updatedAt));

            if (!thumbnailAssetId.IsSet)
                throw new ArgumentException("Property is required for class SyncAlbumV1.", nameof(thumbnailAssetId));

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class SyncAlbumV1.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class SyncAlbumV1.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class SyncAlbumV1.");

            if (isActivityEnabled.IsSet && isActivityEnabled.Value == null)
                throw new ArgumentNullException(nameof(isActivityEnabled), "Property is not nullable for class SyncAlbumV1.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class SyncAlbumV1.");

            if (order.IsSet && order.Value == null)
                throw new ArgumentNullException(nameof(order), "Property is not nullable for class SyncAlbumV1.");

            if (ownerId.IsSet && ownerId.Value == null)
                throw new ArgumentNullException(nameof(ownerId), "Property is not nullable for class SyncAlbumV1.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class SyncAlbumV1.");

            return new SyncAlbumV1(createdAt.Value!.Value!, description.Value!, id.Value!, isActivityEnabled.Value!.Value!, name.Value!, order.Value!.Value!, ownerId.Value!, updatedAt.Value!.Value!, thumbnailAssetId.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="SyncAlbumV1" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="syncAlbumV1"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SyncAlbumV1 syncAlbumV1, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, syncAlbumV1, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SyncAlbumV1" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="syncAlbumV1"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SyncAlbumV1 syncAlbumV1, JsonSerializerOptions jsonSerializerOptions)
        {
            if (syncAlbumV1.Description == null)
                throw new ArgumentNullException(nameof(syncAlbumV1.Description), "Property is required for class SyncAlbumV1.");

            if (syncAlbumV1.Id == null)
                throw new ArgumentNullException(nameof(syncAlbumV1.Id), "Property is required for class SyncAlbumV1.");

            if (syncAlbumV1.Name == null)
                throw new ArgumentNullException(nameof(syncAlbumV1.Name), "Property is required for class SyncAlbumV1.");

            if (syncAlbumV1.OwnerId == null)
                throw new ArgumentNullException(nameof(syncAlbumV1.OwnerId), "Property is required for class SyncAlbumV1.");

            writer.WriteString("createdAt", syncAlbumV1.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("description", syncAlbumV1.Description);

            writer.WriteString("id", syncAlbumV1.Id);

            writer.WriteBoolean("isActivityEnabled", syncAlbumV1.IsActivityEnabled);

            writer.WriteString("name", syncAlbumV1.Name);

            var orderRawValue = AssetOrderValueConverter.ToJsonValue(syncAlbumV1.Order);
            writer.WriteString("order", orderRawValue);

            writer.WriteString("ownerId", syncAlbumV1.OwnerId);

            writer.WriteString("updatedAt", syncAlbumV1.UpdatedAt.ToString(UpdatedAtFormat));

            if (syncAlbumV1.ThumbnailAssetId != null)
                writer.WriteString("thumbnailAssetId", syncAlbumV1.ThumbnailAssetId);
            else
                writer.WriteNull("thumbnailAssetId");
        }
    }
}
