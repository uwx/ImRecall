// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ServerStorageResponseDto
    /// </summary>
    public partial class ServerStorageResponseDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerStorageResponseDto" /> class.
        /// </summary>
        /// <param name="diskAvailable">diskAvailable</param>
        /// <param name="diskAvailableRaw">diskAvailableRaw</param>
        /// <param name="diskSize">diskSize</param>
        /// <param name="diskSizeRaw">diskSizeRaw</param>
        /// <param name="diskUsagePercentage">diskUsagePercentage</param>
        /// <param name="diskUse">diskUse</param>
        /// <param name="diskUseRaw">diskUseRaw</param>
        [JsonConstructor]
        public ServerStorageResponseDto(string diskAvailable, long diskAvailableRaw, string diskSize, long diskSizeRaw, double diskUsagePercentage, string diskUse, long diskUseRaw)
        {
            DiskAvailable = diskAvailable;
            DiskAvailableRaw = diskAvailableRaw;
            DiskSize = diskSize;
            DiskSizeRaw = diskSizeRaw;
            DiskUsagePercentage = diskUsagePercentage;
            DiskUse = diskUse;
            DiskUseRaw = diskUseRaw;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets DiskAvailable
        /// </summary>
        [JsonPropertyName("diskAvailable")]
        public string DiskAvailable { get; set; }

        /// <summary>
        /// Gets or Sets DiskAvailableRaw
        /// </summary>
        [JsonPropertyName("diskAvailableRaw")]
        public long DiskAvailableRaw { get; set; }

        /// <summary>
        /// Gets or Sets DiskSize
        /// </summary>
        [JsonPropertyName("diskSize")]
        public string DiskSize { get; set; }

        /// <summary>
        /// Gets or Sets DiskSizeRaw
        /// </summary>
        [JsonPropertyName("diskSizeRaw")]
        public long DiskSizeRaw { get; set; }

        /// <summary>
        /// Gets or Sets DiskUsagePercentage
        /// </summary>
        [JsonPropertyName("diskUsagePercentage")]
        public double DiskUsagePercentage { get; set; }

        /// <summary>
        /// Gets or Sets DiskUse
        /// </summary>
        [JsonPropertyName("diskUse")]
        public string DiskUse { get; set; }

        /// <summary>
        /// Gets or Sets DiskUseRaw
        /// </summary>
        [JsonPropertyName("diskUseRaw")]
        public long DiskUseRaw { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServerStorageResponseDto {\n");
            sb.Append("  DiskAvailable: ").Append(DiskAvailable).Append("\n");
            sb.Append("  DiskAvailableRaw: ").Append(DiskAvailableRaw).Append("\n");
            sb.Append("  DiskSize: ").Append(DiskSize).Append("\n");
            sb.Append("  DiskSizeRaw: ").Append(DiskSizeRaw).Append("\n");
            sb.Append("  DiskUsagePercentage: ").Append(DiskUsagePercentage).Append("\n");
            sb.Append("  DiskUse: ").Append(DiskUse).Append("\n");
            sb.Append("  DiskUseRaw: ").Append(DiskUseRaw).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ServerStorageResponseDto" />
    /// </summary>
    public class ServerStorageResponseDtoJsonConverter : JsonConverter<ServerStorageResponseDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="ServerStorageResponseDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ServerStorageResponseDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> diskAvailable = default;
            Option<long?> diskAvailableRaw = default;
            Option<string?> diskSize = default;
            Option<long?> diskSizeRaw = default;
            Option<double?> diskUsagePercentage = default;
            Option<string?> diskUse = default;
            Option<long?> diskUseRaw = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "diskAvailable":
                            diskAvailable = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "diskAvailableRaw":
                            diskAvailableRaw = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "diskSize":
                            diskSize = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "diskSizeRaw":
                            diskSizeRaw = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "diskUsagePercentage":
                            diskUsagePercentage = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "diskUse":
                            diskUse = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "diskUseRaw":
                            diskUseRaw = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!diskAvailable.IsSet)
                throw new ArgumentException("Property is required for class ServerStorageResponseDto.", nameof(diskAvailable));

            if (!diskAvailableRaw.IsSet)
                throw new ArgumentException("Property is required for class ServerStorageResponseDto.", nameof(diskAvailableRaw));

            if (!diskSize.IsSet)
                throw new ArgumentException("Property is required for class ServerStorageResponseDto.", nameof(diskSize));

            if (!diskSizeRaw.IsSet)
                throw new ArgumentException("Property is required for class ServerStorageResponseDto.", nameof(diskSizeRaw));

            if (!diskUsagePercentage.IsSet)
                throw new ArgumentException("Property is required for class ServerStorageResponseDto.", nameof(diskUsagePercentage));

            if (!diskUse.IsSet)
                throw new ArgumentException("Property is required for class ServerStorageResponseDto.", nameof(diskUse));

            if (!diskUseRaw.IsSet)
                throw new ArgumentException("Property is required for class ServerStorageResponseDto.", nameof(diskUseRaw));

            if (diskAvailable.IsSet && diskAvailable.Value == null)
                throw new ArgumentNullException(nameof(diskAvailable), "Property is not nullable for class ServerStorageResponseDto.");

            if (diskAvailableRaw.IsSet && diskAvailableRaw.Value == null)
                throw new ArgumentNullException(nameof(diskAvailableRaw), "Property is not nullable for class ServerStorageResponseDto.");

            if (diskSize.IsSet && diskSize.Value == null)
                throw new ArgumentNullException(nameof(diskSize), "Property is not nullable for class ServerStorageResponseDto.");

            if (diskSizeRaw.IsSet && diskSizeRaw.Value == null)
                throw new ArgumentNullException(nameof(diskSizeRaw), "Property is not nullable for class ServerStorageResponseDto.");

            if (diskUsagePercentage.IsSet && diskUsagePercentage.Value == null)
                throw new ArgumentNullException(nameof(diskUsagePercentage), "Property is not nullable for class ServerStorageResponseDto.");

            if (diskUse.IsSet && diskUse.Value == null)
                throw new ArgumentNullException(nameof(diskUse), "Property is not nullable for class ServerStorageResponseDto.");

            if (diskUseRaw.IsSet && diskUseRaw.Value == null)
                throw new ArgumentNullException(nameof(diskUseRaw), "Property is not nullable for class ServerStorageResponseDto.");

            return new ServerStorageResponseDto(diskAvailable.Value!, diskAvailableRaw.Value!.Value!, diskSize.Value!, diskSizeRaw.Value!.Value!, diskUsagePercentage.Value!.Value!, diskUse.Value!, diskUseRaw.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ServerStorageResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="serverStorageResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ServerStorageResponseDto serverStorageResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, serverStorageResponseDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ServerStorageResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="serverStorageResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ServerStorageResponseDto serverStorageResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (serverStorageResponseDto.DiskAvailable == null)
                throw new ArgumentNullException(nameof(serverStorageResponseDto.DiskAvailable), "Property is required for class ServerStorageResponseDto.");

            if (serverStorageResponseDto.DiskSize == null)
                throw new ArgumentNullException(nameof(serverStorageResponseDto.DiskSize), "Property is required for class ServerStorageResponseDto.");

            if (serverStorageResponseDto.DiskUse == null)
                throw new ArgumentNullException(nameof(serverStorageResponseDto.DiskUse), "Property is required for class ServerStorageResponseDto.");

            writer.WriteString("diskAvailable", serverStorageResponseDto.DiskAvailable);

            writer.WriteNumber("diskAvailableRaw", serverStorageResponseDto.DiskAvailableRaw);

            writer.WriteString("diskSize", serverStorageResponseDto.DiskSize);

            writer.WriteNumber("diskSizeRaw", serverStorageResponseDto.DiskSizeRaw);

            writer.WriteNumber("diskUsagePercentage", serverStorageResponseDto.DiskUsagePercentage);

            writer.WriteString("diskUse", serverStorageResponseDto.DiskUse);

            writer.WriteNumber("diskUseRaw", serverStorageResponseDto.DiskUseRaw);
        }
    }
}
