// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines UserMetadataKey
    /// </summary>
    public enum UserMetadataKey
    {
        /// <summary>
        /// Enum Preferences for value: preferences
        /// </summary>
        Preferences = 1,

        /// <summary>
        /// Enum License for value: license
        /// </summary>
        License = 2,

        /// <summary>
        /// Enum Onboarding for value: onboarding
        /// </summary>
        Onboarding = 3
    }

    /// <summary>
    /// Converts <see cref="UserMetadataKey"/> to and from the JSON value
    /// </summary>
    public static class UserMetadataKeyValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="UserMetadataKey"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static UserMetadataKey FromString(string value)
        {
            if (value.Equals("preferences"))
                return UserMetadataKey.Preferences;

            if (value.Equals("license"))
                return UserMetadataKey.License;

            if (value.Equals("onboarding"))
                return UserMetadataKey.Onboarding;

            throw new NotImplementedException($"Could not convert value to type UserMetadataKey: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="UserMetadataKey"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static UserMetadataKey? FromStringOrDefault(string value)
        {
            if (value.Equals("preferences"))
                return UserMetadataKey.Preferences;

            if (value.Equals("license"))
                return UserMetadataKey.License;

            if (value.Equals("onboarding"))
                return UserMetadataKey.Onboarding;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="UserMetadataKey"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(UserMetadataKey value)
        {
            if (value == UserMetadataKey.Preferences)
                return "preferences";

            if (value == UserMetadataKey.License)
                return "license";

            if (value == UserMetadataKey.Onboarding)
                return "onboarding";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserMetadataKey"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class UserMetadataKeyJsonConverter : JsonConverter<UserMetadataKey>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override UserMetadataKey Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            UserMetadataKey? result = rawValue == null
                ? null
                : UserMetadataKeyValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the UserMetadataKey to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userMetadataKey"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, UserMetadataKey userMetadataKey, JsonSerializerOptions options)
        {
            writer.WriteStringValue(UserMetadataKeyValueConverter.ToJsonValue(userMetadataKey).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserMetadataKey"/>
    /// </summary>
    public class UserMetadataKeyNullableJsonConverter : JsonConverter<UserMetadataKey?>
    {
        /// <summary>
        /// Returns a UserMetadataKey from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override UserMetadataKey? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            UserMetadataKey? result = rawValue == null
                ? null
                : UserMetadataKeyValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the UserMetadataKey to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userMetadataKey"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, UserMetadataKey? userMetadataKey, JsonSerializerOptions options)
        {
            writer.WriteStringValue(userMetadataKey.HasValue ? UserMetadataKeyValueConverter.ToJsonValue(userMetadataKey.Value).ToString() : "null");
        }
    }
}
