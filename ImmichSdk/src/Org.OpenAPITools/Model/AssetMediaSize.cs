// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines AssetMediaSize
    /// </summary>
    public enum AssetMediaSize
    {
        /// <summary>
        /// Enum Fullsize for value: fullsize
        /// </summary>
        Fullsize = 1,

        /// <summary>
        /// Enum Preview for value: preview
        /// </summary>
        Preview = 2,

        /// <summary>
        /// Enum Thumbnail for value: thumbnail
        /// </summary>
        Thumbnail = 3
    }

    /// <summary>
    /// Converts <see cref="AssetMediaSize"/> to and from the JSON value
    /// </summary>
    public static class AssetMediaSizeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="AssetMediaSize"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AssetMediaSize FromString(string value)
        {
            if (value.Equals("fullsize"))
                return AssetMediaSize.Fullsize;

            if (value.Equals("preview"))
                return AssetMediaSize.Preview;

            if (value.Equals("thumbnail"))
                return AssetMediaSize.Thumbnail;

            throw new NotImplementedException($"Could not convert value to type AssetMediaSize: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="AssetMediaSize"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AssetMediaSize? FromStringOrDefault(string value)
        {
            if (value.Equals("fullsize"))
                return AssetMediaSize.Fullsize;

            if (value.Equals("preview"))
                return AssetMediaSize.Preview;

            if (value.Equals("thumbnail"))
                return AssetMediaSize.Thumbnail;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AssetMediaSize"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(AssetMediaSize value)
        {
            if (value == AssetMediaSize.Fullsize)
                return "fullsize";

            if (value == AssetMediaSize.Preview)
                return "preview";

            if (value == AssetMediaSize.Thumbnail)
                return "thumbnail";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AssetMediaSize"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class AssetMediaSizeJsonConverter : JsonConverter<AssetMediaSize>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override AssetMediaSize Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            AssetMediaSize? result = rawValue == null
                ? null
                : AssetMediaSizeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the AssetMediaSize to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="assetMediaSize"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, AssetMediaSize assetMediaSize, JsonSerializerOptions options)
        {
            writer.WriteStringValue(AssetMediaSizeValueConverter.ToJsonValue(assetMediaSize).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AssetMediaSize"/>
    /// </summary>
    public class AssetMediaSizeNullableJsonConverter : JsonConverter<AssetMediaSize?>
    {
        /// <summary>
        /// Returns a AssetMediaSize from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override AssetMediaSize? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            AssetMediaSize? result = rawValue == null
                ? null
                : AssetMediaSizeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the AssetMediaSize to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="assetMediaSize"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, AssetMediaSize? assetMediaSize, JsonSerializerOptions options)
        {
            writer.WriteStringValue(assetMediaSize.HasValue ? AssetMediaSizeValueConverter.ToJsonValue(assetMediaSize.Value).ToString() : "null");
        }
    }
}
