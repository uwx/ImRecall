// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SyncMemoryV1
    /// </summary>
    public partial class SyncMemoryV1 : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SyncMemoryV1" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt</param>
        /// <param name="data">data</param>
        /// <param name="id">id</param>
        /// <param name="isSaved">isSaved</param>
        /// <param name="memoryAt">memoryAt</param>
        /// <param name="ownerId">ownerId</param>
        /// <param name="type">type</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="deletedAt">deletedAt</param>
        /// <param name="hideAt">hideAt</param>
        /// <param name="seenAt">seenAt</param>
        /// <param name="showAt">showAt</param>
        [JsonConstructor]
        public SyncMemoryV1(DateTime createdAt, Object data, string id, bool isSaved, DateTime memoryAt, string ownerId, MemoryType type, DateTime updatedAt, DateTime? deletedAt = default, DateTime? hideAt = default, DateTime? seenAt = default, DateTime? showAt = default)
        {
            CreatedAt = createdAt;
            Data = data;
            Id = id;
            IsSaved = isSaved;
            MemoryAt = memoryAt;
            OwnerId = ownerId;
            Type = type;
            UpdatedAt = updatedAt;
            DeletedAt = deletedAt;
            HideAt = hideAt;
            SeenAt = seenAt;
            ShowAt = showAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public MemoryType Type { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [JsonPropertyName("data")]
        public Object Data { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IsSaved
        /// </summary>
        [JsonPropertyName("isSaved")]
        public bool IsSaved { get; set; }

        /// <summary>
        /// Gets or Sets MemoryAt
        /// </summary>
        [JsonPropertyName("memoryAt")]
        public DateTime MemoryAt { get; set; }

        /// <summary>
        /// Gets or Sets OwnerId
        /// </summary>
        [JsonPropertyName("ownerId")]
        public string OwnerId { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets DeletedAt
        /// </summary>
        [JsonPropertyName("deletedAt")]
        public DateTime? DeletedAt { get; set; }

        /// <summary>
        /// Gets or Sets HideAt
        /// </summary>
        [JsonPropertyName("hideAt")]
        public DateTime? HideAt { get; set; }

        /// <summary>
        /// Gets or Sets SeenAt
        /// </summary>
        [JsonPropertyName("seenAt")]
        public DateTime? SeenAt { get; set; }

        /// <summary>
        /// Gets or Sets ShowAt
        /// </summary>
        [JsonPropertyName("showAt")]
        public DateTime? ShowAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SyncMemoryV1 {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsSaved: ").Append(IsSaved).Append("\n");
            sb.Append("  MemoryAt: ").Append(MemoryAt).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  DeletedAt: ").Append(DeletedAt).Append("\n");
            sb.Append("  HideAt: ").Append(HideAt).Append("\n");
            sb.Append("  SeenAt: ").Append(SeenAt).Append("\n");
            sb.Append("  ShowAt: ").Append(ShowAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SyncMemoryV1" />
    /// </summary>
    public class SyncMemoryV1JsonConverter : JsonConverter<SyncMemoryV1>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize MemoryAt
        /// </summary>
        public static string MemoryAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DeletedAt
        /// </summary>
        public static string DeletedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize HideAt
        /// </summary>
        public static string HideAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize SeenAt
        /// </summary>
        public static string SeenAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ShowAt
        /// </summary>
        public static string ShowAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="SyncMemoryV1" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SyncMemoryV1 Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> createdAt = default;
            Option<Object?> data = default;
            Option<string?> id = default;
            Option<bool?> isSaved = default;
            Option<DateTime?> memoryAt = default;
            Option<string?> ownerId = default;
            Option<MemoryType?> type = default;
            Option<DateTime?> updatedAt = default;
            Option<DateTime?> deletedAt = default;
            Option<DateTime?> hideAt = default;
            Option<DateTime?> seenAt = default;
            Option<DateTime?> showAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "data":
                            data = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "isSaved":
                            isSaved = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "memoryAt":
                            memoryAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ownerId":
                            ownerId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<MemoryType?>(MemoryTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "updatedAt":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "deletedAt":
                            deletedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "hideAt":
                            hideAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "seenAt":
                            seenAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "showAt":
                            showAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class SyncMemoryV1.", nameof(createdAt));

            if (!data.IsSet)
                throw new ArgumentException("Property is required for class SyncMemoryV1.", nameof(data));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class SyncMemoryV1.", nameof(id));

            if (!isSaved.IsSet)
                throw new ArgumentException("Property is required for class SyncMemoryV1.", nameof(isSaved));

            if (!memoryAt.IsSet)
                throw new ArgumentException("Property is required for class SyncMemoryV1.", nameof(memoryAt));

            if (!ownerId.IsSet)
                throw new ArgumentException("Property is required for class SyncMemoryV1.", nameof(ownerId));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class SyncMemoryV1.", nameof(type));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class SyncMemoryV1.", nameof(updatedAt));

            if (!deletedAt.IsSet)
                throw new ArgumentException("Property is required for class SyncMemoryV1.", nameof(deletedAt));

            if (!hideAt.IsSet)
                throw new ArgumentException("Property is required for class SyncMemoryV1.", nameof(hideAt));

            if (!seenAt.IsSet)
                throw new ArgumentException("Property is required for class SyncMemoryV1.", nameof(seenAt));

            if (!showAt.IsSet)
                throw new ArgumentException("Property is required for class SyncMemoryV1.", nameof(showAt));

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class SyncMemoryV1.");

            if (data.IsSet && data.Value == null)
                throw new ArgumentNullException(nameof(data), "Property is not nullable for class SyncMemoryV1.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class SyncMemoryV1.");

            if (isSaved.IsSet && isSaved.Value == null)
                throw new ArgumentNullException(nameof(isSaved), "Property is not nullable for class SyncMemoryV1.");

            if (memoryAt.IsSet && memoryAt.Value == null)
                throw new ArgumentNullException(nameof(memoryAt), "Property is not nullable for class SyncMemoryV1.");

            if (ownerId.IsSet && ownerId.Value == null)
                throw new ArgumentNullException(nameof(ownerId), "Property is not nullable for class SyncMemoryV1.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class SyncMemoryV1.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class SyncMemoryV1.");

            return new SyncMemoryV1(createdAt.Value!.Value!, data.Value!, id.Value!, isSaved.Value!.Value!, memoryAt.Value!.Value!, ownerId.Value!, type.Value!.Value!, updatedAt.Value!.Value!, deletedAt.Value!, hideAt.Value!, seenAt.Value!, showAt.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="SyncMemoryV1" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="syncMemoryV1"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SyncMemoryV1 syncMemoryV1, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, syncMemoryV1, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SyncMemoryV1" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="syncMemoryV1"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SyncMemoryV1 syncMemoryV1, JsonSerializerOptions jsonSerializerOptions)
        {
            if (syncMemoryV1.Data == null)
                throw new ArgumentNullException(nameof(syncMemoryV1.Data), "Property is required for class SyncMemoryV1.");

            if (syncMemoryV1.Id == null)
                throw new ArgumentNullException(nameof(syncMemoryV1.Id), "Property is required for class SyncMemoryV1.");

            if (syncMemoryV1.OwnerId == null)
                throw new ArgumentNullException(nameof(syncMemoryV1.OwnerId), "Property is required for class SyncMemoryV1.");

            writer.WriteString("createdAt", syncMemoryV1.CreatedAt.ToString(CreatedAtFormat));

            writer.WritePropertyName("data");
            JsonSerializer.Serialize(writer, syncMemoryV1.Data, jsonSerializerOptions);
            writer.WriteString("id", syncMemoryV1.Id);

            writer.WriteBoolean("isSaved", syncMemoryV1.IsSaved);

            writer.WriteString("memoryAt", syncMemoryV1.MemoryAt.ToString(MemoryAtFormat));

            writer.WriteString("ownerId", syncMemoryV1.OwnerId);

            var typeRawValue = MemoryTypeValueConverter.ToJsonValue(syncMemoryV1.Type);
            writer.WriteString("type", typeRawValue);

            writer.WriteString("updatedAt", syncMemoryV1.UpdatedAt.ToString(UpdatedAtFormat));

            if (syncMemoryV1.DeletedAt != null)
                writer.WriteString("deletedAt", syncMemoryV1.DeletedAt.Value.ToString(DeletedAtFormat));
            else
                writer.WriteNull("deletedAt");

            if (syncMemoryV1.HideAt != null)
                writer.WriteString("hideAt", syncMemoryV1.HideAt.Value.ToString(HideAtFormat));
            else
                writer.WriteNull("hideAt");

            if (syncMemoryV1.SeenAt != null)
                writer.WriteString("seenAt", syncMemoryV1.SeenAt.Value.ToString(SeenAtFormat));
            else
                writer.WriteNull("seenAt");

            if (syncMemoryV1.ShowAt != null)
                writer.WriteString("showAt", syncMemoryV1.ShowAt.Value.ToString(ShowAtFormat));
            else
                writer.WriteNull("showAt");
        }
    }
}
