// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines CQMode
    /// </summary>
    public enum CQMode
    {
        /// <summary>
        /// Enum Auto for value: auto
        /// </summary>
        Auto = 1,

        /// <summary>
        /// Enum Cqp for value: cqp
        /// </summary>
        Cqp = 2,

        /// <summary>
        /// Enum Icq for value: icq
        /// </summary>
        Icq = 3
    }

    /// <summary>
    /// Converts <see cref="CQMode"/> to and from the JSON value
    /// </summary>
    public static class CQModeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="CQMode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static CQMode FromString(string value)
        {
            if (value.Equals("auto"))
                return CQMode.Auto;

            if (value.Equals("cqp"))
                return CQMode.Cqp;

            if (value.Equals("icq"))
                return CQMode.Icq;

            throw new NotImplementedException($"Could not convert value to type CQMode: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="CQMode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static CQMode? FromStringOrDefault(string value)
        {
            if (value.Equals("auto"))
                return CQMode.Auto;

            if (value.Equals("cqp"))
                return CQMode.Cqp;

            if (value.Equals("icq"))
                return CQMode.Icq;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="CQMode"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(CQMode value)
        {
            if (value == CQMode.Auto)
                return "auto";

            if (value == CQMode.Cqp)
                return "cqp";

            if (value == CQMode.Icq)
                return "icq";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CQMode"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class CQModeJsonConverter : JsonConverter<CQMode>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override CQMode Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            CQMode? result = rawValue == null
                ? null
                : CQModeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the CQMode to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cQMode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, CQMode cQMode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(CQModeValueConverter.ToJsonValue(cQMode).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CQMode"/>
    /// </summary>
    public class CQModeNullableJsonConverter : JsonConverter<CQMode?>
    {
        /// <summary>
        /// Returns a CQMode from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override CQMode? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            CQMode? result = rawValue == null
                ? null
                : CQModeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the CQMode to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cQMode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, CQMode? cQMode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(cQMode.HasValue ? CQModeValueConverter.ToJsonValue(cQMode.Value).ToString() : "null");
        }
    }
}
