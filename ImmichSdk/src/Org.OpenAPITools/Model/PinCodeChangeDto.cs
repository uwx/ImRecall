// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PinCodeChangeDto
    /// </summary>
    public partial class PinCodeChangeDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PinCodeChangeDto" /> class.
        /// </summary>
        /// <param name="newPinCode">newPinCode</param>
        /// <param name="password">password</param>
        /// <param name="pinCode">pinCode</param>
        [JsonConstructor]
        public PinCodeChangeDto(string newPinCode, Option<string?> password = default, Option<string?> pinCode = default)
        {
            NewPinCode = newPinCode;
            PasswordOption = password;
            PinCodeOption = pinCode;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets NewPinCode
        /// </summary>
        /* <example>123456</example> */
        [JsonPropertyName("newPinCode")]
        public string NewPinCode { get; set; }

        /// <summary>
        /// Used to track the state of Password
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PasswordOption { get; private set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [JsonPropertyName("password")]
        public string? Password { get { return this.PasswordOption; } set { this.PasswordOption = new(value); } }

        /// <summary>
        /// Used to track the state of PinCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PinCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets PinCode
        /// </summary>
        /* <example>123456</example> */
        [JsonPropertyName("pinCode")]
        public string? PinCode { get { return this.PinCodeOption; } set { this.PinCodeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PinCodeChangeDto {\n");
            sb.Append("  NewPinCode: ").Append(NewPinCode).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  PinCode: ").Append(PinCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PinCodeChangeDto" />
    /// </summary>
    public class PinCodeChangeDtoJsonConverter : JsonConverter<PinCodeChangeDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="PinCodeChangeDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PinCodeChangeDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> newPinCode = default;
            Option<string?> password = default;
            Option<string?> pinCode = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "newPinCode":
                            newPinCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "password":
                            password = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "pinCode":
                            pinCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!newPinCode.IsSet)
                throw new ArgumentException("Property is required for class PinCodeChangeDto.", nameof(newPinCode));

            if (newPinCode.IsSet && newPinCode.Value == null)
                throw new ArgumentNullException(nameof(newPinCode), "Property is not nullable for class PinCodeChangeDto.");

            if (password.IsSet && password.Value == null)
                throw new ArgumentNullException(nameof(password), "Property is not nullable for class PinCodeChangeDto.");

            if (pinCode.IsSet && pinCode.Value == null)
                throw new ArgumentNullException(nameof(pinCode), "Property is not nullable for class PinCodeChangeDto.");

            return new PinCodeChangeDto(newPinCode.Value!, password, pinCode);
        }

        /// <summary>
        /// Serializes a <see cref="PinCodeChangeDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pinCodeChangeDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PinCodeChangeDto pinCodeChangeDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, pinCodeChangeDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PinCodeChangeDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pinCodeChangeDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PinCodeChangeDto pinCodeChangeDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (pinCodeChangeDto.NewPinCode == null)
                throw new ArgumentNullException(nameof(pinCodeChangeDto.NewPinCode), "Property is required for class PinCodeChangeDto.");

            if (pinCodeChangeDto.PasswordOption.IsSet && pinCodeChangeDto.Password == null)
                throw new ArgumentNullException(nameof(pinCodeChangeDto.Password), "Property is required for class PinCodeChangeDto.");

            if (pinCodeChangeDto.PinCodeOption.IsSet && pinCodeChangeDto.PinCode == null)
                throw new ArgumentNullException(nameof(pinCodeChangeDto.PinCode), "Property is required for class PinCodeChangeDto.");

            writer.WriteString("newPinCode", pinCodeChangeDto.NewPinCode);

            if (pinCodeChangeDto.PasswordOption.IsSet)
                writer.WriteString("password", pinCodeChangeDto.Password);

            if (pinCodeChangeDto.PinCodeOption.IsSet)
                writer.WriteString("pinCode", pinCodeChangeDto.PinCode);
        }
    }
}
