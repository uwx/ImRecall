// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SystemConfigNightlyTasksDto
    /// </summary>
    public partial class SystemConfigNightlyTasksDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigNightlyTasksDto" /> class.
        /// </summary>
        /// <param name="clusterNewFaces">clusterNewFaces</param>
        /// <param name="databaseCleanup">databaseCleanup</param>
        /// <param name="generateMemories">generateMemories</param>
        /// <param name="missingThumbnails">missingThumbnails</param>
        /// <param name="startTime">startTime</param>
        /// <param name="syncQuotaUsage">syncQuotaUsage</param>
        [JsonConstructor]
        public SystemConfigNightlyTasksDto(bool clusterNewFaces, bool databaseCleanup, bool generateMemories, bool missingThumbnails, string startTime, bool syncQuotaUsage)
        {
            ClusterNewFaces = clusterNewFaces;
            DatabaseCleanup = databaseCleanup;
            GenerateMemories = generateMemories;
            MissingThumbnails = missingThumbnails;
            StartTime = startTime;
            SyncQuotaUsage = syncQuotaUsage;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets ClusterNewFaces
        /// </summary>
        [JsonPropertyName("clusterNewFaces")]
        public bool ClusterNewFaces { get; set; }

        /// <summary>
        /// Gets or Sets DatabaseCleanup
        /// </summary>
        [JsonPropertyName("databaseCleanup")]
        public bool DatabaseCleanup { get; set; }

        /// <summary>
        /// Gets or Sets GenerateMemories
        /// </summary>
        [JsonPropertyName("generateMemories")]
        public bool GenerateMemories { get; set; }

        /// <summary>
        /// Gets or Sets MissingThumbnails
        /// </summary>
        [JsonPropertyName("missingThumbnails")]
        public bool MissingThumbnails { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [JsonPropertyName("startTime")]
        public string StartTime { get; set; }

        /// <summary>
        /// Gets or Sets SyncQuotaUsage
        /// </summary>
        [JsonPropertyName("syncQuotaUsage")]
        public bool SyncQuotaUsage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SystemConfigNightlyTasksDto {\n");
            sb.Append("  ClusterNewFaces: ").Append(ClusterNewFaces).Append("\n");
            sb.Append("  DatabaseCleanup: ").Append(DatabaseCleanup).Append("\n");
            sb.Append("  GenerateMemories: ").Append(GenerateMemories).Append("\n");
            sb.Append("  MissingThumbnails: ").Append(MissingThumbnails).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  SyncQuotaUsage: ").Append(SyncQuotaUsage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SystemConfigNightlyTasksDto" />
    /// </summary>
    public class SystemConfigNightlyTasksDtoJsonConverter : JsonConverter<SystemConfigNightlyTasksDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="SystemConfigNightlyTasksDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SystemConfigNightlyTasksDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> clusterNewFaces = default;
            Option<bool?> databaseCleanup = default;
            Option<bool?> generateMemories = default;
            Option<bool?> missingThumbnails = default;
            Option<string?> startTime = default;
            Option<bool?> syncQuotaUsage = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "clusterNewFaces":
                            clusterNewFaces = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "databaseCleanup":
                            databaseCleanup = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "generateMemories":
                            generateMemories = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "missingThumbnails":
                            missingThumbnails = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "startTime":
                            startTime = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "syncQuotaUsage":
                            syncQuotaUsage = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!clusterNewFaces.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigNightlyTasksDto.", nameof(clusterNewFaces));

            if (!databaseCleanup.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigNightlyTasksDto.", nameof(databaseCleanup));

            if (!generateMemories.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigNightlyTasksDto.", nameof(generateMemories));

            if (!missingThumbnails.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigNightlyTasksDto.", nameof(missingThumbnails));

            if (!startTime.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigNightlyTasksDto.", nameof(startTime));

            if (!syncQuotaUsage.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigNightlyTasksDto.", nameof(syncQuotaUsage));

            if (clusterNewFaces.IsSet && clusterNewFaces.Value == null)
                throw new ArgumentNullException(nameof(clusterNewFaces), "Property is not nullable for class SystemConfigNightlyTasksDto.");

            if (databaseCleanup.IsSet && databaseCleanup.Value == null)
                throw new ArgumentNullException(nameof(databaseCleanup), "Property is not nullable for class SystemConfigNightlyTasksDto.");

            if (generateMemories.IsSet && generateMemories.Value == null)
                throw new ArgumentNullException(nameof(generateMemories), "Property is not nullable for class SystemConfigNightlyTasksDto.");

            if (missingThumbnails.IsSet && missingThumbnails.Value == null)
                throw new ArgumentNullException(nameof(missingThumbnails), "Property is not nullable for class SystemConfigNightlyTasksDto.");

            if (startTime.IsSet && startTime.Value == null)
                throw new ArgumentNullException(nameof(startTime), "Property is not nullable for class SystemConfigNightlyTasksDto.");

            if (syncQuotaUsage.IsSet && syncQuotaUsage.Value == null)
                throw new ArgumentNullException(nameof(syncQuotaUsage), "Property is not nullable for class SystemConfigNightlyTasksDto.");

            return new SystemConfigNightlyTasksDto(clusterNewFaces.Value!.Value!, databaseCleanup.Value!.Value!, generateMemories.Value!.Value!, missingThumbnails.Value!.Value!, startTime.Value!, syncQuotaUsage.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="SystemConfigNightlyTasksDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="systemConfigNightlyTasksDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SystemConfigNightlyTasksDto systemConfigNightlyTasksDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, systemConfigNightlyTasksDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SystemConfigNightlyTasksDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="systemConfigNightlyTasksDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SystemConfigNightlyTasksDto systemConfigNightlyTasksDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (systemConfigNightlyTasksDto.StartTime == null)
                throw new ArgumentNullException(nameof(systemConfigNightlyTasksDto.StartTime), "Property is required for class SystemConfigNightlyTasksDto.");

            writer.WriteBoolean("clusterNewFaces", systemConfigNightlyTasksDto.ClusterNewFaces);

            writer.WriteBoolean("databaseCleanup", systemConfigNightlyTasksDto.DatabaseCleanup);

            writer.WriteBoolean("generateMemories", systemConfigNightlyTasksDto.GenerateMemories);

            writer.WriteBoolean("missingThumbnails", systemConfigNightlyTasksDto.MissingThumbnails);

            writer.WriteString("startTime", systemConfigNightlyTasksDto.StartTime);

            writer.WriteBoolean("syncQuotaUsage", systemConfigNightlyTasksDto.SyncQuotaUsage);
        }
    }
}
