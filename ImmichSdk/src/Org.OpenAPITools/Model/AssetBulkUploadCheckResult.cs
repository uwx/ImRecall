// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AssetBulkUploadCheckResult
    /// </summary>
    public partial class AssetBulkUploadCheckResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetBulkUploadCheckResult" /> class.
        /// </summary>
        /// <param name="action">action</param>
        /// <param name="id">id</param>
        /// <param name="assetId">assetId</param>
        /// <param name="isTrashed">isTrashed</param>
        /// <param name="reason">reason</param>
        [JsonConstructor]
        public AssetBulkUploadCheckResult(ActionEnum action, string id, Option<string?> assetId = default, Option<bool?> isTrashed = default, Option<ReasonEnum?> reason = default)
        {
            Action = action;
            Id = id;
            AssetIdOption = assetId;
            IsTrashedOption = isTrashed;
            ReasonOption = reason;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Action
        /// </summary>
        public enum ActionEnum
        {
            /// <summary>
            /// Enum Accept for value: accept
            /// </summary>
            Accept = 1,

            /// <summary>
            /// Enum Reject for value: reject
            /// </summary>
            Reject = 2
        }

        /// <summary>
        /// Returns a <see cref="ActionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ActionEnum ActionEnumFromString(string value)
        {
            if (value.Equals("accept"))
                return ActionEnum.Accept;

            if (value.Equals("reject"))
                return ActionEnum.Reject;

            throw new NotImplementedException($"Could not convert value to type ActionEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ActionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ActionEnum? ActionEnumFromStringOrDefault(string value)
        {
            if (value.Equals("accept"))
                return ActionEnum.Accept;

            if (value.Equals("reject"))
                return ActionEnum.Reject;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ActionEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ActionEnumToJsonValue(ActionEnum value)
        {
            if (value == ActionEnum.Accept)
                return "accept";

            if (value == ActionEnum.Reject)
                return "reject";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [JsonPropertyName("action")]
        public ActionEnum Action { get; set; }

        /// <summary>
        /// Defines Reason
        /// </summary>
        public enum ReasonEnum
        {
            /// <summary>
            /// Enum Duplicate for value: duplicate
            /// </summary>
            Duplicate = 1,

            /// <summary>
            /// Enum UnsupportedFormat for value: unsupported-format
            /// </summary>
            UnsupportedFormat = 2
        }

        /// <summary>
        /// Returns a <see cref="ReasonEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ReasonEnum ReasonEnumFromString(string value)
        {
            if (value.Equals("duplicate"))
                return ReasonEnum.Duplicate;

            if (value.Equals("unsupported-format"))
                return ReasonEnum.UnsupportedFormat;

            throw new NotImplementedException($"Could not convert value to type ReasonEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ReasonEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ReasonEnum? ReasonEnumFromStringOrDefault(string value)
        {
            if (value.Equals("duplicate"))
                return ReasonEnum.Duplicate;

            if (value.Equals("unsupported-format"))
                return ReasonEnum.UnsupportedFormat;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ReasonEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ReasonEnumToJsonValue(ReasonEnum? value)
        {
            if (value == ReasonEnum.Duplicate)
                return "duplicate";

            if (value == ReasonEnum.UnsupportedFormat)
                return "unsupported-format";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Reason
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ReasonEnum?> ReasonOption { get; private set; }

        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [JsonPropertyName("reason")]
        public ReasonEnum? Reason { get { return this.ReasonOption; } set { this.ReasonOption = new(value); } }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Used to track the state of AssetId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AssetIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets AssetId
        /// </summary>
        [JsonPropertyName("assetId")]
        public string? AssetId { get { return this.AssetIdOption; } set { this.AssetIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsTrashed
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsTrashedOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsTrashed
        /// </summary>
        [JsonPropertyName("isTrashed")]
        public bool? IsTrashed { get { return this.IsTrashedOption; } set { this.IsTrashedOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AssetBulkUploadCheckResult {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  IsTrashed: ").Append(IsTrashed).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AssetBulkUploadCheckResult" />
    /// </summary>
    public class AssetBulkUploadCheckResultJsonConverter : JsonConverter<AssetBulkUploadCheckResult>
    {
        /// <summary>
        /// Deserializes json to <see cref="AssetBulkUploadCheckResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AssetBulkUploadCheckResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<AssetBulkUploadCheckResult.ActionEnum?> action = default;
            Option<string?> id = default;
            Option<string?> assetId = default;
            Option<bool?> isTrashed = default;
            Option<AssetBulkUploadCheckResult.ReasonEnum?> reason = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "action":
                            string? actionRawValue = utf8JsonReader.GetString();
                            if (actionRawValue != null)
                                action = new Option<AssetBulkUploadCheckResult.ActionEnum?>(AssetBulkUploadCheckResult.ActionEnumFromStringOrDefault(actionRawValue));
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "assetId":
                            assetId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "isTrashed":
                            isTrashed = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "reason":
                            string? reasonRawValue = utf8JsonReader.GetString();
                            if (reasonRawValue != null)
                                reason = new Option<AssetBulkUploadCheckResult.ReasonEnum?>(AssetBulkUploadCheckResult.ReasonEnumFromStringOrDefault(reasonRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!action.IsSet)
                throw new ArgumentException("Property is required for class AssetBulkUploadCheckResult.", nameof(action));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class AssetBulkUploadCheckResult.", nameof(id));

            if (action.IsSet && action.Value == null)
                throw new ArgumentNullException(nameof(action), "Property is not nullable for class AssetBulkUploadCheckResult.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class AssetBulkUploadCheckResult.");

            if (assetId.IsSet && assetId.Value == null)
                throw new ArgumentNullException(nameof(assetId), "Property is not nullable for class AssetBulkUploadCheckResult.");

            if (isTrashed.IsSet && isTrashed.Value == null)
                throw new ArgumentNullException(nameof(isTrashed), "Property is not nullable for class AssetBulkUploadCheckResult.");

            if (reason.IsSet && reason.Value == null)
                throw new ArgumentNullException(nameof(reason), "Property is not nullable for class AssetBulkUploadCheckResult.");

            return new AssetBulkUploadCheckResult(action.Value!.Value!, id.Value!, assetId, isTrashed, reason);
        }

        /// <summary>
        /// Serializes a <see cref="AssetBulkUploadCheckResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="assetBulkUploadCheckResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AssetBulkUploadCheckResult assetBulkUploadCheckResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, assetBulkUploadCheckResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AssetBulkUploadCheckResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="assetBulkUploadCheckResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AssetBulkUploadCheckResult assetBulkUploadCheckResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (assetBulkUploadCheckResult.Id == null)
                throw new ArgumentNullException(nameof(assetBulkUploadCheckResult.Id), "Property is required for class AssetBulkUploadCheckResult.");

            if (assetBulkUploadCheckResult.AssetIdOption.IsSet && assetBulkUploadCheckResult.AssetId == null)
                throw new ArgumentNullException(nameof(assetBulkUploadCheckResult.AssetId), "Property is required for class AssetBulkUploadCheckResult.");

            var actionRawValue = AssetBulkUploadCheckResult.ActionEnumToJsonValue(assetBulkUploadCheckResult.Action);
            writer.WriteString("action", actionRawValue);
            writer.WriteString("id", assetBulkUploadCheckResult.Id);

            if (assetBulkUploadCheckResult.AssetIdOption.IsSet)
                writer.WriteString("assetId", assetBulkUploadCheckResult.AssetId);

            if (assetBulkUploadCheckResult.IsTrashedOption.IsSet)
                writer.WriteBoolean("isTrashed", assetBulkUploadCheckResult.IsTrashedOption.Value!.Value);

            var reasonRawValue = AssetBulkUploadCheckResult.ReasonEnumToJsonValue(assetBulkUploadCheckResult.ReasonOption.Value!.Value);
            writer.WriteString("reason", reasonRawValue);
        }
    }
}
