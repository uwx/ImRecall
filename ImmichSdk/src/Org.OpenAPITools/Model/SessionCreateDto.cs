// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SessionCreateDto
    /// </summary>
    public partial class SessionCreateDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionCreateDto" /> class.
        /// </summary>
        /// <param name="deviceOS">deviceOS</param>
        /// <param name="deviceType">deviceType</param>
        /// <param name="duration">session duration, in seconds</param>
        [JsonConstructor]
        public SessionCreateDto(Option<string?> deviceOS = default, Option<string?> deviceType = default, Option<decimal?> duration = default)
        {
            DeviceOSOption = deviceOS;
            DeviceTypeOption = deviceType;
            DurationOption = duration;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of DeviceOS
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DeviceOSOption { get; private set; }

        /// <summary>
        /// Gets or Sets DeviceOS
        /// </summary>
        [JsonPropertyName("deviceOS")]
        public string? DeviceOS { get { return this.DeviceOSOption; } set { this.DeviceOSOption = new(value); } }

        /// <summary>
        /// Used to track the state of DeviceType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DeviceTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets DeviceType
        /// </summary>
        [JsonPropertyName("deviceType")]
        public string? DeviceType { get { return this.DeviceTypeOption; } set { this.DeviceTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Duration
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> DurationOption { get; private set; }

        /// <summary>
        /// session duration, in seconds
        /// </summary>
        /// <value>session duration, in seconds</value>
        [JsonPropertyName("duration")]
        public decimal? Duration { get { return this.DurationOption; } set { this.DurationOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SessionCreateDto {\n");
            sb.Append("  DeviceOS: ").Append(DeviceOS).Append("\n");
            sb.Append("  DeviceType: ").Append(DeviceType).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Duration (decimal) minimum
            if (this.DurationOption.IsSet && this.DurationOption.Value < (decimal)1)
            {
                yield return new ValidationResult("Invalid value for Duration, must be a value greater than or equal to 1.", new [] { "Duration" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SessionCreateDto" />
    /// </summary>
    public class SessionCreateDtoJsonConverter : JsonConverter<SessionCreateDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="SessionCreateDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SessionCreateDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> deviceOS = default;
            Option<string?> deviceType = default;
            Option<decimal?> duration = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "deviceOS":
                            deviceOS = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "deviceType":
                            deviceType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "duration":
                            duration = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (deviceOS.IsSet && deviceOS.Value == null)
                throw new ArgumentNullException(nameof(deviceOS), "Property is not nullable for class SessionCreateDto.");

            if (deviceType.IsSet && deviceType.Value == null)
                throw new ArgumentNullException(nameof(deviceType), "Property is not nullable for class SessionCreateDto.");

            if (duration.IsSet && duration.Value == null)
                throw new ArgumentNullException(nameof(duration), "Property is not nullable for class SessionCreateDto.");

            return new SessionCreateDto(deviceOS, deviceType, duration);
        }

        /// <summary>
        /// Serializes a <see cref="SessionCreateDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sessionCreateDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SessionCreateDto sessionCreateDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, sessionCreateDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SessionCreateDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sessionCreateDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SessionCreateDto sessionCreateDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (sessionCreateDto.DeviceOSOption.IsSet && sessionCreateDto.DeviceOS == null)
                throw new ArgumentNullException(nameof(sessionCreateDto.DeviceOS), "Property is required for class SessionCreateDto.");

            if (sessionCreateDto.DeviceTypeOption.IsSet && sessionCreateDto.DeviceType == null)
                throw new ArgumentNullException(nameof(sessionCreateDto.DeviceType), "Property is required for class SessionCreateDto.");

            if (sessionCreateDto.DeviceOSOption.IsSet)
                writer.WriteString("deviceOS", sessionCreateDto.DeviceOS);

            if (sessionCreateDto.DeviceTypeOption.IsSet)
                writer.WriteString("deviceType", sessionCreateDto.DeviceType);

            if (sessionCreateDto.DurationOption.IsSet)
                writer.WriteNumber("duration", sessionCreateDto.DurationOption.Value!.Value);
        }
    }
}
