// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// MemoryCreateDto
    /// </summary>
    public partial class MemoryCreateDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MemoryCreateDto" /> class.
        /// </summary>
        /// <param name="data">data</param>
        /// <param name="memoryAt">memoryAt</param>
        /// <param name="type">type</param>
        /// <param name="assetIds">assetIds</param>
        /// <param name="isSaved">isSaved</param>
        /// <param name="seenAt">seenAt</param>
        [JsonConstructor]
        public MemoryCreateDto(OnThisDayDto data, DateTime memoryAt, MemoryType type, Option<List<Guid>?> assetIds = default, Option<bool?> isSaved = default, Option<DateTime?> seenAt = default)
        {
            Data = data;
            MemoryAt = memoryAt;
            Type = type;
            AssetIdsOption = assetIds;
            IsSavedOption = isSaved;
            SeenAtOption = seenAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public MemoryType Type { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [JsonPropertyName("data")]
        public OnThisDayDto Data { get; set; }

        /// <summary>
        /// Gets or Sets MemoryAt
        /// </summary>
        [JsonPropertyName("memoryAt")]
        public DateTime MemoryAt { get; set; }

        /// <summary>
        /// Used to track the state of AssetIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Guid>?> AssetIdsOption { get; private set; }

        /// <summary>
        /// Gets or Sets AssetIds
        /// </summary>
        [JsonPropertyName("assetIds")]
        public List<Guid>? AssetIds { get { return this.AssetIdsOption; } set { this.AssetIdsOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsSaved
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsSavedOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsSaved
        /// </summary>
        [JsonPropertyName("isSaved")]
        public bool? IsSaved { get { return this.IsSavedOption; } set { this.IsSavedOption = new(value); } }

        /// <summary>
        /// Used to track the state of SeenAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> SeenAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets SeenAt
        /// </summary>
        [JsonPropertyName("seenAt")]
        public DateTime? SeenAt { get { return this.SeenAtOption; } set { this.SeenAtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MemoryCreateDto {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  MemoryAt: ").Append(MemoryAt).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AssetIds: ").Append(AssetIds).Append("\n");
            sb.Append("  IsSaved: ").Append(IsSaved).Append("\n");
            sb.Append("  SeenAt: ").Append(SeenAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MemoryCreateDto" />
    /// </summary>
    public class MemoryCreateDtoJsonConverter : JsonConverter<MemoryCreateDto>
    {
        /// <summary>
        /// The format to use to serialize MemoryAt
        /// </summary>
        public static string MemoryAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize SeenAt
        /// </summary>
        public static string SeenAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="MemoryCreateDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MemoryCreateDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<OnThisDayDto?> data = default;
            Option<DateTime?> memoryAt = default;
            Option<MemoryType?> type = default;
            Option<List<Guid>?> assetIds = default;
            Option<bool?> isSaved = default;
            Option<DateTime?> seenAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "data":
                            data = new Option<OnThisDayDto?>(JsonSerializer.Deserialize<OnThisDayDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "memoryAt":
                            memoryAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<MemoryType?>(MemoryTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "assetIds":
                            assetIds = new Option<List<Guid>?>(JsonSerializer.Deserialize<List<Guid>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "isSaved":
                            isSaved = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "seenAt":
                            seenAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!data.IsSet)
                throw new ArgumentException("Property is required for class MemoryCreateDto.", nameof(data));

            if (!memoryAt.IsSet)
                throw new ArgumentException("Property is required for class MemoryCreateDto.", nameof(memoryAt));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class MemoryCreateDto.", nameof(type));

            if (data.IsSet && data.Value == null)
                throw new ArgumentNullException(nameof(data), "Property is not nullable for class MemoryCreateDto.");

            if (memoryAt.IsSet && memoryAt.Value == null)
                throw new ArgumentNullException(nameof(memoryAt), "Property is not nullable for class MemoryCreateDto.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class MemoryCreateDto.");

            if (assetIds.IsSet && assetIds.Value == null)
                throw new ArgumentNullException(nameof(assetIds), "Property is not nullable for class MemoryCreateDto.");

            if (isSaved.IsSet && isSaved.Value == null)
                throw new ArgumentNullException(nameof(isSaved), "Property is not nullable for class MemoryCreateDto.");

            if (seenAt.IsSet && seenAt.Value == null)
                throw new ArgumentNullException(nameof(seenAt), "Property is not nullable for class MemoryCreateDto.");

            return new MemoryCreateDto(data.Value!, memoryAt.Value!.Value!, type.Value!.Value!, assetIds, isSaved, seenAt);
        }

        /// <summary>
        /// Serializes a <see cref="MemoryCreateDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="memoryCreateDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MemoryCreateDto memoryCreateDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, memoryCreateDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MemoryCreateDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="memoryCreateDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MemoryCreateDto memoryCreateDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (memoryCreateDto.Data == null)
                throw new ArgumentNullException(nameof(memoryCreateDto.Data), "Property is required for class MemoryCreateDto.");

            if (memoryCreateDto.AssetIdsOption.IsSet && memoryCreateDto.AssetIds == null)
                throw new ArgumentNullException(nameof(memoryCreateDto.AssetIds), "Property is required for class MemoryCreateDto.");

            writer.WritePropertyName("data");
            JsonSerializer.Serialize(writer, memoryCreateDto.Data, jsonSerializerOptions);
            writer.WriteString("memoryAt", memoryCreateDto.MemoryAt.ToString(MemoryAtFormat));

            var typeRawValue = MemoryTypeValueConverter.ToJsonValue(memoryCreateDto.Type);
            writer.WriteString("type", typeRawValue);

            if (memoryCreateDto.AssetIdsOption.IsSet)
            {
                writer.WritePropertyName("assetIds");
                JsonSerializer.Serialize(writer, memoryCreateDto.AssetIds, jsonSerializerOptions);
            }
            if (memoryCreateDto.IsSavedOption.IsSet)
                writer.WriteBoolean("isSaved", memoryCreateDto.IsSavedOption.Value!.Value);

            if (memoryCreateDto.SeenAtOption.IsSet)
                writer.WriteString("seenAt", memoryCreateDto.SeenAtOption.Value!.Value.ToString(SeenAtFormat));
        }
    }
}
