// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// APIKeyUpdateDto
    /// </summary>
    public partial class APIKeyUpdateDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="APIKeyUpdateDto" /> class.
        /// </summary>
        /// <param name="name">name</param>
        /// <param name="permissions">permissions</param>
        [JsonConstructor]
        public APIKeyUpdateDto(Option<string?> name = default, Option<List<Permission>?> permissions = default)
        {
            NameOption = name;
            PermissionsOption = permissions;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Permissions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Permission>?> PermissionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Permissions
        /// </summary>
        [JsonPropertyName("permissions")]
        public List<Permission>? Permissions { get { return this.PermissionsOption; } set { this.PermissionsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class APIKeyUpdateDto {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="APIKeyUpdateDto" />
    /// </summary>
    public class APIKeyUpdateDtoJsonConverter : JsonConverter<APIKeyUpdateDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="APIKeyUpdateDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override APIKeyUpdateDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<List<Permission>?> permissions = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "permissions":
                            permissions = new Option<List<Permission>?>(JsonSerializer.Deserialize<List<Permission>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class APIKeyUpdateDto.");

            if (permissions.IsSet && permissions.Value == null)
                throw new ArgumentNullException(nameof(permissions), "Property is not nullable for class APIKeyUpdateDto.");

            return new APIKeyUpdateDto(name, permissions);
        }

        /// <summary>
        /// Serializes a <see cref="APIKeyUpdateDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="aPIKeyUpdateDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, APIKeyUpdateDto aPIKeyUpdateDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, aPIKeyUpdateDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="APIKeyUpdateDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="aPIKeyUpdateDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, APIKeyUpdateDto aPIKeyUpdateDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (aPIKeyUpdateDto.NameOption.IsSet && aPIKeyUpdateDto.Name == null)
                throw new ArgumentNullException(nameof(aPIKeyUpdateDto.Name), "Property is required for class APIKeyUpdateDto.");

            if (aPIKeyUpdateDto.PermissionsOption.IsSet && aPIKeyUpdateDto.Permissions == null)
                throw new ArgumentNullException(nameof(aPIKeyUpdateDto.Permissions), "Property is required for class APIKeyUpdateDto.");

            if (aPIKeyUpdateDto.NameOption.IsSet)
                writer.WriteString("name", aPIKeyUpdateDto.Name);

            if (aPIKeyUpdateDto.PermissionsOption.IsSet)
            {
                writer.WritePropertyName("permissions");
                JsonSerializer.Serialize(writer, aPIKeyUpdateDto.Permissions, jsonSerializerOptions);
            }
        }
    }
}
