// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ValidateLibraryDto
    /// </summary>
    public partial class ValidateLibraryDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidateLibraryDto" /> class.
        /// </summary>
        /// <param name="exclusionPatterns">exclusionPatterns</param>
        /// <param name="importPaths">importPaths</param>
        [JsonConstructor]
        public ValidateLibraryDto(Option<HashSet<string>?> exclusionPatterns = default, Option<HashSet<string>?> importPaths = default)
        {
            ExclusionPatternsOption = exclusionPatterns;
            ImportPathsOption = importPaths;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ExclusionPatterns
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<HashSet<string>?> ExclusionPatternsOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExclusionPatterns
        /// </summary>
        [JsonPropertyName("exclusionPatterns")]
        public HashSet<string>? ExclusionPatterns { get { return this.ExclusionPatternsOption; } set { this.ExclusionPatternsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ImportPaths
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<HashSet<string>?> ImportPathsOption { get; private set; }

        /// <summary>
        /// Gets or Sets ImportPaths
        /// </summary>
        [JsonPropertyName("importPaths")]
        public HashSet<string>? ImportPaths { get { return this.ImportPathsOption; } set { this.ImportPathsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ValidateLibraryDto {\n");
            sb.Append("  ExclusionPatterns: ").Append(ExclusionPatterns).Append("\n");
            sb.Append("  ImportPaths: ").Append(ImportPaths).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ValidateLibraryDto" />
    /// </summary>
    public class ValidateLibraryDtoJsonConverter : JsonConverter<ValidateLibraryDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="ValidateLibraryDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ValidateLibraryDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<HashSet<string>?> exclusionPatterns = default;
            Option<HashSet<string>?> importPaths = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "exclusionPatterns":
                            exclusionPatterns = new Option<HashSet<string>?>(JsonSerializer.Deserialize<HashSet<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "importPaths":
                            importPaths = new Option<HashSet<string>?>(JsonSerializer.Deserialize<HashSet<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (exclusionPatterns.IsSet && exclusionPatterns.Value == null)
                throw new ArgumentNullException(nameof(exclusionPatterns), "Property is not nullable for class ValidateLibraryDto.");

            if (importPaths.IsSet && importPaths.Value == null)
                throw new ArgumentNullException(nameof(importPaths), "Property is not nullable for class ValidateLibraryDto.");

            return new ValidateLibraryDto(exclusionPatterns, importPaths);
        }

        /// <summary>
        /// Serializes a <see cref="ValidateLibraryDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="validateLibraryDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ValidateLibraryDto validateLibraryDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, validateLibraryDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ValidateLibraryDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="validateLibraryDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ValidateLibraryDto validateLibraryDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (validateLibraryDto.ExclusionPatternsOption.IsSet && validateLibraryDto.ExclusionPatterns == null)
                throw new ArgumentNullException(nameof(validateLibraryDto.ExclusionPatterns), "Property is required for class ValidateLibraryDto.");

            if (validateLibraryDto.ImportPathsOption.IsSet && validateLibraryDto.ImportPaths == null)
                throw new ArgumentNullException(nameof(validateLibraryDto.ImportPaths), "Property is required for class ValidateLibraryDto.");

            if (validateLibraryDto.ExclusionPatternsOption.IsSet)
            {
                writer.WritePropertyName("exclusionPatterns");
                JsonSerializer.Serialize(writer, validateLibraryDto.ExclusionPatterns, jsonSerializerOptions);
            }
            if (validateLibraryDto.ImportPathsOption.IsSet)
            {
                writer.WritePropertyName("importPaths");
                JsonSerializer.Serialize(writer, validateLibraryDto.ImportPaths, jsonSerializerOptions);
            }
        }
    }
}
