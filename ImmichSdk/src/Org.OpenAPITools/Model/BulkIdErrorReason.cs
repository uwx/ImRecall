// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines BulkIdErrorReason
    /// </summary>
    public enum BulkIdErrorReason
    {
        /// <summary>
        /// Enum Duplicate for value: duplicate
        /// </summary>
        Duplicate = 1,

        /// <summary>
        /// Enum NoPermission for value: no_permission
        /// </summary>
        NoPermission = 2,

        /// <summary>
        /// Enum NotFound for value: not_found
        /// </summary>
        NotFound = 3,

        /// <summary>
        /// Enum Unknown for value: unknown
        /// </summary>
        Unknown = 4
    }

    /// <summary>
    /// Converts <see cref="BulkIdErrorReason"/> to and from the JSON value
    /// </summary>
    public static class BulkIdErrorReasonValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="BulkIdErrorReason"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static BulkIdErrorReason FromString(string value)
        {
            if (value.Equals("duplicate"))
                return BulkIdErrorReason.Duplicate;

            if (value.Equals("no_permission"))
                return BulkIdErrorReason.NoPermission;

            if (value.Equals("not_found"))
                return BulkIdErrorReason.NotFound;

            if (value.Equals("unknown"))
                return BulkIdErrorReason.Unknown;

            throw new NotImplementedException($"Could not convert value to type BulkIdErrorReason: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="BulkIdErrorReason"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static BulkIdErrorReason? FromStringOrDefault(string value)
        {
            if (value.Equals("duplicate"))
                return BulkIdErrorReason.Duplicate;

            if (value.Equals("no_permission"))
                return BulkIdErrorReason.NoPermission;

            if (value.Equals("not_found"))
                return BulkIdErrorReason.NotFound;

            if (value.Equals("unknown"))
                return BulkIdErrorReason.Unknown;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="BulkIdErrorReason"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(BulkIdErrorReason value)
        {
            if (value == BulkIdErrorReason.Duplicate)
                return "duplicate";

            if (value == BulkIdErrorReason.NoPermission)
                return "no_permission";

            if (value == BulkIdErrorReason.NotFound)
                return "not_found";

            if (value == BulkIdErrorReason.Unknown)
                return "unknown";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BulkIdErrorReason"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class BulkIdErrorReasonJsonConverter : JsonConverter<BulkIdErrorReason>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override BulkIdErrorReason Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            BulkIdErrorReason? result = rawValue == null
                ? null
                : BulkIdErrorReasonValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the BulkIdErrorReason to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="bulkIdErrorReason"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, BulkIdErrorReason bulkIdErrorReason, JsonSerializerOptions options)
        {
            writer.WriteStringValue(BulkIdErrorReasonValueConverter.ToJsonValue(bulkIdErrorReason).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BulkIdErrorReason"/>
    /// </summary>
    public class BulkIdErrorReasonNullableJsonConverter : JsonConverter<BulkIdErrorReason?>
    {
        /// <summary>
        /// Returns a BulkIdErrorReason from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override BulkIdErrorReason? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            BulkIdErrorReason? result = rawValue == null
                ? null
                : BulkIdErrorReasonValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the BulkIdErrorReason to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="bulkIdErrorReason"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, BulkIdErrorReason? bulkIdErrorReason, JsonSerializerOptions options)
        {
            writer.WriteStringValue(bulkIdErrorReason.HasValue ? BulkIdErrorReasonValueConverter.ToJsonValue(bulkIdErrorReason.Value).ToString() : "null");
        }
    }
}
