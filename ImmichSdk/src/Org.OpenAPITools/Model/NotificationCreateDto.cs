// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// NotificationCreateDto
    /// </summary>
    public partial class NotificationCreateDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationCreateDto" /> class.
        /// </summary>
        /// <param name="title">title</param>
        /// <param name="userId">userId</param>
        /// <param name="data">data</param>
        /// <param name="description">description</param>
        /// <param name="level">level</param>
        /// <param name="readAt">readAt</param>
        /// <param name="type">type</param>
        [JsonConstructor]
        public NotificationCreateDto(string title, Guid userId, Option<Object?> data = default, Option<string?> description = default, Option<NotificationLevel?> level = default, Option<DateTime?> readAt = default, Option<NotificationType?> type = default)
        {
            Title = title;
            UserId = userId;
            DataOption = data;
            DescriptionOption = description;
            LevelOption = level;
            ReadAtOption = readAt;
            TypeOption = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Level
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<NotificationLevel?> LevelOption { get; private set; }

        /// <summary>
        /// Gets or Sets Level
        /// </summary>
        [JsonPropertyName("level")]
        public NotificationLevel? Level { get { return this.LevelOption; } set { this.LevelOption = new(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<NotificationType?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public NotificationType? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("userId")]
        public Guid UserId { get; set; }

        /// <summary>
        /// Used to track the state of Data
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> DataOption { get; private set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [JsonPropertyName("data")]
        public Object? Data { get { return this.DataOption; } set { this.DataOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReadAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> ReadAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReadAt
        /// </summary>
        [JsonPropertyName("readAt")]
        public DateTime? ReadAt { get { return this.ReadAtOption; } set { this.ReadAtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NotificationCreateDto {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  ReadAt: ").Append(ReadAt).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="NotificationCreateDto" />
    /// </summary>
    public class NotificationCreateDtoJsonConverter : JsonConverter<NotificationCreateDto>
    {
        /// <summary>
        /// The format to use to serialize ReadAt
        /// </summary>
        public static string ReadAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="NotificationCreateDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override NotificationCreateDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> title = default;
            Option<Guid?> userId = default;
            Option<Object?> data = default;
            Option<string?> description = default;
            Option<NotificationLevel?> level = default;
            Option<DateTime?> readAt = default;
            Option<NotificationType?> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "userId":
                            userId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "data":
                            data = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "level":
                            string? levelRawValue = utf8JsonReader.GetString();
                            if (levelRawValue != null)
                                level = new Option<NotificationLevel?>(NotificationLevelValueConverter.FromStringOrDefault(levelRawValue));
                            break;
                        case "readAt":
                            readAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<NotificationType?>(NotificationTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!title.IsSet)
                throw new ArgumentException("Property is required for class NotificationCreateDto.", nameof(title));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class NotificationCreateDto.", nameof(userId));

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class NotificationCreateDto.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class NotificationCreateDto.");

            if (data.IsSet && data.Value == null)
                throw new ArgumentNullException(nameof(data), "Property is not nullable for class NotificationCreateDto.");

            if (level.IsSet && level.Value == null)
                throw new ArgumentNullException(nameof(level), "Property is not nullable for class NotificationCreateDto.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class NotificationCreateDto.");

            return new NotificationCreateDto(title.Value!, userId.Value!.Value!, data, description, level, readAt, type);
        }

        /// <summary>
        /// Serializes a <see cref="NotificationCreateDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="notificationCreateDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, NotificationCreateDto notificationCreateDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, notificationCreateDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="NotificationCreateDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="notificationCreateDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, NotificationCreateDto notificationCreateDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (notificationCreateDto.Title == null)
                throw new ArgumentNullException(nameof(notificationCreateDto.Title), "Property is required for class NotificationCreateDto.");

            if (notificationCreateDto.DataOption.IsSet && notificationCreateDto.Data == null)
                throw new ArgumentNullException(nameof(notificationCreateDto.Data), "Property is required for class NotificationCreateDto.");

            writer.WriteString("title", notificationCreateDto.Title);

            writer.WriteString("userId", notificationCreateDto.UserId);

            if (notificationCreateDto.DataOption.IsSet)
            {
                writer.WritePropertyName("data");
                JsonSerializer.Serialize(writer, notificationCreateDto.Data, jsonSerializerOptions);
            }
            if (notificationCreateDto.DescriptionOption.IsSet)
                if (notificationCreateDto.DescriptionOption.Value != null)
                    writer.WriteString("description", notificationCreateDto.Description);
                else
                    writer.WriteNull("description");

            if (notificationCreateDto.LevelOption.IsSet)
            {
                var levelRawValue = NotificationLevelValueConverter.ToJsonValue(notificationCreateDto.Level!.Value);
                writer.WriteString("level", levelRawValue);
            }
            if (notificationCreateDto.ReadAtOption.IsSet)
                if (notificationCreateDto.ReadAtOption.Value != null)
                    writer.WriteString("readAt", notificationCreateDto.ReadAtOption.Value!.Value.ToString(ReadAtFormat));
                else
                    writer.WriteNull("readAt");

            if (notificationCreateDto.TypeOption.IsSet)
            {
                var typeRawValue = NotificationTypeValueConverter.ToJsonValue(notificationCreateDto.Type!.Value);
                writer.WriteString("type", typeRawValue);
            }
        }
    }
}
