// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BulkIdResponseDto
    /// </summary>
    public partial class BulkIdResponseDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BulkIdResponseDto" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="success">success</param>
        /// <param name="error">error</param>
        [JsonConstructor]
        public BulkIdResponseDto(string id, bool success, Option<ErrorEnum?> error = default)
        {
            Id = id;
            Success = success;
            ErrorOption = error;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Error
        /// </summary>
        public enum ErrorEnum
        {
            /// <summary>
            /// Enum Duplicate for value: duplicate
            /// </summary>
            Duplicate = 1,

            /// <summary>
            /// Enum NoPermission for value: no_permission
            /// </summary>
            NoPermission = 2,

            /// <summary>
            /// Enum NotFound for value: not_found
            /// </summary>
            NotFound = 3,

            /// <summary>
            /// Enum Unknown for value: unknown
            /// </summary>
            Unknown = 4
        }

        /// <summary>
        /// Returns a <see cref="ErrorEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ErrorEnum ErrorEnumFromString(string value)
        {
            if (value.Equals("duplicate"))
                return ErrorEnum.Duplicate;

            if (value.Equals("no_permission"))
                return ErrorEnum.NoPermission;

            if (value.Equals("not_found"))
                return ErrorEnum.NotFound;

            if (value.Equals("unknown"))
                return ErrorEnum.Unknown;

            throw new NotImplementedException($"Could not convert value to type ErrorEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ErrorEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ErrorEnum? ErrorEnumFromStringOrDefault(string value)
        {
            if (value.Equals("duplicate"))
                return ErrorEnum.Duplicate;

            if (value.Equals("no_permission"))
                return ErrorEnum.NoPermission;

            if (value.Equals("not_found"))
                return ErrorEnum.NotFound;

            if (value.Equals("unknown"))
                return ErrorEnum.Unknown;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ErrorEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ErrorEnumToJsonValue(ErrorEnum? value)
        {
            if (value == ErrorEnum.Duplicate)
                return "duplicate";

            if (value == ErrorEnum.NoPermission)
                return "no_permission";

            if (value == ErrorEnum.NotFound)
                return "not_found";

            if (value == ErrorEnum.Unknown)
                return "unknown";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Error
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ErrorEnum?> ErrorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [JsonPropertyName("error")]
        public ErrorEnum? Error { get { return this.ErrorOption; } set { this.ErrorOption = new(value); } }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [JsonPropertyName("success")]
        public bool Success { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BulkIdResponseDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BulkIdResponseDto" />
    /// </summary>
    public class BulkIdResponseDtoJsonConverter : JsonConverter<BulkIdResponseDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="BulkIdResponseDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BulkIdResponseDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<bool?> success = default;
            Option<BulkIdResponseDto.ErrorEnum?> error = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "success":
                            success = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "error":
                            string? errorRawValue = utf8JsonReader.GetString();
                            if (errorRawValue != null)
                                error = new Option<BulkIdResponseDto.ErrorEnum?>(BulkIdResponseDto.ErrorEnumFromStringOrDefault(errorRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class BulkIdResponseDto.", nameof(id));

            if (!success.IsSet)
                throw new ArgumentException("Property is required for class BulkIdResponseDto.", nameof(success));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class BulkIdResponseDto.");

            if (success.IsSet && success.Value == null)
                throw new ArgumentNullException(nameof(success), "Property is not nullable for class BulkIdResponseDto.");

            if (error.IsSet && error.Value == null)
                throw new ArgumentNullException(nameof(error), "Property is not nullable for class BulkIdResponseDto.");

            return new BulkIdResponseDto(id.Value!, success.Value!.Value!, error);
        }

        /// <summary>
        /// Serializes a <see cref="BulkIdResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="bulkIdResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BulkIdResponseDto bulkIdResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, bulkIdResponseDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BulkIdResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="bulkIdResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BulkIdResponseDto bulkIdResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (bulkIdResponseDto.Id == null)
                throw new ArgumentNullException(nameof(bulkIdResponseDto.Id), "Property is required for class BulkIdResponseDto.");

            writer.WriteString("id", bulkIdResponseDto.Id);

            writer.WriteBoolean("success", bulkIdResponseDto.Success);

            var errorRawValue = BulkIdResponseDto.ErrorEnumToJsonValue(bulkIdResponseDto.ErrorOption.Value!.Value);
            writer.WriteString("error", errorRawValue);
        }
    }
}
