// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// UserAdminResponseDto
    /// </summary>
    public partial class UserAdminResponseDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserAdminResponseDto" /> class.
        /// </summary>
        /// <param name="avatarColor">avatarColor</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="email">email</param>
        /// <param name="id">id</param>
        /// <param name="isAdmin">isAdmin</param>
        /// <param name="name">name</param>
        /// <param name="oauthId">oauthId</param>
        /// <param name="profileChangedAt">profileChangedAt</param>
        /// <param name="profileImagePath">profileImagePath</param>
        /// <param name="shouldChangePassword">shouldChangePassword</param>
        /// <param name="status">status</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="deletedAt">deletedAt</param>
        /// <param name="license">license</param>
        /// <param name="quotaSizeInBytes">quotaSizeInBytes</param>
        /// <param name="quotaUsageInBytes">quotaUsageInBytes</param>
        /// <param name="storageLabel">storageLabel</param>
        [JsonConstructor]
        public UserAdminResponseDto(UserAvatarColor avatarColor, DateTime createdAt, string email, string id, bool isAdmin, string name, string oauthId, DateTime profileChangedAt, string profileImagePath, bool shouldChangePassword, UserStatus status, DateTime updatedAt, DateTime? deletedAt = default, UserLicense? license = default, long? quotaSizeInBytes = default, long? quotaUsageInBytes = default, string? storageLabel = default)
        {
            AvatarColor = avatarColor;
            CreatedAt = createdAt;
            Email = email;
            Id = id;
            IsAdmin = isAdmin;
            Name = name;
            OauthId = oauthId;
            ProfileChangedAt = profileChangedAt;
            ProfileImagePath = profileImagePath;
            ShouldChangePassword = shouldChangePassword;
            Status = status;
            UpdatedAt = updatedAt;
            DeletedAt = deletedAt;
            License = license;
            QuotaSizeInBytes = quotaSizeInBytes;
            QuotaUsageInBytes = quotaUsageInBytes;
            StorageLabel = storageLabel;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets AvatarColor
        /// </summary>
        [JsonPropertyName("avatarColor")]
        public UserAvatarColor AvatarColor { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public UserStatus Status { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [JsonPropertyName("email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IsAdmin
        /// </summary>
        [JsonPropertyName("isAdmin")]
        public bool IsAdmin { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OauthId
        /// </summary>
        [JsonPropertyName("oauthId")]
        public string OauthId { get; set; }

        /// <summary>
        /// Gets or Sets ProfileChangedAt
        /// </summary>
        [JsonPropertyName("profileChangedAt")]
        public DateTime ProfileChangedAt { get; set; }

        /// <summary>
        /// Gets or Sets ProfileImagePath
        /// </summary>
        [JsonPropertyName("profileImagePath")]
        public string ProfileImagePath { get; set; }

        /// <summary>
        /// Gets or Sets ShouldChangePassword
        /// </summary>
        [JsonPropertyName("shouldChangePassword")]
        public bool ShouldChangePassword { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets DeletedAt
        /// </summary>
        [JsonPropertyName("deletedAt")]
        public DateTime? DeletedAt { get; set; }

        /// <summary>
        /// Gets or Sets License
        /// </summary>
        [JsonPropertyName("license")]
        public UserLicense? License { get; set; }

        /// <summary>
        /// Gets or Sets QuotaSizeInBytes
        /// </summary>
        [JsonPropertyName("quotaSizeInBytes")]
        public long? QuotaSizeInBytes { get; set; }

        /// <summary>
        /// Gets or Sets QuotaUsageInBytes
        /// </summary>
        [JsonPropertyName("quotaUsageInBytes")]
        public long? QuotaUsageInBytes { get; set; }

        /// <summary>
        /// Gets or Sets StorageLabel
        /// </summary>
        [JsonPropertyName("storageLabel")]
        public string? StorageLabel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserAdminResponseDto {\n");
            sb.Append("  AvatarColor: ").Append(AvatarColor).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsAdmin: ").Append(IsAdmin).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OauthId: ").Append(OauthId).Append("\n");
            sb.Append("  ProfileChangedAt: ").Append(ProfileChangedAt).Append("\n");
            sb.Append("  ProfileImagePath: ").Append(ProfileImagePath).Append("\n");
            sb.Append("  ShouldChangePassword: ").Append(ShouldChangePassword).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  DeletedAt: ").Append(DeletedAt).Append("\n");
            sb.Append("  License: ").Append(License).Append("\n");
            sb.Append("  QuotaSizeInBytes: ").Append(QuotaSizeInBytes).Append("\n");
            sb.Append("  QuotaUsageInBytes: ").Append(QuotaUsageInBytes).Append("\n");
            sb.Append("  StorageLabel: ").Append(StorageLabel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserAdminResponseDto" />
    /// </summary>
    public class UserAdminResponseDtoJsonConverter : JsonConverter<UserAdminResponseDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ProfileChangedAt
        /// </summary>
        public static string ProfileChangedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DeletedAt
        /// </summary>
        public static string DeletedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="UserAdminResponseDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UserAdminResponseDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<UserAvatarColor?> avatarColor = default;
            Option<DateTime?> createdAt = default;
            Option<string?> email = default;
            Option<string?> id = default;
            Option<bool?> isAdmin = default;
            Option<string?> name = default;
            Option<string?> oauthId = default;
            Option<DateTime?> profileChangedAt = default;
            Option<string?> profileImagePath = default;
            Option<bool?> shouldChangePassword = default;
            Option<UserStatus?> status = default;
            Option<DateTime?> updatedAt = default;
            Option<DateTime?> deletedAt = default;
            Option<UserLicense?> license = default;
            Option<long?> quotaSizeInBytes = default;
            Option<long?> quotaUsageInBytes = default;
            Option<string?> storageLabel = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "avatarColor":
                            string? avatarColorRawValue = utf8JsonReader.GetString();
                            if (avatarColorRawValue != null)
                                avatarColor = new Option<UserAvatarColor?>(UserAvatarColorValueConverter.FromStringOrDefault(avatarColorRawValue));
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "isAdmin":
                            isAdmin = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "oauthId":
                            oauthId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "profileChangedAt":
                            profileChangedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "profileImagePath":
                            profileImagePath = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "shouldChangePassword":
                            shouldChangePassword = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<UserStatus?>(UserStatusValueConverter.FromStringOrDefault(statusRawValue));
                            break;
                        case "updatedAt":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "deletedAt":
                            deletedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "license":
                            license = new Option<UserLicense?>(JsonSerializer.Deserialize<UserLicense>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "quotaSizeInBytes":
                            quotaSizeInBytes = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "quotaUsageInBytes":
                            quotaUsageInBytes = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "storageLabel":
                            storageLabel = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!avatarColor.IsSet)
                throw new ArgumentException("Property is required for class UserAdminResponseDto.", nameof(avatarColor));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class UserAdminResponseDto.", nameof(createdAt));

            if (!email.IsSet)
                throw new ArgumentException("Property is required for class UserAdminResponseDto.", nameof(email));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class UserAdminResponseDto.", nameof(id));

            if (!isAdmin.IsSet)
                throw new ArgumentException("Property is required for class UserAdminResponseDto.", nameof(isAdmin));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class UserAdminResponseDto.", nameof(name));

            if (!oauthId.IsSet)
                throw new ArgumentException("Property is required for class UserAdminResponseDto.", nameof(oauthId));

            if (!profileChangedAt.IsSet)
                throw new ArgumentException("Property is required for class UserAdminResponseDto.", nameof(profileChangedAt));

            if (!profileImagePath.IsSet)
                throw new ArgumentException("Property is required for class UserAdminResponseDto.", nameof(profileImagePath));

            if (!shouldChangePassword.IsSet)
                throw new ArgumentException("Property is required for class UserAdminResponseDto.", nameof(shouldChangePassword));

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class UserAdminResponseDto.", nameof(status));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class UserAdminResponseDto.", nameof(updatedAt));

            if (!deletedAt.IsSet)
                throw new ArgumentException("Property is required for class UserAdminResponseDto.", nameof(deletedAt));

            if (!license.IsSet)
                throw new ArgumentException("Property is required for class UserAdminResponseDto.", nameof(license));

            if (!quotaSizeInBytes.IsSet)
                throw new ArgumentException("Property is required for class UserAdminResponseDto.", nameof(quotaSizeInBytes));

            if (!quotaUsageInBytes.IsSet)
                throw new ArgumentException("Property is required for class UserAdminResponseDto.", nameof(quotaUsageInBytes));

            if (!storageLabel.IsSet)
                throw new ArgumentException("Property is required for class UserAdminResponseDto.", nameof(storageLabel));

            if (avatarColor.IsSet && avatarColor.Value == null)
                throw new ArgumentNullException(nameof(avatarColor), "Property is not nullable for class UserAdminResponseDto.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class UserAdminResponseDto.");

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class UserAdminResponseDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class UserAdminResponseDto.");

            if (isAdmin.IsSet && isAdmin.Value == null)
                throw new ArgumentNullException(nameof(isAdmin), "Property is not nullable for class UserAdminResponseDto.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class UserAdminResponseDto.");

            if (oauthId.IsSet && oauthId.Value == null)
                throw new ArgumentNullException(nameof(oauthId), "Property is not nullable for class UserAdminResponseDto.");

            if (profileChangedAt.IsSet && profileChangedAt.Value == null)
                throw new ArgumentNullException(nameof(profileChangedAt), "Property is not nullable for class UserAdminResponseDto.");

            if (profileImagePath.IsSet && profileImagePath.Value == null)
                throw new ArgumentNullException(nameof(profileImagePath), "Property is not nullable for class UserAdminResponseDto.");

            if (shouldChangePassword.IsSet && shouldChangePassword.Value == null)
                throw new ArgumentNullException(nameof(shouldChangePassword), "Property is not nullable for class UserAdminResponseDto.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class UserAdminResponseDto.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class UserAdminResponseDto.");

            return new UserAdminResponseDto(avatarColor.Value!.Value!, createdAt.Value!.Value!, email.Value!, id.Value!, isAdmin.Value!.Value!, name.Value!, oauthId.Value!, profileChangedAt.Value!.Value!, profileImagePath.Value!, shouldChangePassword.Value!.Value!, status.Value!.Value!, updatedAt.Value!.Value!, deletedAt.Value!, license.Value!, quotaSizeInBytes.Value!, quotaUsageInBytes.Value!, storageLabel.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="UserAdminResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userAdminResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UserAdminResponseDto userAdminResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, userAdminResponseDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UserAdminResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userAdminResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UserAdminResponseDto userAdminResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (userAdminResponseDto.Email == null)
                throw new ArgumentNullException(nameof(userAdminResponseDto.Email), "Property is required for class UserAdminResponseDto.");

            if (userAdminResponseDto.Id == null)
                throw new ArgumentNullException(nameof(userAdminResponseDto.Id), "Property is required for class UserAdminResponseDto.");

            if (userAdminResponseDto.Name == null)
                throw new ArgumentNullException(nameof(userAdminResponseDto.Name), "Property is required for class UserAdminResponseDto.");

            if (userAdminResponseDto.OauthId == null)
                throw new ArgumentNullException(nameof(userAdminResponseDto.OauthId), "Property is required for class UserAdminResponseDto.");

            if (userAdminResponseDto.ProfileImagePath == null)
                throw new ArgumentNullException(nameof(userAdminResponseDto.ProfileImagePath), "Property is required for class UserAdminResponseDto.");

            var avatarColorRawValue = UserAvatarColorValueConverter.ToJsonValue(userAdminResponseDto.AvatarColor);
            writer.WriteString("avatarColor", avatarColorRawValue);

            writer.WriteString("createdAt", userAdminResponseDto.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("email", userAdminResponseDto.Email);

            writer.WriteString("id", userAdminResponseDto.Id);

            writer.WriteBoolean("isAdmin", userAdminResponseDto.IsAdmin);

            writer.WriteString("name", userAdminResponseDto.Name);

            writer.WriteString("oauthId", userAdminResponseDto.OauthId);

            writer.WriteString("profileChangedAt", userAdminResponseDto.ProfileChangedAt.ToString(ProfileChangedAtFormat));

            writer.WriteString("profileImagePath", userAdminResponseDto.ProfileImagePath);

            writer.WriteBoolean("shouldChangePassword", userAdminResponseDto.ShouldChangePassword);

            var statusRawValue = UserStatusValueConverter.ToJsonValue(userAdminResponseDto.Status);
            writer.WriteString("status", statusRawValue);

            writer.WriteString("updatedAt", userAdminResponseDto.UpdatedAt.ToString(UpdatedAtFormat));

            if (userAdminResponseDto.DeletedAt != null)
                writer.WriteString("deletedAt", userAdminResponseDto.DeletedAt.Value.ToString(DeletedAtFormat));
            else
                writer.WriteNull("deletedAt");

            if (userAdminResponseDto.License != null)
            {
                writer.WritePropertyName("license");
                JsonSerializer.Serialize(writer, userAdminResponseDto.License, jsonSerializerOptions);
            }
            else
                writer.WriteNull("license");
            if (userAdminResponseDto.QuotaSizeInBytes != null)
                writer.WriteNumber("quotaSizeInBytes", userAdminResponseDto.QuotaSizeInBytes.Value);
            else
                writer.WriteNull("quotaSizeInBytes");

            if (userAdminResponseDto.QuotaUsageInBytes != null)
                writer.WriteNumber("quotaUsageInBytes", userAdminResponseDto.QuotaUsageInBytes.Value);
            else
                writer.WriteNull("quotaUsageInBytes");

            if (userAdminResponseDto.StorageLabel != null)
                writer.WriteString("storageLabel", userAdminResponseDto.StorageLabel);
            else
                writer.WriteNull("storageLabel");
        }
    }
}
