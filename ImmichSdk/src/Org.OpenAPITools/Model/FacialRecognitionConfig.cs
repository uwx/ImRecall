// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// FacialRecognitionConfig
    /// </summary>
    public partial class FacialRecognitionConfig : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FacialRecognitionConfig" /> class.
        /// </summary>
        /// <param name="enabled">enabled</param>
        /// <param name="maxDistance">maxDistance</param>
        /// <param name="minFaces">minFaces</param>
        /// <param name="minScore">minScore</param>
        /// <param name="modelName">modelName</param>
        [JsonConstructor]
        public FacialRecognitionConfig(bool enabled, double maxDistance, int minFaces, double minScore, string modelName)
        {
            Enabled = enabled;
            MaxDistance = maxDistance;
            MinFaces = minFaces;
            MinScore = minScore;
            ModelName = modelName;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [JsonPropertyName("enabled")]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets MaxDistance
        /// </summary>
        [JsonPropertyName("maxDistance")]
        public double MaxDistance { get; set; }

        /// <summary>
        /// Gets or Sets MinFaces
        /// </summary>
        [JsonPropertyName("minFaces")]
        public int MinFaces { get; set; }

        /// <summary>
        /// Gets or Sets MinScore
        /// </summary>
        [JsonPropertyName("minScore")]
        public double MinScore { get; set; }

        /// <summary>
        /// Gets or Sets ModelName
        /// </summary>
        [JsonPropertyName("modelName")]
        public string ModelName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FacialRecognitionConfig {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  MaxDistance: ").Append(MaxDistance).Append("\n");
            sb.Append("  MinFaces: ").Append(MinFaces).Append("\n");
            sb.Append("  MinScore: ").Append(MinScore).Append("\n");
            sb.Append("  ModelName: ").Append(ModelName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MaxDistance (double) maximum
            if (this.MaxDistance > (double)2)
            {
                yield return new ValidationResult("Invalid value for MaxDistance, must be a value less than or equal to 2.", new [] { "MaxDistance" });
            }

            // MaxDistance (double) minimum
            if (this.MaxDistance < (double)0.1)
            {
                yield return new ValidationResult("Invalid value for MaxDistance, must be a value greater than or equal to 0.1.", new [] { "MaxDistance" });
            }

            // MinFaces (int) minimum
            if (this.MinFaces < (int)1)
            {
                yield return new ValidationResult("Invalid value for MinFaces, must be a value greater than or equal to 1.", new [] { "MinFaces" });
            }

            // MinScore (double) maximum
            if (this.MinScore > (double)1)
            {
                yield return new ValidationResult("Invalid value for MinScore, must be a value less than or equal to 1.", new [] { "MinScore" });
            }

            // MinScore (double) minimum
            if (this.MinScore < (double)0.1)
            {
                yield return new ValidationResult("Invalid value for MinScore, must be a value greater than or equal to 0.1.", new [] { "MinScore" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FacialRecognitionConfig" />
    /// </summary>
    public class FacialRecognitionConfigJsonConverter : JsonConverter<FacialRecognitionConfig>
    {
        /// <summary>
        /// Deserializes json to <see cref="FacialRecognitionConfig" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FacialRecognitionConfig Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> enabled = default;
            Option<double?> maxDistance = default;
            Option<int?> minFaces = default;
            Option<double?> minScore = default;
            Option<string?> modelName = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "enabled":
                            enabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "maxDistance":
                            maxDistance = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "minFaces":
                            minFaces = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "minScore":
                            minScore = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "modelName":
                            modelName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!enabled.IsSet)
                throw new ArgumentException("Property is required for class FacialRecognitionConfig.", nameof(enabled));

            if (!maxDistance.IsSet)
                throw new ArgumentException("Property is required for class FacialRecognitionConfig.", nameof(maxDistance));

            if (!minFaces.IsSet)
                throw new ArgumentException("Property is required for class FacialRecognitionConfig.", nameof(minFaces));

            if (!minScore.IsSet)
                throw new ArgumentException("Property is required for class FacialRecognitionConfig.", nameof(minScore));

            if (!modelName.IsSet)
                throw new ArgumentException("Property is required for class FacialRecognitionConfig.", nameof(modelName));

            if (enabled.IsSet && enabled.Value == null)
                throw new ArgumentNullException(nameof(enabled), "Property is not nullable for class FacialRecognitionConfig.");

            if (maxDistance.IsSet && maxDistance.Value == null)
                throw new ArgumentNullException(nameof(maxDistance), "Property is not nullable for class FacialRecognitionConfig.");

            if (minFaces.IsSet && minFaces.Value == null)
                throw new ArgumentNullException(nameof(minFaces), "Property is not nullable for class FacialRecognitionConfig.");

            if (minScore.IsSet && minScore.Value == null)
                throw new ArgumentNullException(nameof(minScore), "Property is not nullable for class FacialRecognitionConfig.");

            if (modelName.IsSet && modelName.Value == null)
                throw new ArgumentNullException(nameof(modelName), "Property is not nullable for class FacialRecognitionConfig.");

            return new FacialRecognitionConfig(enabled.Value!.Value!, maxDistance.Value!.Value!, minFaces.Value!.Value!, minScore.Value!.Value!, modelName.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="FacialRecognitionConfig" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="facialRecognitionConfig"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FacialRecognitionConfig facialRecognitionConfig, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, facialRecognitionConfig, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FacialRecognitionConfig" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="facialRecognitionConfig"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FacialRecognitionConfig facialRecognitionConfig, JsonSerializerOptions jsonSerializerOptions)
        {
            if (facialRecognitionConfig.ModelName == null)
                throw new ArgumentNullException(nameof(facialRecognitionConfig.ModelName), "Property is required for class FacialRecognitionConfig.");

            writer.WriteBoolean("enabled", facialRecognitionConfig.Enabled);

            writer.WriteNumber("maxDistance", facialRecognitionConfig.MaxDistance);

            writer.WriteNumber("minFaces", facialRecognitionConfig.MinFaces);

            writer.WriteNumber("minScore", facialRecognitionConfig.MinScore);

            writer.WriteString("modelName", facialRecognitionConfig.ModelName);
        }
    }
}
