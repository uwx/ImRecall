// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AssetDeltaSyncDto
    /// </summary>
    public partial class AssetDeltaSyncDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetDeltaSyncDto" /> class.
        /// </summary>
        /// <param name="updatedAfter">updatedAfter</param>
        /// <param name="userIds">userIds</param>
        [JsonConstructor]
        public AssetDeltaSyncDto(DateTime updatedAfter, List<Guid> userIds)
        {
            UpdatedAfter = updatedAfter;
            UserIds = userIds;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets UpdatedAfter
        /// </summary>
        [JsonPropertyName("updatedAfter")]
        public DateTime UpdatedAfter { get; set; }

        /// <summary>
        /// Gets or Sets UserIds
        /// </summary>
        [JsonPropertyName("userIds")]
        public List<Guid> UserIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AssetDeltaSyncDto {\n");
            sb.Append("  UpdatedAfter: ").Append(UpdatedAfter).Append("\n");
            sb.Append("  UserIds: ").Append(UserIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AssetDeltaSyncDto" />
    /// </summary>
    public class AssetDeltaSyncDtoJsonConverter : JsonConverter<AssetDeltaSyncDto>
    {
        /// <summary>
        /// The format to use to serialize UpdatedAfter
        /// </summary>
        public static string UpdatedAfterFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="AssetDeltaSyncDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AssetDeltaSyncDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> updatedAfter = default;
            Option<List<Guid>?> userIds = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "updatedAfter":
                            updatedAfter = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "userIds":
                            userIds = new Option<List<Guid>?>(JsonSerializer.Deserialize<List<Guid>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!updatedAfter.IsSet)
                throw new ArgumentException("Property is required for class AssetDeltaSyncDto.", nameof(updatedAfter));

            if (!userIds.IsSet)
                throw new ArgumentException("Property is required for class AssetDeltaSyncDto.", nameof(userIds));

            if (updatedAfter.IsSet && updatedAfter.Value == null)
                throw new ArgumentNullException(nameof(updatedAfter), "Property is not nullable for class AssetDeltaSyncDto.");

            if (userIds.IsSet && userIds.Value == null)
                throw new ArgumentNullException(nameof(userIds), "Property is not nullable for class AssetDeltaSyncDto.");

            return new AssetDeltaSyncDto(updatedAfter.Value!.Value!, userIds.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="AssetDeltaSyncDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="assetDeltaSyncDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AssetDeltaSyncDto assetDeltaSyncDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, assetDeltaSyncDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AssetDeltaSyncDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="assetDeltaSyncDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AssetDeltaSyncDto assetDeltaSyncDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (assetDeltaSyncDto.UserIds == null)
                throw new ArgumentNullException(nameof(assetDeltaSyncDto.UserIds), "Property is required for class AssetDeltaSyncDto.");

            writer.WriteString("updatedAfter", assetDeltaSyncDto.UpdatedAfter.ToString(UpdatedAfterFormat));

            writer.WritePropertyName("userIds");
            JsonSerializer.Serialize(writer, assetDeltaSyncDto.UserIds, jsonSerializerOptions);
        }
    }
}
