// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OAuthConfigDto
    /// </summary>
    public partial class OAuthConfigDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OAuthConfigDto" /> class.
        /// </summary>
        /// <param name="redirectUri">redirectUri</param>
        /// <param name="codeChallenge">codeChallenge</param>
        /// <param name="state">state</param>
        [JsonConstructor]
        public OAuthConfigDto(string redirectUri, Option<string?> codeChallenge = default, Option<string?> state = default)
        {
            RedirectUri = redirectUri;
            CodeChallengeOption = codeChallenge;
            StateOption = state;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets RedirectUri
        /// </summary>
        [JsonPropertyName("redirectUri")]
        public string RedirectUri { get; set; }

        /// <summary>
        /// Used to track the state of CodeChallenge
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CodeChallengeOption { get; private set; }

        /// <summary>
        /// Gets or Sets CodeChallenge
        /// </summary>
        [JsonPropertyName("codeChallenge")]
        public string? CodeChallenge { get { return this.CodeChallengeOption; } set { this.CodeChallengeOption = new(value); } }

        /// <summary>
        /// Used to track the state of State
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StateOption { get; private set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonPropertyName("state")]
        public string? State { get { return this.StateOption; } set { this.StateOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OAuthConfigDto {\n");
            sb.Append("  RedirectUri: ").Append(RedirectUri).Append("\n");
            sb.Append("  CodeChallenge: ").Append(CodeChallenge).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OAuthConfigDto" />
    /// </summary>
    public class OAuthConfigDtoJsonConverter : JsonConverter<OAuthConfigDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="OAuthConfigDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override OAuthConfigDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> redirectUri = default;
            Option<string?> codeChallenge = default;
            Option<string?> state = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "redirectUri":
                            redirectUri = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "codeChallenge":
                            codeChallenge = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "state":
                            state = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!redirectUri.IsSet)
                throw new ArgumentException("Property is required for class OAuthConfigDto.", nameof(redirectUri));

            if (redirectUri.IsSet && redirectUri.Value == null)
                throw new ArgumentNullException(nameof(redirectUri), "Property is not nullable for class OAuthConfigDto.");

            if (codeChallenge.IsSet && codeChallenge.Value == null)
                throw new ArgumentNullException(nameof(codeChallenge), "Property is not nullable for class OAuthConfigDto.");

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state), "Property is not nullable for class OAuthConfigDto.");

            return new OAuthConfigDto(redirectUri.Value!, codeChallenge, state);
        }

        /// <summary>
        /// Serializes a <see cref="OAuthConfigDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="oAuthConfigDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, OAuthConfigDto oAuthConfigDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, oAuthConfigDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="OAuthConfigDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="oAuthConfigDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, OAuthConfigDto oAuthConfigDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (oAuthConfigDto.RedirectUri == null)
                throw new ArgumentNullException(nameof(oAuthConfigDto.RedirectUri), "Property is required for class OAuthConfigDto.");

            if (oAuthConfigDto.CodeChallengeOption.IsSet && oAuthConfigDto.CodeChallenge == null)
                throw new ArgumentNullException(nameof(oAuthConfigDto.CodeChallenge), "Property is required for class OAuthConfigDto.");

            if (oAuthConfigDto.StateOption.IsSet && oAuthConfigDto.State == null)
                throw new ArgumentNullException(nameof(oAuthConfigDto.State), "Property is required for class OAuthConfigDto.");

            writer.WriteString("redirectUri", oAuthConfigDto.RedirectUri);

            if (oAuthConfigDto.CodeChallengeOption.IsSet)
                writer.WriteString("codeChallenge", oAuthConfigDto.CodeChallenge);

            if (oAuthConfigDto.StateOption.IsSet)
                writer.WriteString("state", oAuthConfigDto.State);
        }
    }
}
