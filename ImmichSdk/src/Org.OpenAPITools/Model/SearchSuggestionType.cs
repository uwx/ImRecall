// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines SearchSuggestionType
    /// </summary>
    public enum SearchSuggestionType
    {
        /// <summary>
        /// Enum Country for value: country
        /// </summary>
        Country = 1,

        /// <summary>
        /// Enum State for value: state
        /// </summary>
        State = 2,

        /// <summary>
        /// Enum City for value: city
        /// </summary>
        City = 3,

        /// <summary>
        /// Enum CameraMake for value: camera-make
        /// </summary>
        CameraMake = 4,

        /// <summary>
        /// Enum CameraModel for value: camera-model
        /// </summary>
        CameraModel = 5,

        /// <summary>
        /// Enum CameraLensModel for value: camera-lens-model
        /// </summary>
        CameraLensModel = 6
    }

    /// <summary>
    /// Converts <see cref="SearchSuggestionType"/> to and from the JSON value
    /// </summary>
    public static class SearchSuggestionTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="SearchSuggestionType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SearchSuggestionType FromString(string value)
        {
            if (value.Equals("country"))
                return SearchSuggestionType.Country;

            if (value.Equals("state"))
                return SearchSuggestionType.State;

            if (value.Equals("city"))
                return SearchSuggestionType.City;

            if (value.Equals("camera-make"))
                return SearchSuggestionType.CameraMake;

            if (value.Equals("camera-model"))
                return SearchSuggestionType.CameraModel;

            if (value.Equals("camera-lens-model"))
                return SearchSuggestionType.CameraLensModel;

            throw new NotImplementedException($"Could not convert value to type SearchSuggestionType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="SearchSuggestionType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SearchSuggestionType? FromStringOrDefault(string value)
        {
            if (value.Equals("country"))
                return SearchSuggestionType.Country;

            if (value.Equals("state"))
                return SearchSuggestionType.State;

            if (value.Equals("city"))
                return SearchSuggestionType.City;

            if (value.Equals("camera-make"))
                return SearchSuggestionType.CameraMake;

            if (value.Equals("camera-model"))
                return SearchSuggestionType.CameraModel;

            if (value.Equals("camera-lens-model"))
                return SearchSuggestionType.CameraLensModel;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SearchSuggestionType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(SearchSuggestionType value)
        {
            if (value == SearchSuggestionType.Country)
                return "country";

            if (value == SearchSuggestionType.State)
                return "state";

            if (value == SearchSuggestionType.City)
                return "city";

            if (value == SearchSuggestionType.CameraMake)
                return "camera-make";

            if (value == SearchSuggestionType.CameraModel)
                return "camera-model";

            if (value == SearchSuggestionType.CameraLensModel)
                return "camera-lens-model";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SearchSuggestionType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class SearchSuggestionTypeJsonConverter : JsonConverter<SearchSuggestionType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override SearchSuggestionType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            SearchSuggestionType? result = rawValue == null
                ? null
                : SearchSuggestionTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the SearchSuggestionType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchSuggestionType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, SearchSuggestionType searchSuggestionType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(SearchSuggestionTypeValueConverter.ToJsonValue(searchSuggestionType).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SearchSuggestionType"/>
    /// </summary>
    public class SearchSuggestionTypeNullableJsonConverter : JsonConverter<SearchSuggestionType?>
    {
        /// <summary>
        /// Returns a SearchSuggestionType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override SearchSuggestionType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            SearchSuggestionType? result = rawValue == null
                ? null
                : SearchSuggestionTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the SearchSuggestionType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchSuggestionType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, SearchSuggestionType? searchSuggestionType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(searchSuggestionType.HasValue ? SearchSuggestionTypeValueConverter.ToJsonValue(searchSuggestionType.Value).ToString() : "null");
        }
    }
}
