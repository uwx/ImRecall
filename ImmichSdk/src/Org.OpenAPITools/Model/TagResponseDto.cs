// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TagResponseDto
    /// </summary>
    public partial class TagResponseDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TagResponseDto" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt</param>
        /// <param name="id">id</param>
        /// <param name="name">name</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="value">value</param>
        /// <param name="color">color</param>
        /// <param name="parentId">parentId</param>
        [JsonConstructor]
        public TagResponseDto(DateTime createdAt, string id, string name, DateTime updatedAt, string value, Option<string?> color = default, Option<string?> parentId = default)
        {
            CreatedAt = createdAt;
            Id = id;
            Name = name;
            UpdatedAt = updatedAt;
            Value = value;
            ColorOption = color;
            ParentIdOption = parentId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [JsonPropertyName("value")]
        public string Value { get; set; }

        /// <summary>
        /// Used to track the state of Color
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ColorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [JsonPropertyName("color")]
        public string? Color { get { return this.ColorOption; } set { this.ColorOption = new(value); } }

        /// <summary>
        /// Used to track the state of ParentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ParentIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ParentId
        /// </summary>
        [JsonPropertyName("parentId")]
        public string? ParentId { get { return this.ParentIdOption; } set { this.ParentIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TagResponseDto {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TagResponseDto" />
    /// </summary>
    public class TagResponseDtoJsonConverter : JsonConverter<TagResponseDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="TagResponseDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TagResponseDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> createdAt = default;
            Option<string?> id = default;
            Option<string?> name = default;
            Option<DateTime?> updatedAt = default;
            Option<string?> value = default;
            Option<string?> color = default;
            Option<string?> parentId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "updatedAt":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "value":
                            value = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "color":
                            color = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "parentId":
                            parentId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class TagResponseDto.", nameof(createdAt));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class TagResponseDto.", nameof(id));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class TagResponseDto.", nameof(name));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class TagResponseDto.", nameof(updatedAt));

            if (!value.IsSet)
                throw new ArgumentException("Property is required for class TagResponseDto.", nameof(value));

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class TagResponseDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class TagResponseDto.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class TagResponseDto.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class TagResponseDto.");

            if (value.IsSet && value.Value == null)
                throw new ArgumentNullException(nameof(value), "Property is not nullable for class TagResponseDto.");

            if (color.IsSet && color.Value == null)
                throw new ArgumentNullException(nameof(color), "Property is not nullable for class TagResponseDto.");

            if (parentId.IsSet && parentId.Value == null)
                throw new ArgumentNullException(nameof(parentId), "Property is not nullable for class TagResponseDto.");

            return new TagResponseDto(createdAt.Value!.Value!, id.Value!, name.Value!, updatedAt.Value!.Value!, value.Value!, color, parentId);
        }

        /// <summary>
        /// Serializes a <see cref="TagResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tagResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TagResponseDto tagResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, tagResponseDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TagResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tagResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TagResponseDto tagResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (tagResponseDto.Id == null)
                throw new ArgumentNullException(nameof(tagResponseDto.Id), "Property is required for class TagResponseDto.");

            if (tagResponseDto.Name == null)
                throw new ArgumentNullException(nameof(tagResponseDto.Name), "Property is required for class TagResponseDto.");

            if (tagResponseDto.Value == null)
                throw new ArgumentNullException(nameof(tagResponseDto.Value), "Property is required for class TagResponseDto.");

            if (tagResponseDto.ColorOption.IsSet && tagResponseDto.Color == null)
                throw new ArgumentNullException(nameof(tagResponseDto.Color), "Property is required for class TagResponseDto.");

            if (tagResponseDto.ParentIdOption.IsSet && tagResponseDto.ParentId == null)
                throw new ArgumentNullException(nameof(tagResponseDto.ParentId), "Property is required for class TagResponseDto.");

            writer.WriteString("createdAt", tagResponseDto.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("id", tagResponseDto.Id);

            writer.WriteString("name", tagResponseDto.Name);

            writer.WriteString("updatedAt", tagResponseDto.UpdatedAt.ToString(UpdatedAtFormat));

            writer.WriteString("value", tagResponseDto.Value);

            if (tagResponseDto.ColorOption.IsSet)
                writer.WriteString("color", tagResponseDto.Color);

            if (tagResponseDto.ParentIdOption.IsSet)
                writer.WriteString("parentId", tagResponseDto.ParentId);
        }
    }
}
