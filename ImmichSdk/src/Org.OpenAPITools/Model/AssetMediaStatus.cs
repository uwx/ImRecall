// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines AssetMediaStatus
    /// </summary>
    public enum AssetMediaStatus
    {
        /// <summary>
        /// Enum Created for value: created
        /// </summary>
        Created = 1,

        /// <summary>
        /// Enum Replaced for value: replaced
        /// </summary>
        Replaced = 2,

        /// <summary>
        /// Enum Duplicate for value: duplicate
        /// </summary>
        Duplicate = 3
    }

    /// <summary>
    /// Converts <see cref="AssetMediaStatus"/> to and from the JSON value
    /// </summary>
    public static class AssetMediaStatusValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="AssetMediaStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AssetMediaStatus FromString(string value)
        {
            if (value.Equals("created"))
                return AssetMediaStatus.Created;

            if (value.Equals("replaced"))
                return AssetMediaStatus.Replaced;

            if (value.Equals("duplicate"))
                return AssetMediaStatus.Duplicate;

            throw new NotImplementedException($"Could not convert value to type AssetMediaStatus: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="AssetMediaStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AssetMediaStatus? FromStringOrDefault(string value)
        {
            if (value.Equals("created"))
                return AssetMediaStatus.Created;

            if (value.Equals("replaced"))
                return AssetMediaStatus.Replaced;

            if (value.Equals("duplicate"))
                return AssetMediaStatus.Duplicate;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AssetMediaStatus"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(AssetMediaStatus value)
        {
            if (value == AssetMediaStatus.Created)
                return "created";

            if (value == AssetMediaStatus.Replaced)
                return "replaced";

            if (value == AssetMediaStatus.Duplicate)
                return "duplicate";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AssetMediaStatus"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class AssetMediaStatusJsonConverter : JsonConverter<AssetMediaStatus>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override AssetMediaStatus Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            AssetMediaStatus? result = rawValue == null
                ? null
                : AssetMediaStatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the AssetMediaStatus to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="assetMediaStatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, AssetMediaStatus assetMediaStatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(AssetMediaStatusValueConverter.ToJsonValue(assetMediaStatus).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AssetMediaStatus"/>
    /// </summary>
    public class AssetMediaStatusNullableJsonConverter : JsonConverter<AssetMediaStatus?>
    {
        /// <summary>
        /// Returns a AssetMediaStatus from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override AssetMediaStatus? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            AssetMediaStatus? result = rawValue == null
                ? null
                : AssetMediaStatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the AssetMediaStatus to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="assetMediaStatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, AssetMediaStatus? assetMediaStatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(assetMediaStatus.HasValue ? AssetMediaStatusValueConverter.ToJsonValue(assetMediaStatus.Value).ToString() : "null");
        }
    }
}
