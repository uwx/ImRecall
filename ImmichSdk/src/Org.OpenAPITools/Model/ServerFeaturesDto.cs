// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ServerFeaturesDto
    /// </summary>
    public partial class ServerFeaturesDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerFeaturesDto" /> class.
        /// </summary>
        /// <param name="configFile">configFile</param>
        /// <param name="duplicateDetection">duplicateDetection</param>
        /// <param name="email">email</param>
        /// <param name="facialRecognition">facialRecognition</param>
        /// <param name="importFaces">importFaces</param>
        /// <param name="map">map</param>
        /// <param name="oauth">oauth</param>
        /// <param name="oauthAutoLaunch">oauthAutoLaunch</param>
        /// <param name="passwordLogin">passwordLogin</param>
        /// <param name="reverseGeocoding">reverseGeocoding</param>
        /// <param name="search">search</param>
        /// <param name="sidecar">sidecar</param>
        /// <param name="smartSearch">smartSearch</param>
        /// <param name="trash">trash</param>
        [JsonConstructor]
        public ServerFeaturesDto(bool configFile, bool duplicateDetection, bool email, bool facialRecognition, bool importFaces, bool map, bool oauth, bool oauthAutoLaunch, bool passwordLogin, bool reverseGeocoding, bool search, bool sidecar, bool smartSearch, bool trash)
        {
            ConfigFile = configFile;
            DuplicateDetection = duplicateDetection;
            Email = email;
            FacialRecognition = facialRecognition;
            ImportFaces = importFaces;
            Map = map;
            Oauth = oauth;
            OauthAutoLaunch = oauthAutoLaunch;
            PasswordLogin = passwordLogin;
            ReverseGeocoding = reverseGeocoding;
            Search = search;
            Sidecar = sidecar;
            SmartSearch = smartSearch;
            Trash = trash;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets ConfigFile
        /// </summary>
        [JsonPropertyName("configFile")]
        public bool ConfigFile { get; set; }

        /// <summary>
        /// Gets or Sets DuplicateDetection
        /// </summary>
        [JsonPropertyName("duplicateDetection")]
        public bool DuplicateDetection { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [JsonPropertyName("email")]
        public bool Email { get; set; }

        /// <summary>
        /// Gets or Sets FacialRecognition
        /// </summary>
        [JsonPropertyName("facialRecognition")]
        public bool FacialRecognition { get; set; }

        /// <summary>
        /// Gets or Sets ImportFaces
        /// </summary>
        [JsonPropertyName("importFaces")]
        public bool ImportFaces { get; set; }

        /// <summary>
        /// Gets or Sets Map
        /// </summary>
        [JsonPropertyName("map")]
        public bool Map { get; set; }

        /// <summary>
        /// Gets or Sets Oauth
        /// </summary>
        [JsonPropertyName("oauth")]
        public bool Oauth { get; set; }

        /// <summary>
        /// Gets or Sets OauthAutoLaunch
        /// </summary>
        [JsonPropertyName("oauthAutoLaunch")]
        public bool OauthAutoLaunch { get; set; }

        /// <summary>
        /// Gets or Sets PasswordLogin
        /// </summary>
        [JsonPropertyName("passwordLogin")]
        public bool PasswordLogin { get; set; }

        /// <summary>
        /// Gets or Sets ReverseGeocoding
        /// </summary>
        [JsonPropertyName("reverseGeocoding")]
        public bool ReverseGeocoding { get; set; }

        /// <summary>
        /// Gets or Sets Search
        /// </summary>
        [JsonPropertyName("search")]
        public bool Search { get; set; }

        /// <summary>
        /// Gets or Sets Sidecar
        /// </summary>
        [JsonPropertyName("sidecar")]
        public bool Sidecar { get; set; }

        /// <summary>
        /// Gets or Sets SmartSearch
        /// </summary>
        [JsonPropertyName("smartSearch")]
        public bool SmartSearch { get; set; }

        /// <summary>
        /// Gets or Sets Trash
        /// </summary>
        [JsonPropertyName("trash")]
        public bool Trash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServerFeaturesDto {\n");
            sb.Append("  ConfigFile: ").Append(ConfigFile).Append("\n");
            sb.Append("  DuplicateDetection: ").Append(DuplicateDetection).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FacialRecognition: ").Append(FacialRecognition).Append("\n");
            sb.Append("  ImportFaces: ").Append(ImportFaces).Append("\n");
            sb.Append("  Map: ").Append(Map).Append("\n");
            sb.Append("  Oauth: ").Append(Oauth).Append("\n");
            sb.Append("  OauthAutoLaunch: ").Append(OauthAutoLaunch).Append("\n");
            sb.Append("  PasswordLogin: ").Append(PasswordLogin).Append("\n");
            sb.Append("  ReverseGeocoding: ").Append(ReverseGeocoding).Append("\n");
            sb.Append("  Search: ").Append(Search).Append("\n");
            sb.Append("  Sidecar: ").Append(Sidecar).Append("\n");
            sb.Append("  SmartSearch: ").Append(SmartSearch).Append("\n");
            sb.Append("  Trash: ").Append(Trash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ServerFeaturesDto" />
    /// </summary>
    public class ServerFeaturesDtoJsonConverter : JsonConverter<ServerFeaturesDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="ServerFeaturesDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ServerFeaturesDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> configFile = default;
            Option<bool?> duplicateDetection = default;
            Option<bool?> email = default;
            Option<bool?> facialRecognition = default;
            Option<bool?> importFaces = default;
            Option<bool?> map = default;
            Option<bool?> oauth = default;
            Option<bool?> oauthAutoLaunch = default;
            Option<bool?> passwordLogin = default;
            Option<bool?> reverseGeocoding = default;
            Option<bool?> search = default;
            Option<bool?> sidecar = default;
            Option<bool?> smartSearch = default;
            Option<bool?> trash = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "configFile":
                            configFile = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "duplicateDetection":
                            duplicateDetection = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "email":
                            email = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "facialRecognition":
                            facialRecognition = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "importFaces":
                            importFaces = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "map":
                            map = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "oauth":
                            oauth = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "oauthAutoLaunch":
                            oauthAutoLaunch = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "passwordLogin":
                            passwordLogin = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "reverseGeocoding":
                            reverseGeocoding = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "search":
                            search = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "sidecar":
                            sidecar = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "smartSearch":
                            smartSearch = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "trash":
                            trash = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!configFile.IsSet)
                throw new ArgumentException("Property is required for class ServerFeaturesDto.", nameof(configFile));

            if (!duplicateDetection.IsSet)
                throw new ArgumentException("Property is required for class ServerFeaturesDto.", nameof(duplicateDetection));

            if (!email.IsSet)
                throw new ArgumentException("Property is required for class ServerFeaturesDto.", nameof(email));

            if (!facialRecognition.IsSet)
                throw new ArgumentException("Property is required for class ServerFeaturesDto.", nameof(facialRecognition));

            if (!importFaces.IsSet)
                throw new ArgumentException("Property is required for class ServerFeaturesDto.", nameof(importFaces));

            if (!map.IsSet)
                throw new ArgumentException("Property is required for class ServerFeaturesDto.", nameof(map));

            if (!oauth.IsSet)
                throw new ArgumentException("Property is required for class ServerFeaturesDto.", nameof(oauth));

            if (!oauthAutoLaunch.IsSet)
                throw new ArgumentException("Property is required for class ServerFeaturesDto.", nameof(oauthAutoLaunch));

            if (!passwordLogin.IsSet)
                throw new ArgumentException("Property is required for class ServerFeaturesDto.", nameof(passwordLogin));

            if (!reverseGeocoding.IsSet)
                throw new ArgumentException("Property is required for class ServerFeaturesDto.", nameof(reverseGeocoding));

            if (!search.IsSet)
                throw new ArgumentException("Property is required for class ServerFeaturesDto.", nameof(search));

            if (!sidecar.IsSet)
                throw new ArgumentException("Property is required for class ServerFeaturesDto.", nameof(sidecar));

            if (!smartSearch.IsSet)
                throw new ArgumentException("Property is required for class ServerFeaturesDto.", nameof(smartSearch));

            if (!trash.IsSet)
                throw new ArgumentException("Property is required for class ServerFeaturesDto.", nameof(trash));

            if (configFile.IsSet && configFile.Value == null)
                throw new ArgumentNullException(nameof(configFile), "Property is not nullable for class ServerFeaturesDto.");

            if (duplicateDetection.IsSet && duplicateDetection.Value == null)
                throw new ArgumentNullException(nameof(duplicateDetection), "Property is not nullable for class ServerFeaturesDto.");

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class ServerFeaturesDto.");

            if (facialRecognition.IsSet && facialRecognition.Value == null)
                throw new ArgumentNullException(nameof(facialRecognition), "Property is not nullable for class ServerFeaturesDto.");

            if (importFaces.IsSet && importFaces.Value == null)
                throw new ArgumentNullException(nameof(importFaces), "Property is not nullable for class ServerFeaturesDto.");

            if (map.IsSet && map.Value == null)
                throw new ArgumentNullException(nameof(map), "Property is not nullable for class ServerFeaturesDto.");

            if (oauth.IsSet && oauth.Value == null)
                throw new ArgumentNullException(nameof(oauth), "Property is not nullable for class ServerFeaturesDto.");

            if (oauthAutoLaunch.IsSet && oauthAutoLaunch.Value == null)
                throw new ArgumentNullException(nameof(oauthAutoLaunch), "Property is not nullable for class ServerFeaturesDto.");

            if (passwordLogin.IsSet && passwordLogin.Value == null)
                throw new ArgumentNullException(nameof(passwordLogin), "Property is not nullable for class ServerFeaturesDto.");

            if (reverseGeocoding.IsSet && reverseGeocoding.Value == null)
                throw new ArgumentNullException(nameof(reverseGeocoding), "Property is not nullable for class ServerFeaturesDto.");

            if (search.IsSet && search.Value == null)
                throw new ArgumentNullException(nameof(search), "Property is not nullable for class ServerFeaturesDto.");

            if (sidecar.IsSet && sidecar.Value == null)
                throw new ArgumentNullException(nameof(sidecar), "Property is not nullable for class ServerFeaturesDto.");

            if (smartSearch.IsSet && smartSearch.Value == null)
                throw new ArgumentNullException(nameof(smartSearch), "Property is not nullable for class ServerFeaturesDto.");

            if (trash.IsSet && trash.Value == null)
                throw new ArgumentNullException(nameof(trash), "Property is not nullable for class ServerFeaturesDto.");

            return new ServerFeaturesDto(configFile.Value!.Value!, duplicateDetection.Value!.Value!, email.Value!.Value!, facialRecognition.Value!.Value!, importFaces.Value!.Value!, map.Value!.Value!, oauth.Value!.Value!, oauthAutoLaunch.Value!.Value!, passwordLogin.Value!.Value!, reverseGeocoding.Value!.Value!, search.Value!.Value!, sidecar.Value!.Value!, smartSearch.Value!.Value!, trash.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ServerFeaturesDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="serverFeaturesDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ServerFeaturesDto serverFeaturesDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, serverFeaturesDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ServerFeaturesDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="serverFeaturesDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ServerFeaturesDto serverFeaturesDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteBoolean("configFile", serverFeaturesDto.ConfigFile);

            writer.WriteBoolean("duplicateDetection", serverFeaturesDto.DuplicateDetection);

            writer.WriteBoolean("email", serverFeaturesDto.Email);

            writer.WriteBoolean("facialRecognition", serverFeaturesDto.FacialRecognition);

            writer.WriteBoolean("importFaces", serverFeaturesDto.ImportFaces);

            writer.WriteBoolean("map", serverFeaturesDto.Map);

            writer.WriteBoolean("oauth", serverFeaturesDto.Oauth);

            writer.WriteBoolean("oauthAutoLaunch", serverFeaturesDto.OauthAutoLaunch);

            writer.WriteBoolean("passwordLogin", serverFeaturesDto.PasswordLogin);

            writer.WriteBoolean("reverseGeocoding", serverFeaturesDto.ReverseGeocoding);

            writer.WriteBoolean("search", serverFeaturesDto.Search);

            writer.WriteBoolean("sidecar", serverFeaturesDto.Sidecar);

            writer.WriteBoolean("smartSearch", serverFeaturesDto.SmartSearch);

            writer.WriteBoolean("trash", serverFeaturesDto.Trash);
        }
    }
}
