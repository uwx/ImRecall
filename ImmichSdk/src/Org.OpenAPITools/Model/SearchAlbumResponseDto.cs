// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SearchAlbumResponseDto
    /// </summary>
    public partial class SearchAlbumResponseDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchAlbumResponseDto" /> class.
        /// </summary>
        /// <param name="count">count</param>
        /// <param name="facets">facets</param>
        /// <param name="items">items</param>
        /// <param name="total">total</param>
        [JsonConstructor]
        public SearchAlbumResponseDto(int count, List<SearchFacetResponseDto> facets, List<AlbumResponseDto> items, int total)
        {
            Count = count;
            Facets = facets;
            Items = items;
            Total = total;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [JsonPropertyName("count")]
        public int Count { get; set; }

        /// <summary>
        /// Gets or Sets Facets
        /// </summary>
        [JsonPropertyName("facets")]
        public List<SearchFacetResponseDto> Facets { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [JsonPropertyName("items")]
        public List<AlbumResponseDto> Items { get; set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [JsonPropertyName("total")]
        public int Total { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchAlbumResponseDto {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Facets: ").Append(Facets).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SearchAlbumResponseDto" />
    /// </summary>
    public class SearchAlbumResponseDtoJsonConverter : JsonConverter<SearchAlbumResponseDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="SearchAlbumResponseDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SearchAlbumResponseDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> count = default;
            Option<List<SearchFacetResponseDto>?> facets = default;
            Option<List<AlbumResponseDto>?> items = default;
            Option<int?> total = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "count":
                            count = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "facets":
                            facets = new Option<List<SearchFacetResponseDto>?>(JsonSerializer.Deserialize<List<SearchFacetResponseDto>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "items":
                            items = new Option<List<AlbumResponseDto>?>(JsonSerializer.Deserialize<List<AlbumResponseDto>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "total":
                            total = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!count.IsSet)
                throw new ArgumentException("Property is required for class SearchAlbumResponseDto.", nameof(count));

            if (!facets.IsSet)
                throw new ArgumentException("Property is required for class SearchAlbumResponseDto.", nameof(facets));

            if (!items.IsSet)
                throw new ArgumentException("Property is required for class SearchAlbumResponseDto.", nameof(items));

            if (!total.IsSet)
                throw new ArgumentException("Property is required for class SearchAlbumResponseDto.", nameof(total));

            if (count.IsSet && count.Value == null)
                throw new ArgumentNullException(nameof(count), "Property is not nullable for class SearchAlbumResponseDto.");

            if (facets.IsSet && facets.Value == null)
                throw new ArgumentNullException(nameof(facets), "Property is not nullable for class SearchAlbumResponseDto.");

            if (items.IsSet && items.Value == null)
                throw new ArgumentNullException(nameof(items), "Property is not nullable for class SearchAlbumResponseDto.");

            if (total.IsSet && total.Value == null)
                throw new ArgumentNullException(nameof(total), "Property is not nullable for class SearchAlbumResponseDto.");

            return new SearchAlbumResponseDto(count.Value!.Value!, facets.Value!, items.Value!, total.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="SearchAlbumResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchAlbumResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SearchAlbumResponseDto searchAlbumResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, searchAlbumResponseDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SearchAlbumResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchAlbumResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SearchAlbumResponseDto searchAlbumResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (searchAlbumResponseDto.Facets == null)
                throw new ArgumentNullException(nameof(searchAlbumResponseDto.Facets), "Property is required for class SearchAlbumResponseDto.");

            if (searchAlbumResponseDto.Items == null)
                throw new ArgumentNullException(nameof(searchAlbumResponseDto.Items), "Property is required for class SearchAlbumResponseDto.");

            writer.WriteNumber("count", searchAlbumResponseDto.Count);

            writer.WritePropertyName("facets");
            JsonSerializer.Serialize(writer, searchAlbumResponseDto.Facets, jsonSerializerOptions);
            writer.WritePropertyName("items");
            JsonSerializer.Serialize(writer, searchAlbumResponseDto.Items, jsonSerializerOptions);
            writer.WriteNumber("total", searchAlbumResponseDto.Total);
        }
    }
}
