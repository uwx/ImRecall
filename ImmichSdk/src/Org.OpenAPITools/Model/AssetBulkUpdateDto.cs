// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AssetBulkUpdateDto
    /// </summary>
    public partial class AssetBulkUpdateDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetBulkUpdateDto" /> class.
        /// </summary>
        /// <param name="ids">ids</param>
        /// <param name="dateTimeOriginal">dateTimeOriginal</param>
        /// <param name="dateTimeRelative">dateTimeRelative</param>
        /// <param name="description">description</param>
        /// <param name="duplicateId">duplicateId</param>
        /// <param name="isFavorite">isFavorite</param>
        /// <param name="latitude">latitude</param>
        /// <param name="longitude">longitude</param>
        /// <param name="rating">rating</param>
        /// <param name="varTimeZone">varTimeZone</param>
        /// <param name="visibility">visibility</param>
        [JsonConstructor]
        public AssetBulkUpdateDto(List<Guid> ids, Option<string?> dateTimeOriginal = default, Option<decimal?> dateTimeRelative = default, Option<string?> description = default, Option<string?> duplicateId = default, Option<bool?> isFavorite = default, Option<decimal?> latitude = default, Option<decimal?> longitude = default, Option<decimal?> rating = default, Option<string?> varTimeZone = default, Option<AssetVisibility?> visibility = default)
        {
            Ids = ids;
            DateTimeOriginalOption = dateTimeOriginal;
            DateTimeRelativeOption = dateTimeRelative;
            DescriptionOption = description;
            DuplicateIdOption = duplicateId;
            IsFavoriteOption = isFavorite;
            LatitudeOption = latitude;
            LongitudeOption = longitude;
            RatingOption = rating;
            VarTimeZoneOption = varTimeZone;
            VisibilityOption = visibility;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Visibility
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AssetVisibility?> VisibilityOption { get; private set; }

        /// <summary>
        /// Gets or Sets Visibility
        /// </summary>
        [JsonPropertyName("visibility")]
        public AssetVisibility? Visibility { get { return this.VisibilityOption; } set { this.VisibilityOption = new(value); } }

        /// <summary>
        /// Gets or Sets Ids
        /// </summary>
        [JsonPropertyName("ids")]
        public List<Guid> Ids { get; set; }

        /// <summary>
        /// Used to track the state of DateTimeOriginal
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DateTimeOriginalOption { get; private set; }

        /// <summary>
        /// Gets or Sets DateTimeOriginal
        /// </summary>
        [JsonPropertyName("dateTimeOriginal")]
        public string? DateTimeOriginal { get { return this.DateTimeOriginalOption; } set { this.DateTimeOriginalOption = new(value); } }

        /// <summary>
        /// Used to track the state of DateTimeRelative
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> DateTimeRelativeOption { get; private set; }

        /// <summary>
        /// Gets or Sets DateTimeRelative
        /// </summary>
        [JsonPropertyName("dateTimeRelative")]
        public decimal? DateTimeRelative { get { return this.DateTimeRelativeOption; } set { this.DateTimeRelativeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of DuplicateId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DuplicateIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets DuplicateId
        /// </summary>
        [JsonPropertyName("duplicateId")]
        public string? DuplicateId { get { return this.DuplicateIdOption; } set { this.DuplicateIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsFavorite
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsFavoriteOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsFavorite
        /// </summary>
        [JsonPropertyName("isFavorite")]
        public bool? IsFavorite { get { return this.IsFavoriteOption; } set { this.IsFavoriteOption = new(value); } }

        /// <summary>
        /// Used to track the state of Latitude
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> LatitudeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [JsonPropertyName("latitude")]
        public decimal? Latitude { get { return this.LatitudeOption; } set { this.LatitudeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Longitude
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> LongitudeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Longitude
        /// </summary>
        [JsonPropertyName("longitude")]
        public decimal? Longitude { get { return this.LongitudeOption; } set { this.LongitudeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Rating
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> RatingOption { get; private set; }

        /// <summary>
        /// Gets or Sets Rating
        /// </summary>
        [JsonPropertyName("rating")]
        public decimal? Rating { get { return this.RatingOption; } set { this.RatingOption = new(value); } }

        /// <summary>
        /// Used to track the state of VarTimeZone
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VarTimeZoneOption { get; private set; }

        /// <summary>
        /// Gets or Sets VarTimeZone
        /// </summary>
        [JsonPropertyName("timeZone")]
        public string? VarTimeZone { get { return this.VarTimeZoneOption; } set { this.VarTimeZoneOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AssetBulkUpdateDto {\n");
            sb.Append("  Ids: ").Append(Ids).Append("\n");
            sb.Append("  DateTimeOriginal: ").Append(DateTimeOriginal).Append("\n");
            sb.Append("  DateTimeRelative: ").Append(DateTimeRelative).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DuplicateId: ").Append(DuplicateId).Append("\n");
            sb.Append("  IsFavorite: ").Append(IsFavorite).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  VarTimeZone: ").Append(VarTimeZone).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Rating (decimal) maximum
            if (this.RatingOption.IsSet && this.RatingOption.Value > (decimal)5)
            {
                yield return new ValidationResult("Invalid value for Rating, must be a value less than or equal to 5.", new [] { "Rating" });
            }

            // Rating (decimal) minimum
            if (this.RatingOption.IsSet && this.RatingOption.Value < (decimal)-1)
            {
                yield return new ValidationResult("Invalid value for Rating, must be a value greater than or equal to -1.", new [] { "Rating" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AssetBulkUpdateDto" />
    /// </summary>
    public class AssetBulkUpdateDtoJsonConverter : JsonConverter<AssetBulkUpdateDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="AssetBulkUpdateDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AssetBulkUpdateDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<Guid>?> ids = default;
            Option<string?> dateTimeOriginal = default;
            Option<decimal?> dateTimeRelative = default;
            Option<string?> description = default;
            Option<string?> duplicateId = default;
            Option<bool?> isFavorite = default;
            Option<decimal?> latitude = default;
            Option<decimal?> longitude = default;
            Option<decimal?> rating = default;
            Option<string?> varTimeZone = default;
            Option<AssetVisibility?> visibility = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ids":
                            ids = new Option<List<Guid>?>(JsonSerializer.Deserialize<List<Guid>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "dateTimeOriginal":
                            dateTimeOriginal = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "dateTimeRelative":
                            dateTimeRelative = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "duplicateId":
                            duplicateId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "isFavorite":
                            isFavorite = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "latitude":
                            latitude = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "longitude":
                            longitude = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "rating":
                            rating = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "timeZone":
                            varTimeZone = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "visibility":
                            string? visibilityRawValue = utf8JsonReader.GetString();
                            if (visibilityRawValue != null)
                                visibility = new Option<AssetVisibility?>(AssetVisibilityValueConverter.FromStringOrDefault(visibilityRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!ids.IsSet)
                throw new ArgumentException("Property is required for class AssetBulkUpdateDto.", nameof(ids));

            if (ids.IsSet && ids.Value == null)
                throw new ArgumentNullException(nameof(ids), "Property is not nullable for class AssetBulkUpdateDto.");

            if (dateTimeOriginal.IsSet && dateTimeOriginal.Value == null)
                throw new ArgumentNullException(nameof(dateTimeOriginal), "Property is not nullable for class AssetBulkUpdateDto.");

            if (dateTimeRelative.IsSet && dateTimeRelative.Value == null)
                throw new ArgumentNullException(nameof(dateTimeRelative), "Property is not nullable for class AssetBulkUpdateDto.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class AssetBulkUpdateDto.");

            if (isFavorite.IsSet && isFavorite.Value == null)
                throw new ArgumentNullException(nameof(isFavorite), "Property is not nullable for class AssetBulkUpdateDto.");

            if (latitude.IsSet && latitude.Value == null)
                throw new ArgumentNullException(nameof(latitude), "Property is not nullable for class AssetBulkUpdateDto.");

            if (longitude.IsSet && longitude.Value == null)
                throw new ArgumentNullException(nameof(longitude), "Property is not nullable for class AssetBulkUpdateDto.");

            if (rating.IsSet && rating.Value == null)
                throw new ArgumentNullException(nameof(rating), "Property is not nullable for class AssetBulkUpdateDto.");

            if (varTimeZone.IsSet && varTimeZone.Value == null)
                throw new ArgumentNullException(nameof(varTimeZone), "Property is not nullable for class AssetBulkUpdateDto.");

            if (visibility.IsSet && visibility.Value == null)
                throw new ArgumentNullException(nameof(visibility), "Property is not nullable for class AssetBulkUpdateDto.");

            return new AssetBulkUpdateDto(ids.Value!, dateTimeOriginal, dateTimeRelative, description, duplicateId, isFavorite, latitude, longitude, rating, varTimeZone, visibility);
        }

        /// <summary>
        /// Serializes a <see cref="AssetBulkUpdateDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="assetBulkUpdateDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AssetBulkUpdateDto assetBulkUpdateDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, assetBulkUpdateDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AssetBulkUpdateDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="assetBulkUpdateDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AssetBulkUpdateDto assetBulkUpdateDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (assetBulkUpdateDto.Ids == null)
                throw new ArgumentNullException(nameof(assetBulkUpdateDto.Ids), "Property is required for class AssetBulkUpdateDto.");

            if (assetBulkUpdateDto.DateTimeOriginalOption.IsSet && assetBulkUpdateDto.DateTimeOriginal == null)
                throw new ArgumentNullException(nameof(assetBulkUpdateDto.DateTimeOriginal), "Property is required for class AssetBulkUpdateDto.");

            if (assetBulkUpdateDto.DescriptionOption.IsSet && assetBulkUpdateDto.Description == null)
                throw new ArgumentNullException(nameof(assetBulkUpdateDto.Description), "Property is required for class AssetBulkUpdateDto.");

            if (assetBulkUpdateDto.VarTimeZoneOption.IsSet && assetBulkUpdateDto.VarTimeZone == null)
                throw new ArgumentNullException(nameof(assetBulkUpdateDto.VarTimeZone), "Property is required for class AssetBulkUpdateDto.");

            writer.WritePropertyName("ids");
            JsonSerializer.Serialize(writer, assetBulkUpdateDto.Ids, jsonSerializerOptions);
            if (assetBulkUpdateDto.DateTimeOriginalOption.IsSet)
                writer.WriteString("dateTimeOriginal", assetBulkUpdateDto.DateTimeOriginal);

            if (assetBulkUpdateDto.DateTimeRelativeOption.IsSet)
                writer.WriteNumber("dateTimeRelative", assetBulkUpdateDto.DateTimeRelativeOption.Value!.Value);

            if (assetBulkUpdateDto.DescriptionOption.IsSet)
                writer.WriteString("description", assetBulkUpdateDto.Description);

            if (assetBulkUpdateDto.DuplicateIdOption.IsSet)
                if (assetBulkUpdateDto.DuplicateIdOption.Value != null)
                    writer.WriteString("duplicateId", assetBulkUpdateDto.DuplicateId);
                else
                    writer.WriteNull("duplicateId");

            if (assetBulkUpdateDto.IsFavoriteOption.IsSet)
                writer.WriteBoolean("isFavorite", assetBulkUpdateDto.IsFavoriteOption.Value!.Value);

            if (assetBulkUpdateDto.LatitudeOption.IsSet)
                writer.WriteNumber("latitude", assetBulkUpdateDto.LatitudeOption.Value!.Value);

            if (assetBulkUpdateDto.LongitudeOption.IsSet)
                writer.WriteNumber("longitude", assetBulkUpdateDto.LongitudeOption.Value!.Value);

            if (assetBulkUpdateDto.RatingOption.IsSet)
                writer.WriteNumber("rating", assetBulkUpdateDto.RatingOption.Value!.Value);

            if (assetBulkUpdateDto.VarTimeZoneOption.IsSet)
                writer.WriteString("timeZone", assetBulkUpdateDto.VarTimeZone);

            if (assetBulkUpdateDto.VisibilityOption.IsSet)
            {
                var visibilityRawValue = AssetVisibilityValueConverter.ToJsonValue(assetBulkUpdateDto.Visibility!.Value);
                writer.WriteString("visibility", visibilityRawValue);
            }
        }
    }
}
