// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines AssetOrder
    /// </summary>
    public enum AssetOrder
    {
        /// <summary>
        /// Enum Asc for value: asc
        /// </summary>
        Asc = 1,

        /// <summary>
        /// Enum Desc for value: desc
        /// </summary>
        Desc = 2
    }

    /// <summary>
    /// Converts <see cref="AssetOrder"/> to and from the JSON value
    /// </summary>
    public static class AssetOrderValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="AssetOrder"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AssetOrder FromString(string value)
        {
            if (value.Equals("asc"))
                return AssetOrder.Asc;

            if (value.Equals("desc"))
                return AssetOrder.Desc;

            throw new NotImplementedException($"Could not convert value to type AssetOrder: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="AssetOrder"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AssetOrder? FromStringOrDefault(string value)
        {
            if (value.Equals("asc"))
                return AssetOrder.Asc;

            if (value.Equals("desc"))
                return AssetOrder.Desc;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AssetOrder"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(AssetOrder value)
        {
            if (value == AssetOrder.Asc)
                return "asc";

            if (value == AssetOrder.Desc)
                return "desc";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AssetOrder"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class AssetOrderJsonConverter : JsonConverter<AssetOrder>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override AssetOrder Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            AssetOrder? result = rawValue == null
                ? null
                : AssetOrderValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the AssetOrder to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="assetOrder"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, AssetOrder assetOrder, JsonSerializerOptions options)
        {
            writer.WriteStringValue(AssetOrderValueConverter.ToJsonValue(assetOrder).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AssetOrder"/>
    /// </summary>
    public class AssetOrderNullableJsonConverter : JsonConverter<AssetOrder?>
    {
        /// <summary>
        /// Returns a AssetOrder from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override AssetOrder? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            AssetOrder? result = rawValue == null
                ? null
                : AssetOrderValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the AssetOrder to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="assetOrder"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, AssetOrder? assetOrder, JsonSerializerOptions options)
        {
            writer.WriteStringValue(assetOrder.HasValue ? AssetOrderValueConverter.ToJsonValue(assetOrder.Value).ToString() : "null");
        }
    }
}
