// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PersonUpdateDto
    /// </summary>
    public partial class PersonUpdateDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonUpdateDto" /> class.
        /// </summary>
        /// <param name="birthDate">Person date of birth. Note: the mobile app cannot currently set the birth date to null.</param>
        /// <param name="color">color</param>
        /// <param name="featureFaceAssetId">Asset is used to get the feature face thumbnail.</param>
        /// <param name="isFavorite">isFavorite</param>
        /// <param name="isHidden">Person visibility</param>
        /// <param name="name">Person name.</param>
        [JsonConstructor]
        public PersonUpdateDto(Option<DateOnly?> birthDate = default, Option<string?> color = default, Option<Guid?> featureFaceAssetId = default, Option<bool?> isFavorite = default, Option<bool?> isHidden = default, Option<string?> name = default)
        {
            BirthDateOption = birthDate;
            ColorOption = color;
            FeatureFaceAssetIdOption = featureFaceAssetId;
            IsFavoriteOption = isFavorite;
            IsHiddenOption = isHidden;
            NameOption = name;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of BirthDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> BirthDateOption { get; private set; }

        /// <summary>
        /// Person date of birth. Note: the mobile app cannot currently set the birth date to null.
        /// </summary>
        /// <value>Person date of birth. Note: the mobile app cannot currently set the birth date to null.</value>
        [JsonPropertyName("birthDate")]
        public DateOnly? BirthDate { get { return this.BirthDateOption; } set { this.BirthDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Color
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ColorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [JsonPropertyName("color")]
        public string? Color { get { return this.ColorOption; } set { this.ColorOption = new(value); } }

        /// <summary>
        /// Used to track the state of FeatureFaceAssetId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> FeatureFaceAssetIdOption { get; private set; }

        /// <summary>
        /// Asset is used to get the feature face thumbnail.
        /// </summary>
        /// <value>Asset is used to get the feature face thumbnail.</value>
        [JsonPropertyName("featureFaceAssetId")]
        public Guid? FeatureFaceAssetId { get { return this.FeatureFaceAssetIdOption; } set { this.FeatureFaceAssetIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsFavorite
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsFavoriteOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsFavorite
        /// </summary>
        [JsonPropertyName("isFavorite")]
        public bool? IsFavorite { get { return this.IsFavoriteOption; } set { this.IsFavoriteOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsHidden
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsHiddenOption { get; private set; }

        /// <summary>
        /// Person visibility
        /// </summary>
        /// <value>Person visibility</value>
        [JsonPropertyName("isHidden")]
        public bool? IsHidden { get { return this.IsHiddenOption; } set { this.IsHiddenOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Person name.
        /// </summary>
        /// <value>Person name.</value>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PersonUpdateDto {\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  FeatureFaceAssetId: ").Append(FeatureFaceAssetId).Append("\n");
            sb.Append("  IsFavorite: ").Append(IsFavorite).Append("\n");
            sb.Append("  IsHidden: ").Append(IsHidden).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PersonUpdateDto" />
    /// </summary>
    public class PersonUpdateDtoJsonConverter : JsonConverter<PersonUpdateDto>
    {
        /// <summary>
        /// The format to use to serialize BirthDate
        /// </summary>
        public static string BirthDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="PersonUpdateDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PersonUpdateDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateOnly?> birthDate = default;
            Option<string?> color = default;
            Option<Guid?> featureFaceAssetId = default;
            Option<bool?> isFavorite = default;
            Option<bool?> isHidden = default;
            Option<string?> name = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "birthDate":
                            birthDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "color":
                            color = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "featureFaceAssetId":
                            featureFaceAssetId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "isFavorite":
                            isFavorite = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "isHidden":
                            isHidden = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (featureFaceAssetId.IsSet && featureFaceAssetId.Value == null)
                throw new ArgumentNullException(nameof(featureFaceAssetId), "Property is not nullable for class PersonUpdateDto.");

            if (isFavorite.IsSet && isFavorite.Value == null)
                throw new ArgumentNullException(nameof(isFavorite), "Property is not nullable for class PersonUpdateDto.");

            if (isHidden.IsSet && isHidden.Value == null)
                throw new ArgumentNullException(nameof(isHidden), "Property is not nullable for class PersonUpdateDto.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class PersonUpdateDto.");

            return new PersonUpdateDto(birthDate, color, featureFaceAssetId, isFavorite, isHidden, name);
        }

        /// <summary>
        /// Serializes a <see cref="PersonUpdateDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="personUpdateDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PersonUpdateDto personUpdateDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, personUpdateDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PersonUpdateDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="personUpdateDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PersonUpdateDto personUpdateDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (personUpdateDto.NameOption.IsSet && personUpdateDto.Name == null)
                throw new ArgumentNullException(nameof(personUpdateDto.Name), "Property is required for class PersonUpdateDto.");

            if (personUpdateDto.BirthDateOption.IsSet)
                if (personUpdateDto.BirthDateOption.Value != null)
                    writer.WriteString("birthDate", personUpdateDto.BirthDateOption.Value!.Value.ToString(BirthDateFormat));
                else
                    writer.WriteNull("birthDate");

            if (personUpdateDto.ColorOption.IsSet)
                if (personUpdateDto.ColorOption.Value != null)
                    writer.WriteString("color", personUpdateDto.Color);
                else
                    writer.WriteNull("color");

            if (personUpdateDto.FeatureFaceAssetIdOption.IsSet)
                writer.WriteString("featureFaceAssetId", personUpdateDto.FeatureFaceAssetIdOption.Value!.Value);

            if (personUpdateDto.IsFavoriteOption.IsSet)
                writer.WriteBoolean("isFavorite", personUpdateDto.IsFavoriteOption.Value!.Value);

            if (personUpdateDto.IsHiddenOption.IsSet)
                writer.WriteBoolean("isHidden", personUpdateDto.IsHiddenOption.Value!.Value);

            if (personUpdateDto.NameOption.IsSet)
                writer.WriteString("name", personUpdateDto.Name);
        }
    }
}
