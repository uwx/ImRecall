// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SyncAssetExifV1
    /// </summary>
    public partial class SyncAssetExifV1 : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SyncAssetExifV1" /> class.
        /// </summary>
        /// <param name="assetId">assetId</param>
        /// <param name="city">city</param>
        /// <param name="country">country</param>
        /// <param name="dateTimeOriginal">dateTimeOriginal</param>
        /// <param name="description">description</param>
        /// <param name="exifImageHeight">exifImageHeight</param>
        /// <param name="exifImageWidth">exifImageWidth</param>
        /// <param name="exposureTime">exposureTime</param>
        /// <param name="fNumber">fNumber</param>
        /// <param name="fileSizeInByte">fileSizeInByte</param>
        /// <param name="focalLength">focalLength</param>
        /// <param name="fps">fps</param>
        /// <param name="iso">iso</param>
        /// <param name="latitude">latitude</param>
        /// <param name="lensModel">lensModel</param>
        /// <param name="longitude">longitude</param>
        /// <param name="make">make</param>
        /// <param name="model">model</param>
        /// <param name="modifyDate">modifyDate</param>
        /// <param name="orientation">orientation</param>
        /// <param name="profileDescription">profileDescription</param>
        /// <param name="projectionType">projectionType</param>
        /// <param name="rating">rating</param>
        /// <param name="state">state</param>
        /// <param name="varTimeZone">varTimeZone</param>
        [JsonConstructor]
        public SyncAssetExifV1(string assetId, string? city = default, string? country = default, DateTime? dateTimeOriginal = default, string? description = default, int? exifImageHeight = default, int? exifImageWidth = default, string? exposureTime = default, double? fNumber = default, int? fileSizeInByte = default, double? focalLength = default, double? fps = default, int? iso = default, double? latitude = default, string? lensModel = default, double? longitude = default, string? make = default, string? model = default, DateTime? modifyDate = default, string? orientation = default, string? profileDescription = default, string? projectionType = default, int? rating = default, string? state = default, string? varTimeZone = default)
        {
            AssetId = assetId;
            City = city;
            Country = country;
            DateTimeOriginal = dateTimeOriginal;
            Description = description;
            ExifImageHeight = exifImageHeight;
            ExifImageWidth = exifImageWidth;
            ExposureTime = exposureTime;
            FNumber = fNumber;
            FileSizeInByte = fileSizeInByte;
            FocalLength = focalLength;
            Fps = fps;
            Iso = iso;
            Latitude = latitude;
            LensModel = lensModel;
            Longitude = longitude;
            Make = make;
            Model = model;
            ModifyDate = modifyDate;
            Orientation = orientation;
            ProfileDescription = profileDescription;
            ProjectionType = projectionType;
            Rating = rating;
            State = state;
            VarTimeZone = varTimeZone;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets AssetId
        /// </summary>
        [JsonPropertyName("assetId")]
        public string AssetId { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [JsonPropertyName("city")]
        public string? City { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [JsonPropertyName("country")]
        public string? Country { get; set; }

        /// <summary>
        /// Gets or Sets DateTimeOriginal
        /// </summary>
        [JsonPropertyName("dateTimeOriginal")]
        public DateTime? DateTimeOriginal { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get; set; }

        /// <summary>
        /// Gets or Sets ExifImageHeight
        /// </summary>
        [JsonPropertyName("exifImageHeight")]
        public int? ExifImageHeight { get; set; }

        /// <summary>
        /// Gets or Sets ExifImageWidth
        /// </summary>
        [JsonPropertyName("exifImageWidth")]
        public int? ExifImageWidth { get; set; }

        /// <summary>
        /// Gets or Sets ExposureTime
        /// </summary>
        [JsonPropertyName("exposureTime")]
        public string? ExposureTime { get; set; }

        /// <summary>
        /// Gets or Sets FNumber
        /// </summary>
        [JsonPropertyName("fNumber")]
        public double? FNumber { get; set; }

        /// <summary>
        /// Gets or Sets FileSizeInByte
        /// </summary>
        [JsonPropertyName("fileSizeInByte")]
        public int? FileSizeInByte { get; set; }

        /// <summary>
        /// Gets or Sets FocalLength
        /// </summary>
        [JsonPropertyName("focalLength")]
        public double? FocalLength { get; set; }

        /// <summary>
        /// Gets or Sets Fps
        /// </summary>
        [JsonPropertyName("fps")]
        public double? Fps { get; set; }

        /// <summary>
        /// Gets or Sets Iso
        /// </summary>
        [JsonPropertyName("iso")]
        public int? Iso { get; set; }

        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [JsonPropertyName("latitude")]
        public double? Latitude { get; set; }

        /// <summary>
        /// Gets or Sets LensModel
        /// </summary>
        [JsonPropertyName("lensModel")]
        public string? LensModel { get; set; }

        /// <summary>
        /// Gets or Sets Longitude
        /// </summary>
        [JsonPropertyName("longitude")]
        public double? Longitude { get; set; }

        /// <summary>
        /// Gets or Sets Make
        /// </summary>
        [JsonPropertyName("make")]
        public string? Make { get; set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [JsonPropertyName("model")]
        public string? Model { get; set; }

        /// <summary>
        /// Gets or Sets ModifyDate
        /// </summary>
        [JsonPropertyName("modifyDate")]
        public DateTime? ModifyDate { get; set; }

        /// <summary>
        /// Gets or Sets Orientation
        /// </summary>
        [JsonPropertyName("orientation")]
        public string? Orientation { get; set; }

        /// <summary>
        /// Gets or Sets ProfileDescription
        /// </summary>
        [JsonPropertyName("profileDescription")]
        public string? ProfileDescription { get; set; }

        /// <summary>
        /// Gets or Sets ProjectionType
        /// </summary>
        [JsonPropertyName("projectionType")]
        public string? ProjectionType { get; set; }

        /// <summary>
        /// Gets or Sets Rating
        /// </summary>
        [JsonPropertyName("rating")]
        public int? Rating { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonPropertyName("state")]
        public string? State { get; set; }

        /// <summary>
        /// Gets or Sets VarTimeZone
        /// </summary>
        [JsonPropertyName("timeZone")]
        public string? VarTimeZone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SyncAssetExifV1 {\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  DateTimeOriginal: ").Append(DateTimeOriginal).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExifImageHeight: ").Append(ExifImageHeight).Append("\n");
            sb.Append("  ExifImageWidth: ").Append(ExifImageWidth).Append("\n");
            sb.Append("  ExposureTime: ").Append(ExposureTime).Append("\n");
            sb.Append("  FNumber: ").Append(FNumber).Append("\n");
            sb.Append("  FileSizeInByte: ").Append(FileSizeInByte).Append("\n");
            sb.Append("  FocalLength: ").Append(FocalLength).Append("\n");
            sb.Append("  Fps: ").Append(Fps).Append("\n");
            sb.Append("  Iso: ").Append(Iso).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  LensModel: ").Append(LensModel).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Make: ").Append(Make).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  ModifyDate: ").Append(ModifyDate).Append("\n");
            sb.Append("  Orientation: ").Append(Orientation).Append("\n");
            sb.Append("  ProfileDescription: ").Append(ProfileDescription).Append("\n");
            sb.Append("  ProjectionType: ").Append(ProjectionType).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  VarTimeZone: ").Append(VarTimeZone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SyncAssetExifV1" />
    /// </summary>
    public class SyncAssetExifV1JsonConverter : JsonConverter<SyncAssetExifV1>
    {
        /// <summary>
        /// The format to use to serialize DateTimeOriginal
        /// </summary>
        public static string DateTimeOriginalFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ModifyDate
        /// </summary>
        public static string ModifyDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="SyncAssetExifV1" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SyncAssetExifV1 Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> assetId = default;
            Option<string?> city = default;
            Option<string?> country = default;
            Option<DateTime?> dateTimeOriginal = default;
            Option<string?> description = default;
            Option<int?> exifImageHeight = default;
            Option<int?> exifImageWidth = default;
            Option<string?> exposureTime = default;
            Option<double?> fNumber = default;
            Option<int?> fileSizeInByte = default;
            Option<double?> focalLength = default;
            Option<double?> fps = default;
            Option<int?> iso = default;
            Option<double?> latitude = default;
            Option<string?> lensModel = default;
            Option<double?> longitude = default;
            Option<string?> make = default;
            Option<string?> model = default;
            Option<DateTime?> modifyDate = default;
            Option<string?> orientation = default;
            Option<string?> profileDescription = default;
            Option<string?> projectionType = default;
            Option<int?> rating = default;
            Option<string?> state = default;
            Option<string?> varTimeZone = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "assetId":
                            assetId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "city":
                            city = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "country":
                            country = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "dateTimeOriginal":
                            dateTimeOriginal = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "exifImageHeight":
                            exifImageHeight = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "exifImageWidth":
                            exifImageWidth = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "exposureTime":
                            exposureTime = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "fNumber":
                            fNumber = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "fileSizeInByte":
                            fileSizeInByte = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "focalLength":
                            focalLength = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "fps":
                            fps = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "iso":
                            iso = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "latitude":
                            latitude = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "lensModel":
                            lensModel = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "longitude":
                            longitude = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "make":
                            make = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "model":
                            model = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "modifyDate":
                            modifyDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "orientation":
                            orientation = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "profileDescription":
                            profileDescription = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "projectionType":
                            projectionType = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "rating":
                            rating = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "state":
                            state = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "timeZone":
                            varTimeZone = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!assetId.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetExifV1.", nameof(assetId));

            if (!city.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetExifV1.", nameof(city));

            if (!country.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetExifV1.", nameof(country));

            if (!dateTimeOriginal.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetExifV1.", nameof(dateTimeOriginal));

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetExifV1.", nameof(description));

            if (!exifImageHeight.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetExifV1.", nameof(exifImageHeight));

            if (!exifImageWidth.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetExifV1.", nameof(exifImageWidth));

            if (!exposureTime.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetExifV1.", nameof(exposureTime));

            if (!fNumber.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetExifV1.", nameof(fNumber));

            if (!fileSizeInByte.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetExifV1.", nameof(fileSizeInByte));

            if (!focalLength.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetExifV1.", nameof(focalLength));

            if (!fps.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetExifV1.", nameof(fps));

            if (!iso.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetExifV1.", nameof(iso));

            if (!latitude.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetExifV1.", nameof(latitude));

            if (!lensModel.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetExifV1.", nameof(lensModel));

            if (!longitude.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetExifV1.", nameof(longitude));

            if (!make.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetExifV1.", nameof(make));

            if (!model.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetExifV1.", nameof(model));

            if (!modifyDate.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetExifV1.", nameof(modifyDate));

            if (!orientation.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetExifV1.", nameof(orientation));

            if (!profileDescription.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetExifV1.", nameof(profileDescription));

            if (!projectionType.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetExifV1.", nameof(projectionType));

            if (!rating.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetExifV1.", nameof(rating));

            if (!state.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetExifV1.", nameof(state));

            if (!varTimeZone.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetExifV1.", nameof(varTimeZone));

            if (assetId.IsSet && assetId.Value == null)
                throw new ArgumentNullException(nameof(assetId), "Property is not nullable for class SyncAssetExifV1.");

            return new SyncAssetExifV1(assetId.Value!, city.Value!, country.Value!, dateTimeOriginal.Value!, description.Value!, exifImageHeight.Value!, exifImageWidth.Value!, exposureTime.Value!, fNumber.Value!, fileSizeInByte.Value!, focalLength.Value!, fps.Value!, iso.Value!, latitude.Value!, lensModel.Value!, longitude.Value!, make.Value!, model.Value!, modifyDate.Value!, orientation.Value!, profileDescription.Value!, projectionType.Value!, rating.Value!, state.Value!, varTimeZone.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="SyncAssetExifV1" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="syncAssetExifV1"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SyncAssetExifV1 syncAssetExifV1, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, syncAssetExifV1, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SyncAssetExifV1" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="syncAssetExifV1"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SyncAssetExifV1 syncAssetExifV1, JsonSerializerOptions jsonSerializerOptions)
        {
            if (syncAssetExifV1.AssetId == null)
                throw new ArgumentNullException(nameof(syncAssetExifV1.AssetId), "Property is required for class SyncAssetExifV1.");

            writer.WriteString("assetId", syncAssetExifV1.AssetId);

            if (syncAssetExifV1.City != null)
                writer.WriteString("city", syncAssetExifV1.City);
            else
                writer.WriteNull("city");

            if (syncAssetExifV1.Country != null)
                writer.WriteString("country", syncAssetExifV1.Country);
            else
                writer.WriteNull("country");

            if (syncAssetExifV1.DateTimeOriginal != null)
                writer.WriteString("dateTimeOriginal", syncAssetExifV1.DateTimeOriginal.Value.ToString(DateTimeOriginalFormat));
            else
                writer.WriteNull("dateTimeOriginal");

            if (syncAssetExifV1.Description != null)
                writer.WriteString("description", syncAssetExifV1.Description);
            else
                writer.WriteNull("description");

            if (syncAssetExifV1.ExifImageHeight != null)
                writer.WriteNumber("exifImageHeight", syncAssetExifV1.ExifImageHeight.Value);
            else
                writer.WriteNull("exifImageHeight");

            if (syncAssetExifV1.ExifImageWidth != null)
                writer.WriteNumber("exifImageWidth", syncAssetExifV1.ExifImageWidth.Value);
            else
                writer.WriteNull("exifImageWidth");

            if (syncAssetExifV1.ExposureTime != null)
                writer.WriteString("exposureTime", syncAssetExifV1.ExposureTime);
            else
                writer.WriteNull("exposureTime");

            if (syncAssetExifV1.FNumber != null)
                writer.WriteNumber("fNumber", syncAssetExifV1.FNumber.Value);
            else
                writer.WriteNull("fNumber");

            if (syncAssetExifV1.FileSizeInByte != null)
                writer.WriteNumber("fileSizeInByte", syncAssetExifV1.FileSizeInByte.Value);
            else
                writer.WriteNull("fileSizeInByte");

            if (syncAssetExifV1.FocalLength != null)
                writer.WriteNumber("focalLength", syncAssetExifV1.FocalLength.Value);
            else
                writer.WriteNull("focalLength");

            if (syncAssetExifV1.Fps != null)
                writer.WriteNumber("fps", syncAssetExifV1.Fps.Value);
            else
                writer.WriteNull("fps");

            if (syncAssetExifV1.Iso != null)
                writer.WriteNumber("iso", syncAssetExifV1.Iso.Value);
            else
                writer.WriteNull("iso");

            if (syncAssetExifV1.Latitude != null)
                writer.WriteNumber("latitude", syncAssetExifV1.Latitude.Value);
            else
                writer.WriteNull("latitude");

            if (syncAssetExifV1.LensModel != null)
                writer.WriteString("lensModel", syncAssetExifV1.LensModel);
            else
                writer.WriteNull("lensModel");

            if (syncAssetExifV1.Longitude != null)
                writer.WriteNumber("longitude", syncAssetExifV1.Longitude.Value);
            else
                writer.WriteNull("longitude");

            if (syncAssetExifV1.Make != null)
                writer.WriteString("make", syncAssetExifV1.Make);
            else
                writer.WriteNull("make");

            if (syncAssetExifV1.Model != null)
                writer.WriteString("model", syncAssetExifV1.Model);
            else
                writer.WriteNull("model");

            if (syncAssetExifV1.ModifyDate != null)
                writer.WriteString("modifyDate", syncAssetExifV1.ModifyDate.Value.ToString(ModifyDateFormat));
            else
                writer.WriteNull("modifyDate");

            if (syncAssetExifV1.Orientation != null)
                writer.WriteString("orientation", syncAssetExifV1.Orientation);
            else
                writer.WriteNull("orientation");

            if (syncAssetExifV1.ProfileDescription != null)
                writer.WriteString("profileDescription", syncAssetExifV1.ProfileDescription);
            else
                writer.WriteNull("profileDescription");

            if (syncAssetExifV1.ProjectionType != null)
                writer.WriteString("projectionType", syncAssetExifV1.ProjectionType);
            else
                writer.WriteNull("projectionType");

            if (syncAssetExifV1.Rating != null)
                writer.WriteNumber("rating", syncAssetExifV1.Rating.Value);
            else
                writer.WriteNull("rating");

            if (syncAssetExifV1.State != null)
                writer.WriteString("state", syncAssetExifV1.State);
            else
                writer.WriteNull("state");

            if (syncAssetExifV1.VarTimeZone != null)
                writer.WriteString("timeZone", syncAssetExifV1.VarTimeZone);
            else
                writer.WriteNull("timeZone");
        }
    }
}
