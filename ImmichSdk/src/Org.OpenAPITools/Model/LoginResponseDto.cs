// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// LoginResponseDto
    /// </summary>
    public partial class LoginResponseDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoginResponseDto" /> class.
        /// </summary>
        /// <param name="accessToken">accessToken</param>
        /// <param name="isAdmin">isAdmin</param>
        /// <param name="isOnboarded">isOnboarded</param>
        /// <param name="name">name</param>
        /// <param name="profileImagePath">profileImagePath</param>
        /// <param name="shouldChangePassword">shouldChangePassword</param>
        /// <param name="userEmail">userEmail</param>
        /// <param name="userId">userId</param>
        [JsonConstructor]
        public LoginResponseDto(string accessToken, bool isAdmin, bool isOnboarded, string name, string profileImagePath, bool shouldChangePassword, string userEmail, string userId)
        {
            AccessToken = accessToken;
            IsAdmin = isAdmin;
            IsOnboarded = isOnboarded;
            Name = name;
            ProfileImagePath = profileImagePath;
            ShouldChangePassword = shouldChangePassword;
            UserEmail = userEmail;
            UserId = userId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets AccessToken
        /// </summary>
        [JsonPropertyName("accessToken")]
        public string AccessToken { get; set; }

        /// <summary>
        /// Gets or Sets IsAdmin
        /// </summary>
        [JsonPropertyName("isAdmin")]
        public bool IsAdmin { get; set; }

        /// <summary>
        /// Gets or Sets IsOnboarded
        /// </summary>
        [JsonPropertyName("isOnboarded")]
        public bool IsOnboarded { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ProfileImagePath
        /// </summary>
        [JsonPropertyName("profileImagePath")]
        public string ProfileImagePath { get; set; }

        /// <summary>
        /// Gets or Sets ShouldChangePassword
        /// </summary>
        [JsonPropertyName("shouldChangePassword")]
        public bool ShouldChangePassword { get; set; }

        /// <summary>
        /// Gets or Sets UserEmail
        /// </summary>
        [JsonPropertyName("userEmail")]
        public string UserEmail { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("userId")]
        public string UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoginResponseDto {\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  IsAdmin: ").Append(IsAdmin).Append("\n");
            sb.Append("  IsOnboarded: ").Append(IsOnboarded).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ProfileImagePath: ").Append(ProfileImagePath).Append("\n");
            sb.Append("  ShouldChangePassword: ").Append(ShouldChangePassword).Append("\n");
            sb.Append("  UserEmail: ").Append(UserEmail).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="LoginResponseDto" />
    /// </summary>
    public class LoginResponseDtoJsonConverter : JsonConverter<LoginResponseDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="LoginResponseDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override LoginResponseDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> accessToken = default;
            Option<bool?> isAdmin = default;
            Option<bool?> isOnboarded = default;
            Option<string?> name = default;
            Option<string?> profileImagePath = default;
            Option<bool?> shouldChangePassword = default;
            Option<string?> userEmail = default;
            Option<string?> userId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "accessToken":
                            accessToken = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "isAdmin":
                            isAdmin = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "isOnboarded":
                            isOnboarded = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "profileImagePath":
                            profileImagePath = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "shouldChangePassword":
                            shouldChangePassword = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "userEmail":
                            userEmail = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "userId":
                            userId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!accessToken.IsSet)
                throw new ArgumentException("Property is required for class LoginResponseDto.", nameof(accessToken));

            if (!isAdmin.IsSet)
                throw new ArgumentException("Property is required for class LoginResponseDto.", nameof(isAdmin));

            if (!isOnboarded.IsSet)
                throw new ArgumentException("Property is required for class LoginResponseDto.", nameof(isOnboarded));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class LoginResponseDto.", nameof(name));

            if (!profileImagePath.IsSet)
                throw new ArgumentException("Property is required for class LoginResponseDto.", nameof(profileImagePath));

            if (!shouldChangePassword.IsSet)
                throw new ArgumentException("Property is required for class LoginResponseDto.", nameof(shouldChangePassword));

            if (!userEmail.IsSet)
                throw new ArgumentException("Property is required for class LoginResponseDto.", nameof(userEmail));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class LoginResponseDto.", nameof(userId));

            if (accessToken.IsSet && accessToken.Value == null)
                throw new ArgumentNullException(nameof(accessToken), "Property is not nullable for class LoginResponseDto.");

            if (isAdmin.IsSet && isAdmin.Value == null)
                throw new ArgumentNullException(nameof(isAdmin), "Property is not nullable for class LoginResponseDto.");

            if (isOnboarded.IsSet && isOnboarded.Value == null)
                throw new ArgumentNullException(nameof(isOnboarded), "Property is not nullable for class LoginResponseDto.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class LoginResponseDto.");

            if (profileImagePath.IsSet && profileImagePath.Value == null)
                throw new ArgumentNullException(nameof(profileImagePath), "Property is not nullable for class LoginResponseDto.");

            if (shouldChangePassword.IsSet && shouldChangePassword.Value == null)
                throw new ArgumentNullException(nameof(shouldChangePassword), "Property is not nullable for class LoginResponseDto.");

            if (userEmail.IsSet && userEmail.Value == null)
                throw new ArgumentNullException(nameof(userEmail), "Property is not nullable for class LoginResponseDto.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class LoginResponseDto.");

            return new LoginResponseDto(accessToken.Value!, isAdmin.Value!.Value!, isOnboarded.Value!.Value!, name.Value!, profileImagePath.Value!, shouldChangePassword.Value!.Value!, userEmail.Value!, userId.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="LoginResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="loginResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, LoginResponseDto loginResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, loginResponseDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="LoginResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="loginResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, LoginResponseDto loginResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (loginResponseDto.AccessToken == null)
                throw new ArgumentNullException(nameof(loginResponseDto.AccessToken), "Property is required for class LoginResponseDto.");

            if (loginResponseDto.Name == null)
                throw new ArgumentNullException(nameof(loginResponseDto.Name), "Property is required for class LoginResponseDto.");

            if (loginResponseDto.ProfileImagePath == null)
                throw new ArgumentNullException(nameof(loginResponseDto.ProfileImagePath), "Property is required for class LoginResponseDto.");

            if (loginResponseDto.UserEmail == null)
                throw new ArgumentNullException(nameof(loginResponseDto.UserEmail), "Property is required for class LoginResponseDto.");

            if (loginResponseDto.UserId == null)
                throw new ArgumentNullException(nameof(loginResponseDto.UserId), "Property is required for class LoginResponseDto.");

            writer.WriteString("accessToken", loginResponseDto.AccessToken);

            writer.WriteBoolean("isAdmin", loginResponseDto.IsAdmin);

            writer.WriteBoolean("isOnboarded", loginResponseDto.IsOnboarded);

            writer.WriteString("name", loginResponseDto.Name);

            writer.WriteString("profileImagePath", loginResponseDto.ProfileImagePath);

            writer.WriteBoolean("shouldChangePassword", loginResponseDto.ShouldChangePassword);

            writer.WriteString("userEmail", loginResponseDto.UserEmail);

            writer.WriteString("userId", loginResponseDto.UserId);
        }
    }
}
