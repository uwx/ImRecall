// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines SourceType
    /// </summary>
    public enum SourceType
    {
        /// <summary>
        /// Enum MachineLearning for value: machine-learning
        /// </summary>
        MachineLearning = 1,

        /// <summary>
        /// Enum Exif for value: exif
        /// </summary>
        Exif = 2,

        /// <summary>
        /// Enum Manual for value: manual
        /// </summary>
        Manual = 3
    }

    /// <summary>
    /// Converts <see cref="SourceType"/> to and from the JSON value
    /// </summary>
    public static class SourceTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="SourceType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SourceType FromString(string value)
        {
            if (value.Equals("machine-learning"))
                return SourceType.MachineLearning;

            if (value.Equals("exif"))
                return SourceType.Exif;

            if (value.Equals("manual"))
                return SourceType.Manual;

            throw new NotImplementedException($"Could not convert value to type SourceType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="SourceType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SourceType? FromStringOrDefault(string value)
        {
            if (value.Equals("machine-learning"))
                return SourceType.MachineLearning;

            if (value.Equals("exif"))
                return SourceType.Exif;

            if (value.Equals("manual"))
                return SourceType.Manual;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SourceType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(SourceType value)
        {
            if (value == SourceType.MachineLearning)
                return "machine-learning";

            if (value == SourceType.Exif)
                return "exif";

            if (value == SourceType.Manual)
                return "manual";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SourceType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class SourceTypeJsonConverter : JsonConverter<SourceType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override SourceType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            SourceType? result = rawValue == null
                ? null
                : SourceTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the SourceType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sourceType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, SourceType sourceType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(SourceTypeValueConverter.ToJsonValue(sourceType).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SourceType"/>
    /// </summary>
    public class SourceTypeNullableJsonConverter : JsonConverter<SourceType?>
    {
        /// <summary>
        /// Returns a SourceType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override SourceType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            SourceType? result = rawValue == null
                ? null
                : SourceTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the SourceType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sourceType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, SourceType? sourceType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(sourceType.HasValue ? SourceTypeValueConverter.ToJsonValue(sourceType.Value).ToString() : "null");
        }
    }
}
