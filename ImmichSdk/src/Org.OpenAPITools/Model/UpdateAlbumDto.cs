// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// UpdateAlbumDto
    /// </summary>
    public partial class UpdateAlbumDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateAlbumDto" /> class.
        /// </summary>
        /// <param name="albumName">albumName</param>
        /// <param name="albumThumbnailAssetId">albumThumbnailAssetId</param>
        /// <param name="description">description</param>
        /// <param name="isActivityEnabled">isActivityEnabled</param>
        /// <param name="order">order</param>
        [JsonConstructor]
        public UpdateAlbumDto(Option<string?> albumName = default, Option<Guid?> albumThumbnailAssetId = default, Option<string?> description = default, Option<bool?> isActivityEnabled = default, Option<AssetOrder?> order = default)
        {
            AlbumNameOption = albumName;
            AlbumThumbnailAssetIdOption = albumThumbnailAssetId;
            DescriptionOption = description;
            IsActivityEnabledOption = isActivityEnabled;
            OrderOption = order;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Order
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AssetOrder?> OrderOption { get; private set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [JsonPropertyName("order")]
        public AssetOrder? Order { get { return this.OrderOption; } set { this.OrderOption = new(value); } }

        /// <summary>
        /// Used to track the state of AlbumName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AlbumNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets AlbumName
        /// </summary>
        [JsonPropertyName("albumName")]
        public string? AlbumName { get { return this.AlbumNameOption; } set { this.AlbumNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of AlbumThumbnailAssetId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> AlbumThumbnailAssetIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets AlbumThumbnailAssetId
        /// </summary>
        [JsonPropertyName("albumThumbnailAssetId")]
        public Guid? AlbumThumbnailAssetId { get { return this.AlbumThumbnailAssetIdOption; } set { this.AlbumThumbnailAssetIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsActivityEnabled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsActivityEnabledOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsActivityEnabled
        /// </summary>
        [JsonPropertyName("isActivityEnabled")]
        public bool? IsActivityEnabled { get { return this.IsActivityEnabledOption; } set { this.IsActivityEnabledOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateAlbumDto {\n");
            sb.Append("  AlbumName: ").Append(AlbumName).Append("\n");
            sb.Append("  AlbumThumbnailAssetId: ").Append(AlbumThumbnailAssetId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IsActivityEnabled: ").Append(IsActivityEnabled).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UpdateAlbumDto" />
    /// </summary>
    public class UpdateAlbumDtoJsonConverter : JsonConverter<UpdateAlbumDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="UpdateAlbumDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UpdateAlbumDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> albumName = default;
            Option<Guid?> albumThumbnailAssetId = default;
            Option<string?> description = default;
            Option<bool?> isActivityEnabled = default;
            Option<AssetOrder?> order = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "albumName":
                            albumName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "albumThumbnailAssetId":
                            albumThumbnailAssetId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "isActivityEnabled":
                            isActivityEnabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "order":
                            string? orderRawValue = utf8JsonReader.GetString();
                            if (orderRawValue != null)
                                order = new Option<AssetOrder?>(AssetOrderValueConverter.FromStringOrDefault(orderRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (albumName.IsSet && albumName.Value == null)
                throw new ArgumentNullException(nameof(albumName), "Property is not nullable for class UpdateAlbumDto.");

            if (albumThumbnailAssetId.IsSet && albumThumbnailAssetId.Value == null)
                throw new ArgumentNullException(nameof(albumThumbnailAssetId), "Property is not nullable for class UpdateAlbumDto.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class UpdateAlbumDto.");

            if (isActivityEnabled.IsSet && isActivityEnabled.Value == null)
                throw new ArgumentNullException(nameof(isActivityEnabled), "Property is not nullable for class UpdateAlbumDto.");

            if (order.IsSet && order.Value == null)
                throw new ArgumentNullException(nameof(order), "Property is not nullable for class UpdateAlbumDto.");

            return new UpdateAlbumDto(albumName, albumThumbnailAssetId, description, isActivityEnabled, order);
        }

        /// <summary>
        /// Serializes a <see cref="UpdateAlbumDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateAlbumDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UpdateAlbumDto updateAlbumDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, updateAlbumDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UpdateAlbumDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateAlbumDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UpdateAlbumDto updateAlbumDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (updateAlbumDto.AlbumNameOption.IsSet && updateAlbumDto.AlbumName == null)
                throw new ArgumentNullException(nameof(updateAlbumDto.AlbumName), "Property is required for class UpdateAlbumDto.");

            if (updateAlbumDto.DescriptionOption.IsSet && updateAlbumDto.Description == null)
                throw new ArgumentNullException(nameof(updateAlbumDto.Description), "Property is required for class UpdateAlbumDto.");

            if (updateAlbumDto.AlbumNameOption.IsSet)
                writer.WriteString("albumName", updateAlbumDto.AlbumName);

            if (updateAlbumDto.AlbumThumbnailAssetIdOption.IsSet)
                writer.WriteString("albumThumbnailAssetId", updateAlbumDto.AlbumThumbnailAssetIdOption.Value!.Value);

            if (updateAlbumDto.DescriptionOption.IsSet)
                writer.WriteString("description", updateAlbumDto.Description);

            if (updateAlbumDto.IsActivityEnabledOption.IsSet)
                writer.WriteBoolean("isActivityEnabled", updateAlbumDto.IsActivityEnabledOption.Value!.Value);

            if (updateAlbumDto.OrderOption.IsSet)
            {
                var orderRawValue = AssetOrderValueConverter.ToJsonValue(updateAlbumDto.Order!.Value);
                writer.WriteString("order", orderRawValue);
            }
        }
    }
}
