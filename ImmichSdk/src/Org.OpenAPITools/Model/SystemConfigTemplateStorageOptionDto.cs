// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SystemConfigTemplateStorageOptionDto
    /// </summary>
    public partial class SystemConfigTemplateStorageOptionDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigTemplateStorageOptionDto" /> class.
        /// </summary>
        /// <param name="dayOptions">dayOptions</param>
        /// <param name="hourOptions">hourOptions</param>
        /// <param name="minuteOptions">minuteOptions</param>
        /// <param name="monthOptions">monthOptions</param>
        /// <param name="presetOptions">presetOptions</param>
        /// <param name="secondOptions">secondOptions</param>
        /// <param name="weekOptions">weekOptions</param>
        /// <param name="yearOptions">yearOptions</param>
        [JsonConstructor]
        public SystemConfigTemplateStorageOptionDto(List<string> dayOptions, List<string> hourOptions, List<string> minuteOptions, List<string> monthOptions, List<string> presetOptions, List<string> secondOptions, List<string> weekOptions, List<string> yearOptions)
        {
            DayOptions = dayOptions;
            HourOptions = hourOptions;
            MinuteOptions = minuteOptions;
            MonthOptions = monthOptions;
            PresetOptions = presetOptions;
            SecondOptions = secondOptions;
            WeekOptions = weekOptions;
            YearOptions = yearOptions;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets DayOptions
        /// </summary>
        [JsonPropertyName("dayOptions")]
        public List<string> DayOptions { get; set; }

        /// <summary>
        /// Gets or Sets HourOptions
        /// </summary>
        [JsonPropertyName("hourOptions")]
        public List<string> HourOptions { get; set; }

        /// <summary>
        /// Gets or Sets MinuteOptions
        /// </summary>
        [JsonPropertyName("minuteOptions")]
        public List<string> MinuteOptions { get; set; }

        /// <summary>
        /// Gets or Sets MonthOptions
        /// </summary>
        [JsonPropertyName("monthOptions")]
        public List<string> MonthOptions { get; set; }

        /// <summary>
        /// Gets or Sets PresetOptions
        /// </summary>
        [JsonPropertyName("presetOptions")]
        public List<string> PresetOptions { get; set; }

        /// <summary>
        /// Gets or Sets SecondOptions
        /// </summary>
        [JsonPropertyName("secondOptions")]
        public List<string> SecondOptions { get; set; }

        /// <summary>
        /// Gets or Sets WeekOptions
        /// </summary>
        [JsonPropertyName("weekOptions")]
        public List<string> WeekOptions { get; set; }

        /// <summary>
        /// Gets or Sets YearOptions
        /// </summary>
        [JsonPropertyName("yearOptions")]
        public List<string> YearOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SystemConfigTemplateStorageOptionDto {\n");
            sb.Append("  DayOptions: ").Append(DayOptions).Append("\n");
            sb.Append("  HourOptions: ").Append(HourOptions).Append("\n");
            sb.Append("  MinuteOptions: ").Append(MinuteOptions).Append("\n");
            sb.Append("  MonthOptions: ").Append(MonthOptions).Append("\n");
            sb.Append("  PresetOptions: ").Append(PresetOptions).Append("\n");
            sb.Append("  SecondOptions: ").Append(SecondOptions).Append("\n");
            sb.Append("  WeekOptions: ").Append(WeekOptions).Append("\n");
            sb.Append("  YearOptions: ").Append(YearOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SystemConfigTemplateStorageOptionDto" />
    /// </summary>
    public class SystemConfigTemplateStorageOptionDtoJsonConverter : JsonConverter<SystemConfigTemplateStorageOptionDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="SystemConfigTemplateStorageOptionDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SystemConfigTemplateStorageOptionDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>?> dayOptions = default;
            Option<List<string>?> hourOptions = default;
            Option<List<string>?> minuteOptions = default;
            Option<List<string>?> monthOptions = default;
            Option<List<string>?> presetOptions = default;
            Option<List<string>?> secondOptions = default;
            Option<List<string>?> weekOptions = default;
            Option<List<string>?> yearOptions = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "dayOptions":
                            dayOptions = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "hourOptions":
                            hourOptions = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "minuteOptions":
                            minuteOptions = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "monthOptions":
                            monthOptions = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "presetOptions":
                            presetOptions = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "secondOptions":
                            secondOptions = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "weekOptions":
                            weekOptions = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "yearOptions":
                            yearOptions = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!dayOptions.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigTemplateStorageOptionDto.", nameof(dayOptions));

            if (!hourOptions.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigTemplateStorageOptionDto.", nameof(hourOptions));

            if (!minuteOptions.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigTemplateStorageOptionDto.", nameof(minuteOptions));

            if (!monthOptions.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigTemplateStorageOptionDto.", nameof(monthOptions));

            if (!presetOptions.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigTemplateStorageOptionDto.", nameof(presetOptions));

            if (!secondOptions.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigTemplateStorageOptionDto.", nameof(secondOptions));

            if (!weekOptions.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigTemplateStorageOptionDto.", nameof(weekOptions));

            if (!yearOptions.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigTemplateStorageOptionDto.", nameof(yearOptions));

            if (dayOptions.IsSet && dayOptions.Value == null)
                throw new ArgumentNullException(nameof(dayOptions), "Property is not nullable for class SystemConfigTemplateStorageOptionDto.");

            if (hourOptions.IsSet && hourOptions.Value == null)
                throw new ArgumentNullException(nameof(hourOptions), "Property is not nullable for class SystemConfigTemplateStorageOptionDto.");

            if (minuteOptions.IsSet && minuteOptions.Value == null)
                throw new ArgumentNullException(nameof(minuteOptions), "Property is not nullable for class SystemConfigTemplateStorageOptionDto.");

            if (monthOptions.IsSet && monthOptions.Value == null)
                throw new ArgumentNullException(nameof(monthOptions), "Property is not nullable for class SystemConfigTemplateStorageOptionDto.");

            if (presetOptions.IsSet && presetOptions.Value == null)
                throw new ArgumentNullException(nameof(presetOptions), "Property is not nullable for class SystemConfigTemplateStorageOptionDto.");

            if (secondOptions.IsSet && secondOptions.Value == null)
                throw new ArgumentNullException(nameof(secondOptions), "Property is not nullable for class SystemConfigTemplateStorageOptionDto.");

            if (weekOptions.IsSet && weekOptions.Value == null)
                throw new ArgumentNullException(nameof(weekOptions), "Property is not nullable for class SystemConfigTemplateStorageOptionDto.");

            if (yearOptions.IsSet && yearOptions.Value == null)
                throw new ArgumentNullException(nameof(yearOptions), "Property is not nullable for class SystemConfigTemplateStorageOptionDto.");

            return new SystemConfigTemplateStorageOptionDto(dayOptions.Value!, hourOptions.Value!, minuteOptions.Value!, monthOptions.Value!, presetOptions.Value!, secondOptions.Value!, weekOptions.Value!, yearOptions.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="SystemConfigTemplateStorageOptionDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="systemConfigTemplateStorageOptionDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SystemConfigTemplateStorageOptionDto systemConfigTemplateStorageOptionDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, systemConfigTemplateStorageOptionDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SystemConfigTemplateStorageOptionDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="systemConfigTemplateStorageOptionDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SystemConfigTemplateStorageOptionDto systemConfigTemplateStorageOptionDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (systemConfigTemplateStorageOptionDto.DayOptions == null)
                throw new ArgumentNullException(nameof(systemConfigTemplateStorageOptionDto.DayOptions), "Property is required for class SystemConfigTemplateStorageOptionDto.");

            if (systemConfigTemplateStorageOptionDto.HourOptions == null)
                throw new ArgumentNullException(nameof(systemConfigTemplateStorageOptionDto.HourOptions), "Property is required for class SystemConfigTemplateStorageOptionDto.");

            if (systemConfigTemplateStorageOptionDto.MinuteOptions == null)
                throw new ArgumentNullException(nameof(systemConfigTemplateStorageOptionDto.MinuteOptions), "Property is required for class SystemConfigTemplateStorageOptionDto.");

            if (systemConfigTemplateStorageOptionDto.MonthOptions == null)
                throw new ArgumentNullException(nameof(systemConfigTemplateStorageOptionDto.MonthOptions), "Property is required for class SystemConfigTemplateStorageOptionDto.");

            if (systemConfigTemplateStorageOptionDto.PresetOptions == null)
                throw new ArgumentNullException(nameof(systemConfigTemplateStorageOptionDto.PresetOptions), "Property is required for class SystemConfigTemplateStorageOptionDto.");

            if (systemConfigTemplateStorageOptionDto.SecondOptions == null)
                throw new ArgumentNullException(nameof(systemConfigTemplateStorageOptionDto.SecondOptions), "Property is required for class SystemConfigTemplateStorageOptionDto.");

            if (systemConfigTemplateStorageOptionDto.WeekOptions == null)
                throw new ArgumentNullException(nameof(systemConfigTemplateStorageOptionDto.WeekOptions), "Property is required for class SystemConfigTemplateStorageOptionDto.");

            if (systemConfigTemplateStorageOptionDto.YearOptions == null)
                throw new ArgumentNullException(nameof(systemConfigTemplateStorageOptionDto.YearOptions), "Property is required for class SystemConfigTemplateStorageOptionDto.");

            writer.WritePropertyName("dayOptions");
            JsonSerializer.Serialize(writer, systemConfigTemplateStorageOptionDto.DayOptions, jsonSerializerOptions);
            writer.WritePropertyName("hourOptions");
            JsonSerializer.Serialize(writer, systemConfigTemplateStorageOptionDto.HourOptions, jsonSerializerOptions);
            writer.WritePropertyName("minuteOptions");
            JsonSerializer.Serialize(writer, systemConfigTemplateStorageOptionDto.MinuteOptions, jsonSerializerOptions);
            writer.WritePropertyName("monthOptions");
            JsonSerializer.Serialize(writer, systemConfigTemplateStorageOptionDto.MonthOptions, jsonSerializerOptions);
            writer.WritePropertyName("presetOptions");
            JsonSerializer.Serialize(writer, systemConfigTemplateStorageOptionDto.PresetOptions, jsonSerializerOptions);
            writer.WritePropertyName("secondOptions");
            JsonSerializer.Serialize(writer, systemConfigTemplateStorageOptionDto.SecondOptions, jsonSerializerOptions);
            writer.WritePropertyName("weekOptions");
            JsonSerializer.Serialize(writer, systemConfigTemplateStorageOptionDto.WeekOptions, jsonSerializerOptions);
            writer.WritePropertyName("yearOptions");
            JsonSerializer.Serialize(writer, systemConfigTemplateStorageOptionDto.YearOptions, jsonSerializerOptions);
        }
    }
}
