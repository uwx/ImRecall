// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines UserAvatarColor
    /// </summary>
    public enum UserAvatarColor
    {
        /// <summary>
        /// Enum Primary for value: primary
        /// </summary>
        Primary = 1,

        /// <summary>
        /// Enum Pink for value: pink
        /// </summary>
        Pink = 2,

        /// <summary>
        /// Enum Red for value: red
        /// </summary>
        Red = 3,

        /// <summary>
        /// Enum Yellow for value: yellow
        /// </summary>
        Yellow = 4,

        /// <summary>
        /// Enum Blue for value: blue
        /// </summary>
        Blue = 5,

        /// <summary>
        /// Enum Green for value: green
        /// </summary>
        Green = 6,

        /// <summary>
        /// Enum Purple for value: purple
        /// </summary>
        Purple = 7,

        /// <summary>
        /// Enum Orange for value: orange
        /// </summary>
        Orange = 8,

        /// <summary>
        /// Enum Gray for value: gray
        /// </summary>
        Gray = 9,

        /// <summary>
        /// Enum Amber for value: amber
        /// </summary>
        Amber = 10
    }

    /// <summary>
    /// Converts <see cref="UserAvatarColor"/> to and from the JSON value
    /// </summary>
    public static class UserAvatarColorValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="UserAvatarColor"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static UserAvatarColor FromString(string value)
        {
            if (value.Equals("primary"))
                return UserAvatarColor.Primary;

            if (value.Equals("pink"))
                return UserAvatarColor.Pink;

            if (value.Equals("red"))
                return UserAvatarColor.Red;

            if (value.Equals("yellow"))
                return UserAvatarColor.Yellow;

            if (value.Equals("blue"))
                return UserAvatarColor.Blue;

            if (value.Equals("green"))
                return UserAvatarColor.Green;

            if (value.Equals("purple"))
                return UserAvatarColor.Purple;

            if (value.Equals("orange"))
                return UserAvatarColor.Orange;

            if (value.Equals("gray"))
                return UserAvatarColor.Gray;

            if (value.Equals("amber"))
                return UserAvatarColor.Amber;

            throw new NotImplementedException($"Could not convert value to type UserAvatarColor: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="UserAvatarColor"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static UserAvatarColor? FromStringOrDefault(string value)
        {
            if (value.Equals("primary"))
                return UserAvatarColor.Primary;

            if (value.Equals("pink"))
                return UserAvatarColor.Pink;

            if (value.Equals("red"))
                return UserAvatarColor.Red;

            if (value.Equals("yellow"))
                return UserAvatarColor.Yellow;

            if (value.Equals("blue"))
                return UserAvatarColor.Blue;

            if (value.Equals("green"))
                return UserAvatarColor.Green;

            if (value.Equals("purple"))
                return UserAvatarColor.Purple;

            if (value.Equals("orange"))
                return UserAvatarColor.Orange;

            if (value.Equals("gray"))
                return UserAvatarColor.Gray;

            if (value.Equals("amber"))
                return UserAvatarColor.Amber;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="UserAvatarColor"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(UserAvatarColor value)
        {
            if (value == UserAvatarColor.Primary)
                return "primary";

            if (value == UserAvatarColor.Pink)
                return "pink";

            if (value == UserAvatarColor.Red)
                return "red";

            if (value == UserAvatarColor.Yellow)
                return "yellow";

            if (value == UserAvatarColor.Blue)
                return "blue";

            if (value == UserAvatarColor.Green)
                return "green";

            if (value == UserAvatarColor.Purple)
                return "purple";

            if (value == UserAvatarColor.Orange)
                return "orange";

            if (value == UserAvatarColor.Gray)
                return "gray";

            if (value == UserAvatarColor.Amber)
                return "amber";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserAvatarColor"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class UserAvatarColorJsonConverter : JsonConverter<UserAvatarColor>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override UserAvatarColor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            UserAvatarColor? result = rawValue == null
                ? null
                : UserAvatarColorValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the UserAvatarColor to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userAvatarColor"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, UserAvatarColor userAvatarColor, JsonSerializerOptions options)
        {
            writer.WriteStringValue(UserAvatarColorValueConverter.ToJsonValue(userAvatarColor).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserAvatarColor"/>
    /// </summary>
    public class UserAvatarColorNullableJsonConverter : JsonConverter<UserAvatarColor?>
    {
        /// <summary>
        /// Returns a UserAvatarColor from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override UserAvatarColor? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            UserAvatarColor? result = rawValue == null
                ? null
                : UserAvatarColorValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the UserAvatarColor to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userAvatarColor"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, UserAvatarColor? userAvatarColor, JsonSerializerOptions options)
        {
            writer.WriteStringValue(userAvatarColor.HasValue ? UserAvatarColorValueConverter.ToJsonValue(userAvatarColor.Value).ToString() : "null");
        }
    }
}
