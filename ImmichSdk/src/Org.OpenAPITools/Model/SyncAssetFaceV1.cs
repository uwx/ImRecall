// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SyncAssetFaceV1
    /// </summary>
    public partial class SyncAssetFaceV1 : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SyncAssetFaceV1" /> class.
        /// </summary>
        /// <param name="assetId">assetId</param>
        /// <param name="boundingBoxX1">boundingBoxX1</param>
        /// <param name="boundingBoxX2">boundingBoxX2</param>
        /// <param name="boundingBoxY1">boundingBoxY1</param>
        /// <param name="boundingBoxY2">boundingBoxY2</param>
        /// <param name="id">id</param>
        /// <param name="imageHeight">imageHeight</param>
        /// <param name="imageWidth">imageWidth</param>
        /// <param name="sourceType">sourceType</param>
        /// <param name="personId">personId</param>
        [JsonConstructor]
        public SyncAssetFaceV1(string assetId, int boundingBoxX1, int boundingBoxX2, int boundingBoxY1, int boundingBoxY2, string id, int imageHeight, int imageWidth, string sourceType, string? personId = default)
        {
            AssetId = assetId;
            BoundingBoxX1 = boundingBoxX1;
            BoundingBoxX2 = boundingBoxX2;
            BoundingBoxY1 = boundingBoxY1;
            BoundingBoxY2 = boundingBoxY2;
            Id = id;
            ImageHeight = imageHeight;
            ImageWidth = imageWidth;
            SourceType = sourceType;
            PersonId = personId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets AssetId
        /// </summary>
        [JsonPropertyName("assetId")]
        public string AssetId { get; set; }

        /// <summary>
        /// Gets or Sets BoundingBoxX1
        /// </summary>
        [JsonPropertyName("boundingBoxX1")]
        public int BoundingBoxX1 { get; set; }

        /// <summary>
        /// Gets or Sets BoundingBoxX2
        /// </summary>
        [JsonPropertyName("boundingBoxX2")]
        public int BoundingBoxX2 { get; set; }

        /// <summary>
        /// Gets or Sets BoundingBoxY1
        /// </summary>
        [JsonPropertyName("boundingBoxY1")]
        public int BoundingBoxY1 { get; set; }

        /// <summary>
        /// Gets or Sets BoundingBoxY2
        /// </summary>
        [JsonPropertyName("boundingBoxY2")]
        public int BoundingBoxY2 { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ImageHeight
        /// </summary>
        [JsonPropertyName("imageHeight")]
        public int ImageHeight { get; set; }

        /// <summary>
        /// Gets or Sets ImageWidth
        /// </summary>
        [JsonPropertyName("imageWidth")]
        public int ImageWidth { get; set; }

        /// <summary>
        /// Gets or Sets SourceType
        /// </summary>
        [JsonPropertyName("sourceType")]
        public string SourceType { get; set; }

        /// <summary>
        /// Gets or Sets PersonId
        /// </summary>
        [JsonPropertyName("personId")]
        public string? PersonId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SyncAssetFaceV1 {\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  BoundingBoxX1: ").Append(BoundingBoxX1).Append("\n");
            sb.Append("  BoundingBoxX2: ").Append(BoundingBoxX2).Append("\n");
            sb.Append("  BoundingBoxY1: ").Append(BoundingBoxY1).Append("\n");
            sb.Append("  BoundingBoxY2: ").Append(BoundingBoxY2).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImageHeight: ").Append(ImageHeight).Append("\n");
            sb.Append("  ImageWidth: ").Append(ImageWidth).Append("\n");
            sb.Append("  SourceType: ").Append(SourceType).Append("\n");
            sb.Append("  PersonId: ").Append(PersonId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SyncAssetFaceV1" />
    /// </summary>
    public class SyncAssetFaceV1JsonConverter : JsonConverter<SyncAssetFaceV1>
    {
        /// <summary>
        /// Deserializes json to <see cref="SyncAssetFaceV1" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SyncAssetFaceV1 Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> assetId = default;
            Option<int?> boundingBoxX1 = default;
            Option<int?> boundingBoxX2 = default;
            Option<int?> boundingBoxY1 = default;
            Option<int?> boundingBoxY2 = default;
            Option<string?> id = default;
            Option<int?> imageHeight = default;
            Option<int?> imageWidth = default;
            Option<string?> sourceType = default;
            Option<string?> personId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "assetId":
                            assetId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "boundingBoxX1":
                            boundingBoxX1 = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "boundingBoxX2":
                            boundingBoxX2 = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "boundingBoxY1":
                            boundingBoxY1 = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "boundingBoxY2":
                            boundingBoxY2 = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "imageHeight":
                            imageHeight = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "imageWidth":
                            imageWidth = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "sourceType":
                            sourceType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "personId":
                            personId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!assetId.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetFaceV1.", nameof(assetId));

            if (!boundingBoxX1.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetFaceV1.", nameof(boundingBoxX1));

            if (!boundingBoxX2.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetFaceV1.", nameof(boundingBoxX2));

            if (!boundingBoxY1.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetFaceV1.", nameof(boundingBoxY1));

            if (!boundingBoxY2.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetFaceV1.", nameof(boundingBoxY2));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetFaceV1.", nameof(id));

            if (!imageHeight.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetFaceV1.", nameof(imageHeight));

            if (!imageWidth.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetFaceV1.", nameof(imageWidth));

            if (!sourceType.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetFaceV1.", nameof(sourceType));

            if (!personId.IsSet)
                throw new ArgumentException("Property is required for class SyncAssetFaceV1.", nameof(personId));

            if (assetId.IsSet && assetId.Value == null)
                throw new ArgumentNullException(nameof(assetId), "Property is not nullable for class SyncAssetFaceV1.");

            if (boundingBoxX1.IsSet && boundingBoxX1.Value == null)
                throw new ArgumentNullException(nameof(boundingBoxX1), "Property is not nullable for class SyncAssetFaceV1.");

            if (boundingBoxX2.IsSet && boundingBoxX2.Value == null)
                throw new ArgumentNullException(nameof(boundingBoxX2), "Property is not nullable for class SyncAssetFaceV1.");

            if (boundingBoxY1.IsSet && boundingBoxY1.Value == null)
                throw new ArgumentNullException(nameof(boundingBoxY1), "Property is not nullable for class SyncAssetFaceV1.");

            if (boundingBoxY2.IsSet && boundingBoxY2.Value == null)
                throw new ArgumentNullException(nameof(boundingBoxY2), "Property is not nullable for class SyncAssetFaceV1.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class SyncAssetFaceV1.");

            if (imageHeight.IsSet && imageHeight.Value == null)
                throw new ArgumentNullException(nameof(imageHeight), "Property is not nullable for class SyncAssetFaceV1.");

            if (imageWidth.IsSet && imageWidth.Value == null)
                throw new ArgumentNullException(nameof(imageWidth), "Property is not nullable for class SyncAssetFaceV1.");

            if (sourceType.IsSet && sourceType.Value == null)
                throw new ArgumentNullException(nameof(sourceType), "Property is not nullable for class SyncAssetFaceV1.");

            return new SyncAssetFaceV1(assetId.Value!, boundingBoxX1.Value!.Value!, boundingBoxX2.Value!.Value!, boundingBoxY1.Value!.Value!, boundingBoxY2.Value!.Value!, id.Value!, imageHeight.Value!.Value!, imageWidth.Value!.Value!, sourceType.Value!, personId.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="SyncAssetFaceV1" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="syncAssetFaceV1"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SyncAssetFaceV1 syncAssetFaceV1, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, syncAssetFaceV1, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SyncAssetFaceV1" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="syncAssetFaceV1"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SyncAssetFaceV1 syncAssetFaceV1, JsonSerializerOptions jsonSerializerOptions)
        {
            if (syncAssetFaceV1.AssetId == null)
                throw new ArgumentNullException(nameof(syncAssetFaceV1.AssetId), "Property is required for class SyncAssetFaceV1.");

            if (syncAssetFaceV1.Id == null)
                throw new ArgumentNullException(nameof(syncAssetFaceV1.Id), "Property is required for class SyncAssetFaceV1.");

            if (syncAssetFaceV1.SourceType == null)
                throw new ArgumentNullException(nameof(syncAssetFaceV1.SourceType), "Property is required for class SyncAssetFaceV1.");

            writer.WriteString("assetId", syncAssetFaceV1.AssetId);

            writer.WriteNumber("boundingBoxX1", syncAssetFaceV1.BoundingBoxX1);

            writer.WriteNumber("boundingBoxX2", syncAssetFaceV1.BoundingBoxX2);

            writer.WriteNumber("boundingBoxY1", syncAssetFaceV1.BoundingBoxY1);

            writer.WriteNumber("boundingBoxY2", syncAssetFaceV1.BoundingBoxY2);

            writer.WriteString("id", syncAssetFaceV1.Id);

            writer.WriteNumber("imageHeight", syncAssetFaceV1.ImageHeight);

            writer.WriteNumber("imageWidth", syncAssetFaceV1.ImageWidth);

            writer.WriteString("sourceType", syncAssetFaceV1.SourceType);

            if (syncAssetFaceV1.PersonId != null)
                writer.WriteString("personId", syncAssetFaceV1.PersonId);
            else
                writer.WriteNull("personId");
        }
    }
}
