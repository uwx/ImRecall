// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines MemoryType
    /// </summary>
    public enum MemoryType
    {
        /// <summary>
        /// Enum OnThisDay for value: on_this_day
        /// </summary>
        OnThisDay = 1
    }

    /// <summary>
    /// Converts <see cref="MemoryType"/> to and from the JSON value
    /// </summary>
    public static class MemoryTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="MemoryType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static MemoryType FromString(string value)
        {
            if (value.Equals("on_this_day"))
                return MemoryType.OnThisDay;

            throw new NotImplementedException($"Could not convert value to type MemoryType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="MemoryType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static MemoryType? FromStringOrDefault(string value)
        {
            if (value.Equals("on_this_day"))
                return MemoryType.OnThisDay;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="MemoryType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(MemoryType value)
        {
            if (value == MemoryType.OnThisDay)
                return "on_this_day";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MemoryType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class MemoryTypeJsonConverter : JsonConverter<MemoryType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override MemoryType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            MemoryType? result = rawValue == null
                ? null
                : MemoryTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the MemoryType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="memoryType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, MemoryType memoryType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(MemoryTypeValueConverter.ToJsonValue(memoryType).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MemoryType"/>
    /// </summary>
    public class MemoryTypeNullableJsonConverter : JsonConverter<MemoryType?>
    {
        /// <summary>
        /// Returns a MemoryType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override MemoryType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            MemoryType? result = rawValue == null
                ? null
                : MemoryTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the MemoryType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="memoryType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, MemoryType? memoryType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(memoryType.HasValue ? MemoryTypeValueConverter.ToJsonValue(memoryType.Value).ToString() : "null");
        }
    }
}
