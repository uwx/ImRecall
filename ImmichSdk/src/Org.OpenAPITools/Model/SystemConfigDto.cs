// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SystemConfigDto
    /// </summary>
    public partial class SystemConfigDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigDto" /> class.
        /// </summary>
        /// <param name="backup">backup</param>
        /// <param name="ffmpeg">ffmpeg</param>
        /// <param name="image">image</param>
        /// <param name="job">job</param>
        /// <param name="library">library</param>
        /// <param name="logging">logging</param>
        /// <param name="machineLearning">machineLearning</param>
        /// <param name="map">map</param>
        /// <param name="metadata">metadata</param>
        /// <param name="newVersionCheck">newVersionCheck</param>
        /// <param name="nightlyTasks">nightlyTasks</param>
        /// <param name="notifications">notifications</param>
        /// <param name="oauth">oauth</param>
        /// <param name="passwordLogin">passwordLogin</param>
        /// <param name="reverseGeocoding">reverseGeocoding</param>
        /// <param name="server">server</param>
        /// <param name="storageTemplate">storageTemplate</param>
        /// <param name="templates">templates</param>
        /// <param name="theme">theme</param>
        /// <param name="trash">trash</param>
        /// <param name="user">user</param>
        [JsonConstructor]
        public SystemConfigDto(SystemConfigBackupsDto backup, SystemConfigFFmpegDto ffmpeg, SystemConfigImageDto image, SystemConfigJobDto job, SystemConfigLibraryDto library, SystemConfigLoggingDto logging, SystemConfigMachineLearningDto machineLearning, SystemConfigMapDto map, SystemConfigMetadataDto metadata, SystemConfigNewVersionCheckDto newVersionCheck, SystemConfigNightlyTasksDto nightlyTasks, SystemConfigNotificationsDto notifications, SystemConfigOAuthDto oauth, SystemConfigPasswordLoginDto passwordLogin, SystemConfigReverseGeocodingDto reverseGeocoding, SystemConfigServerDto server, SystemConfigStorageTemplateDto storageTemplate, SystemConfigTemplatesDto templates, SystemConfigThemeDto theme, SystemConfigTrashDto trash, SystemConfigUserDto user)
        {
            Backup = backup;
            Ffmpeg = ffmpeg;
            Image = image;
            Job = job;
            Library = library;
            Logging = logging;
            MachineLearning = machineLearning;
            Map = map;
            Metadata = metadata;
            NewVersionCheck = newVersionCheck;
            NightlyTasks = nightlyTasks;
            Notifications = notifications;
            Oauth = oauth;
            PasswordLogin = passwordLogin;
            ReverseGeocoding = reverseGeocoding;
            Server = server;
            StorageTemplate = storageTemplate;
            Templates = templates;
            Theme = theme;
            Trash = trash;
            User = user;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Backup
        /// </summary>
        [JsonPropertyName("backup")]
        public SystemConfigBackupsDto Backup { get; set; }

        /// <summary>
        /// Gets or Sets Ffmpeg
        /// </summary>
        [JsonPropertyName("ffmpeg")]
        public SystemConfigFFmpegDto Ffmpeg { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [JsonPropertyName("image")]
        public SystemConfigImageDto Image { get; set; }

        /// <summary>
        /// Gets or Sets Job
        /// </summary>
        [JsonPropertyName("job")]
        public SystemConfigJobDto Job { get; set; }

        /// <summary>
        /// Gets or Sets Library
        /// </summary>
        [JsonPropertyName("library")]
        public SystemConfigLibraryDto Library { get; set; }

        /// <summary>
        /// Gets or Sets Logging
        /// </summary>
        [JsonPropertyName("logging")]
        public SystemConfigLoggingDto Logging { get; set; }

        /// <summary>
        /// Gets or Sets MachineLearning
        /// </summary>
        [JsonPropertyName("machineLearning")]
        public SystemConfigMachineLearningDto MachineLearning { get; set; }

        /// <summary>
        /// Gets or Sets Map
        /// </summary>
        [JsonPropertyName("map")]
        public SystemConfigMapDto Map { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [JsonPropertyName("metadata")]
        public SystemConfigMetadataDto Metadata { get; set; }

        /// <summary>
        /// Gets or Sets NewVersionCheck
        /// </summary>
        [JsonPropertyName("newVersionCheck")]
        public SystemConfigNewVersionCheckDto NewVersionCheck { get; set; }

        /// <summary>
        /// Gets or Sets NightlyTasks
        /// </summary>
        [JsonPropertyName("nightlyTasks")]
        public SystemConfigNightlyTasksDto NightlyTasks { get; set; }

        /// <summary>
        /// Gets or Sets Notifications
        /// </summary>
        [JsonPropertyName("notifications")]
        public SystemConfigNotificationsDto Notifications { get; set; }

        /// <summary>
        /// Gets or Sets Oauth
        /// </summary>
        [JsonPropertyName("oauth")]
        public SystemConfigOAuthDto Oauth { get; set; }

        /// <summary>
        /// Gets or Sets PasswordLogin
        /// </summary>
        [JsonPropertyName("passwordLogin")]
        public SystemConfigPasswordLoginDto PasswordLogin { get; set; }

        /// <summary>
        /// Gets or Sets ReverseGeocoding
        /// </summary>
        [JsonPropertyName("reverseGeocoding")]
        public SystemConfigReverseGeocodingDto ReverseGeocoding { get; set; }

        /// <summary>
        /// Gets or Sets Server
        /// </summary>
        [JsonPropertyName("server")]
        public SystemConfigServerDto Server { get; set; }

        /// <summary>
        /// Gets or Sets StorageTemplate
        /// </summary>
        [JsonPropertyName("storageTemplate")]
        public SystemConfigStorageTemplateDto StorageTemplate { get; set; }

        /// <summary>
        /// Gets or Sets Templates
        /// </summary>
        [JsonPropertyName("templates")]
        public SystemConfigTemplatesDto Templates { get; set; }

        /// <summary>
        /// Gets or Sets Theme
        /// </summary>
        [JsonPropertyName("theme")]
        public SystemConfigThemeDto Theme { get; set; }

        /// <summary>
        /// Gets or Sets Trash
        /// </summary>
        [JsonPropertyName("trash")]
        public SystemConfigTrashDto Trash { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [JsonPropertyName("user")]
        public SystemConfigUserDto User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SystemConfigDto {\n");
            sb.Append("  Backup: ").Append(Backup).Append("\n");
            sb.Append("  Ffmpeg: ").Append(Ffmpeg).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Job: ").Append(Job).Append("\n");
            sb.Append("  Library: ").Append(Library).Append("\n");
            sb.Append("  Logging: ").Append(Logging).Append("\n");
            sb.Append("  MachineLearning: ").Append(MachineLearning).Append("\n");
            sb.Append("  Map: ").Append(Map).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  NewVersionCheck: ").Append(NewVersionCheck).Append("\n");
            sb.Append("  NightlyTasks: ").Append(NightlyTasks).Append("\n");
            sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            sb.Append("  Oauth: ").Append(Oauth).Append("\n");
            sb.Append("  PasswordLogin: ").Append(PasswordLogin).Append("\n");
            sb.Append("  ReverseGeocoding: ").Append(ReverseGeocoding).Append("\n");
            sb.Append("  Server: ").Append(Server).Append("\n");
            sb.Append("  StorageTemplate: ").Append(StorageTemplate).Append("\n");
            sb.Append("  Templates: ").Append(Templates).Append("\n");
            sb.Append("  Theme: ").Append(Theme).Append("\n");
            sb.Append("  Trash: ").Append(Trash).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SystemConfigDto" />
    /// </summary>
    public class SystemConfigDtoJsonConverter : JsonConverter<SystemConfigDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="SystemConfigDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SystemConfigDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<SystemConfigBackupsDto?> backup = default;
            Option<SystemConfigFFmpegDto?> ffmpeg = default;
            Option<SystemConfigImageDto?> image = default;
            Option<SystemConfigJobDto?> job = default;
            Option<SystemConfigLibraryDto?> library = default;
            Option<SystemConfigLoggingDto?> logging = default;
            Option<SystemConfigMachineLearningDto?> machineLearning = default;
            Option<SystemConfigMapDto?> map = default;
            Option<SystemConfigMetadataDto?> metadata = default;
            Option<SystemConfigNewVersionCheckDto?> newVersionCheck = default;
            Option<SystemConfigNightlyTasksDto?> nightlyTasks = default;
            Option<SystemConfigNotificationsDto?> notifications = default;
            Option<SystemConfigOAuthDto?> oauth = default;
            Option<SystemConfigPasswordLoginDto?> passwordLogin = default;
            Option<SystemConfigReverseGeocodingDto?> reverseGeocoding = default;
            Option<SystemConfigServerDto?> server = default;
            Option<SystemConfigStorageTemplateDto?> storageTemplate = default;
            Option<SystemConfigTemplatesDto?> templates = default;
            Option<SystemConfigThemeDto?> theme = default;
            Option<SystemConfigTrashDto?> trash = default;
            Option<SystemConfigUserDto?> user = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "backup":
                            backup = new Option<SystemConfigBackupsDto?>(JsonSerializer.Deserialize<SystemConfigBackupsDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "ffmpeg":
                            ffmpeg = new Option<SystemConfigFFmpegDto?>(JsonSerializer.Deserialize<SystemConfigFFmpegDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "image":
                            image = new Option<SystemConfigImageDto?>(JsonSerializer.Deserialize<SystemConfigImageDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "job":
                            job = new Option<SystemConfigJobDto?>(JsonSerializer.Deserialize<SystemConfigJobDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "library":
                            library = new Option<SystemConfigLibraryDto?>(JsonSerializer.Deserialize<SystemConfigLibraryDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "logging":
                            logging = new Option<SystemConfigLoggingDto?>(JsonSerializer.Deserialize<SystemConfigLoggingDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "machineLearning":
                            machineLearning = new Option<SystemConfigMachineLearningDto?>(JsonSerializer.Deserialize<SystemConfigMachineLearningDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "map":
                            map = new Option<SystemConfigMapDto?>(JsonSerializer.Deserialize<SystemConfigMapDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "metadata":
                            metadata = new Option<SystemConfigMetadataDto?>(JsonSerializer.Deserialize<SystemConfigMetadataDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "newVersionCheck":
                            newVersionCheck = new Option<SystemConfigNewVersionCheckDto?>(JsonSerializer.Deserialize<SystemConfigNewVersionCheckDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "nightlyTasks":
                            nightlyTasks = new Option<SystemConfigNightlyTasksDto?>(JsonSerializer.Deserialize<SystemConfigNightlyTasksDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "notifications":
                            notifications = new Option<SystemConfigNotificationsDto?>(JsonSerializer.Deserialize<SystemConfigNotificationsDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "oauth":
                            oauth = new Option<SystemConfigOAuthDto?>(JsonSerializer.Deserialize<SystemConfigOAuthDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "passwordLogin":
                            passwordLogin = new Option<SystemConfigPasswordLoginDto?>(JsonSerializer.Deserialize<SystemConfigPasswordLoginDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "reverseGeocoding":
                            reverseGeocoding = new Option<SystemConfigReverseGeocodingDto?>(JsonSerializer.Deserialize<SystemConfigReverseGeocodingDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "server":
                            server = new Option<SystemConfigServerDto?>(JsonSerializer.Deserialize<SystemConfigServerDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "storageTemplate":
                            storageTemplate = new Option<SystemConfigStorageTemplateDto?>(JsonSerializer.Deserialize<SystemConfigStorageTemplateDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "templates":
                            templates = new Option<SystemConfigTemplatesDto?>(JsonSerializer.Deserialize<SystemConfigTemplatesDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "theme":
                            theme = new Option<SystemConfigThemeDto?>(JsonSerializer.Deserialize<SystemConfigThemeDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "trash":
                            trash = new Option<SystemConfigTrashDto?>(JsonSerializer.Deserialize<SystemConfigTrashDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "user":
                            user = new Option<SystemConfigUserDto?>(JsonSerializer.Deserialize<SystemConfigUserDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!backup.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigDto.", nameof(backup));

            if (!ffmpeg.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigDto.", nameof(ffmpeg));

            if (!image.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigDto.", nameof(image));

            if (!job.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigDto.", nameof(job));

            if (!library.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigDto.", nameof(library));

            if (!logging.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigDto.", nameof(logging));

            if (!machineLearning.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigDto.", nameof(machineLearning));

            if (!map.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigDto.", nameof(map));

            if (!metadata.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigDto.", nameof(metadata));

            if (!newVersionCheck.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigDto.", nameof(newVersionCheck));

            if (!nightlyTasks.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigDto.", nameof(nightlyTasks));

            if (!notifications.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigDto.", nameof(notifications));

            if (!oauth.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigDto.", nameof(oauth));

            if (!passwordLogin.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigDto.", nameof(passwordLogin));

            if (!reverseGeocoding.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigDto.", nameof(reverseGeocoding));

            if (!server.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigDto.", nameof(server));

            if (!storageTemplate.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigDto.", nameof(storageTemplate));

            if (!templates.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigDto.", nameof(templates));

            if (!theme.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigDto.", nameof(theme));

            if (!trash.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigDto.", nameof(trash));

            if (!user.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigDto.", nameof(user));

            if (backup.IsSet && backup.Value == null)
                throw new ArgumentNullException(nameof(backup), "Property is not nullable for class SystemConfigDto.");

            if (ffmpeg.IsSet && ffmpeg.Value == null)
                throw new ArgumentNullException(nameof(ffmpeg), "Property is not nullable for class SystemConfigDto.");

            if (image.IsSet && image.Value == null)
                throw new ArgumentNullException(nameof(image), "Property is not nullable for class SystemConfigDto.");

            if (job.IsSet && job.Value == null)
                throw new ArgumentNullException(nameof(job), "Property is not nullable for class SystemConfigDto.");

            if (library.IsSet && library.Value == null)
                throw new ArgumentNullException(nameof(library), "Property is not nullable for class SystemConfigDto.");

            if (logging.IsSet && logging.Value == null)
                throw new ArgumentNullException(nameof(logging), "Property is not nullable for class SystemConfigDto.");

            if (machineLearning.IsSet && machineLearning.Value == null)
                throw new ArgumentNullException(nameof(machineLearning), "Property is not nullable for class SystemConfigDto.");

            if (map.IsSet && map.Value == null)
                throw new ArgumentNullException(nameof(map), "Property is not nullable for class SystemConfigDto.");

            if (metadata.IsSet && metadata.Value == null)
                throw new ArgumentNullException(nameof(metadata), "Property is not nullable for class SystemConfigDto.");

            if (newVersionCheck.IsSet && newVersionCheck.Value == null)
                throw new ArgumentNullException(nameof(newVersionCheck), "Property is not nullable for class SystemConfigDto.");

            if (nightlyTasks.IsSet && nightlyTasks.Value == null)
                throw new ArgumentNullException(nameof(nightlyTasks), "Property is not nullable for class SystemConfigDto.");

            if (notifications.IsSet && notifications.Value == null)
                throw new ArgumentNullException(nameof(notifications), "Property is not nullable for class SystemConfigDto.");

            if (oauth.IsSet && oauth.Value == null)
                throw new ArgumentNullException(nameof(oauth), "Property is not nullable for class SystemConfigDto.");

            if (passwordLogin.IsSet && passwordLogin.Value == null)
                throw new ArgumentNullException(nameof(passwordLogin), "Property is not nullable for class SystemConfigDto.");

            if (reverseGeocoding.IsSet && reverseGeocoding.Value == null)
                throw new ArgumentNullException(nameof(reverseGeocoding), "Property is not nullable for class SystemConfigDto.");

            if (server.IsSet && server.Value == null)
                throw new ArgumentNullException(nameof(server), "Property is not nullable for class SystemConfigDto.");

            if (storageTemplate.IsSet && storageTemplate.Value == null)
                throw new ArgumentNullException(nameof(storageTemplate), "Property is not nullable for class SystemConfigDto.");

            if (templates.IsSet && templates.Value == null)
                throw new ArgumentNullException(nameof(templates), "Property is not nullable for class SystemConfigDto.");

            if (theme.IsSet && theme.Value == null)
                throw new ArgumentNullException(nameof(theme), "Property is not nullable for class SystemConfigDto.");

            if (trash.IsSet && trash.Value == null)
                throw new ArgumentNullException(nameof(trash), "Property is not nullable for class SystemConfigDto.");

            if (user.IsSet && user.Value == null)
                throw new ArgumentNullException(nameof(user), "Property is not nullable for class SystemConfigDto.");

            return new SystemConfigDto(backup.Value!, ffmpeg.Value!, image.Value!, job.Value!, library.Value!, logging.Value!, machineLearning.Value!, map.Value!, metadata.Value!, newVersionCheck.Value!, nightlyTasks.Value!, notifications.Value!, oauth.Value!, passwordLogin.Value!, reverseGeocoding.Value!, server.Value!, storageTemplate.Value!, templates.Value!, theme.Value!, trash.Value!, user.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="SystemConfigDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="systemConfigDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SystemConfigDto systemConfigDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, systemConfigDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SystemConfigDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="systemConfigDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SystemConfigDto systemConfigDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (systemConfigDto.Backup == null)
                throw new ArgumentNullException(nameof(systemConfigDto.Backup), "Property is required for class SystemConfigDto.");

            if (systemConfigDto.Ffmpeg == null)
                throw new ArgumentNullException(nameof(systemConfigDto.Ffmpeg), "Property is required for class SystemConfigDto.");

            if (systemConfigDto.Image == null)
                throw new ArgumentNullException(nameof(systemConfigDto.Image), "Property is required for class SystemConfigDto.");

            if (systemConfigDto.Job == null)
                throw new ArgumentNullException(nameof(systemConfigDto.Job), "Property is required for class SystemConfigDto.");

            if (systemConfigDto.Library == null)
                throw new ArgumentNullException(nameof(systemConfigDto.Library), "Property is required for class SystemConfigDto.");

            if (systemConfigDto.Logging == null)
                throw new ArgumentNullException(nameof(systemConfigDto.Logging), "Property is required for class SystemConfigDto.");

            if (systemConfigDto.MachineLearning == null)
                throw new ArgumentNullException(nameof(systemConfigDto.MachineLearning), "Property is required for class SystemConfigDto.");

            if (systemConfigDto.Map == null)
                throw new ArgumentNullException(nameof(systemConfigDto.Map), "Property is required for class SystemConfigDto.");

            if (systemConfigDto.Metadata == null)
                throw new ArgumentNullException(nameof(systemConfigDto.Metadata), "Property is required for class SystemConfigDto.");

            if (systemConfigDto.NewVersionCheck == null)
                throw new ArgumentNullException(nameof(systemConfigDto.NewVersionCheck), "Property is required for class SystemConfigDto.");

            if (systemConfigDto.NightlyTasks == null)
                throw new ArgumentNullException(nameof(systemConfigDto.NightlyTasks), "Property is required for class SystemConfigDto.");

            if (systemConfigDto.Notifications == null)
                throw new ArgumentNullException(nameof(systemConfigDto.Notifications), "Property is required for class SystemConfigDto.");

            if (systemConfigDto.Oauth == null)
                throw new ArgumentNullException(nameof(systemConfigDto.Oauth), "Property is required for class SystemConfigDto.");

            if (systemConfigDto.PasswordLogin == null)
                throw new ArgumentNullException(nameof(systemConfigDto.PasswordLogin), "Property is required for class SystemConfigDto.");

            if (systemConfigDto.ReverseGeocoding == null)
                throw new ArgumentNullException(nameof(systemConfigDto.ReverseGeocoding), "Property is required for class SystemConfigDto.");

            if (systemConfigDto.Server == null)
                throw new ArgumentNullException(nameof(systemConfigDto.Server), "Property is required for class SystemConfigDto.");

            if (systemConfigDto.StorageTemplate == null)
                throw new ArgumentNullException(nameof(systemConfigDto.StorageTemplate), "Property is required for class SystemConfigDto.");

            if (systemConfigDto.Templates == null)
                throw new ArgumentNullException(nameof(systemConfigDto.Templates), "Property is required for class SystemConfigDto.");

            if (systemConfigDto.Theme == null)
                throw new ArgumentNullException(nameof(systemConfigDto.Theme), "Property is required for class SystemConfigDto.");

            if (systemConfigDto.Trash == null)
                throw new ArgumentNullException(nameof(systemConfigDto.Trash), "Property is required for class SystemConfigDto.");

            if (systemConfigDto.User == null)
                throw new ArgumentNullException(nameof(systemConfigDto.User), "Property is required for class SystemConfigDto.");

            writer.WritePropertyName("backup");
            JsonSerializer.Serialize(writer, systemConfigDto.Backup, jsonSerializerOptions);
            writer.WritePropertyName("ffmpeg");
            JsonSerializer.Serialize(writer, systemConfigDto.Ffmpeg, jsonSerializerOptions);
            writer.WritePropertyName("image");
            JsonSerializer.Serialize(writer, systemConfigDto.Image, jsonSerializerOptions);
            writer.WritePropertyName("job");
            JsonSerializer.Serialize(writer, systemConfigDto.Job, jsonSerializerOptions);
            writer.WritePropertyName("library");
            JsonSerializer.Serialize(writer, systemConfigDto.Library, jsonSerializerOptions);
            writer.WritePropertyName("logging");
            JsonSerializer.Serialize(writer, systemConfigDto.Logging, jsonSerializerOptions);
            writer.WritePropertyName("machineLearning");
            JsonSerializer.Serialize(writer, systemConfigDto.MachineLearning, jsonSerializerOptions);
            writer.WritePropertyName("map");
            JsonSerializer.Serialize(writer, systemConfigDto.Map, jsonSerializerOptions);
            writer.WritePropertyName("metadata");
            JsonSerializer.Serialize(writer, systemConfigDto.Metadata, jsonSerializerOptions);
            writer.WritePropertyName("newVersionCheck");
            JsonSerializer.Serialize(writer, systemConfigDto.NewVersionCheck, jsonSerializerOptions);
            writer.WritePropertyName("nightlyTasks");
            JsonSerializer.Serialize(writer, systemConfigDto.NightlyTasks, jsonSerializerOptions);
            writer.WritePropertyName("notifications");
            JsonSerializer.Serialize(writer, systemConfigDto.Notifications, jsonSerializerOptions);
            writer.WritePropertyName("oauth");
            JsonSerializer.Serialize(writer, systemConfigDto.Oauth, jsonSerializerOptions);
            writer.WritePropertyName("passwordLogin");
            JsonSerializer.Serialize(writer, systemConfigDto.PasswordLogin, jsonSerializerOptions);
            writer.WritePropertyName("reverseGeocoding");
            JsonSerializer.Serialize(writer, systemConfigDto.ReverseGeocoding, jsonSerializerOptions);
            writer.WritePropertyName("server");
            JsonSerializer.Serialize(writer, systemConfigDto.Server, jsonSerializerOptions);
            writer.WritePropertyName("storageTemplate");
            JsonSerializer.Serialize(writer, systemConfigDto.StorageTemplate, jsonSerializerOptions);
            writer.WritePropertyName("templates");
            JsonSerializer.Serialize(writer, systemConfigDto.Templates, jsonSerializerOptions);
            writer.WritePropertyName("theme");
            JsonSerializer.Serialize(writer, systemConfigDto.Theme, jsonSerializerOptions);
            writer.WritePropertyName("trash");
            JsonSerializer.Serialize(writer, systemConfigDto.Trash, jsonSerializerOptions);
            writer.WritePropertyName("user");
            JsonSerializer.Serialize(writer, systemConfigDto.User, jsonSerializerOptions);
        }
    }
}
