// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines ManualJobName
    /// </summary>
    public enum ManualJobName
    {
        /// <summary>
        /// Enum PersonCleanup for value: person-cleanup
        /// </summary>
        PersonCleanup = 1,

        /// <summary>
        /// Enum TagCleanup for value: tag-cleanup
        /// </summary>
        TagCleanup = 2,

        /// <summary>
        /// Enum UserCleanup for value: user-cleanup
        /// </summary>
        UserCleanup = 3,

        /// <summary>
        /// Enum MemoryCleanup for value: memory-cleanup
        /// </summary>
        MemoryCleanup = 4,

        /// <summary>
        /// Enum MemoryCreate for value: memory-create
        /// </summary>
        MemoryCreate = 5,

        /// <summary>
        /// Enum BackupDatabase for value: backup-database
        /// </summary>
        BackupDatabase = 6
    }

    /// <summary>
    /// Converts <see cref="ManualJobName"/> to and from the JSON value
    /// </summary>
    public static class ManualJobNameValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ManualJobName"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ManualJobName FromString(string value)
        {
            if (value.Equals("person-cleanup"))
                return ManualJobName.PersonCleanup;

            if (value.Equals("tag-cleanup"))
                return ManualJobName.TagCleanup;

            if (value.Equals("user-cleanup"))
                return ManualJobName.UserCleanup;

            if (value.Equals("memory-cleanup"))
                return ManualJobName.MemoryCleanup;

            if (value.Equals("memory-create"))
                return ManualJobName.MemoryCreate;

            if (value.Equals("backup-database"))
                return ManualJobName.BackupDatabase;

            throw new NotImplementedException($"Could not convert value to type ManualJobName: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="ManualJobName"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ManualJobName? FromStringOrDefault(string value)
        {
            if (value.Equals("person-cleanup"))
                return ManualJobName.PersonCleanup;

            if (value.Equals("tag-cleanup"))
                return ManualJobName.TagCleanup;

            if (value.Equals("user-cleanup"))
                return ManualJobName.UserCleanup;

            if (value.Equals("memory-cleanup"))
                return ManualJobName.MemoryCleanup;

            if (value.Equals("memory-create"))
                return ManualJobName.MemoryCreate;

            if (value.Equals("backup-database"))
                return ManualJobName.BackupDatabase;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ManualJobName"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(ManualJobName value)
        {
            if (value == ManualJobName.PersonCleanup)
                return "person-cleanup";

            if (value == ManualJobName.TagCleanup)
                return "tag-cleanup";

            if (value == ManualJobName.UserCleanup)
                return "user-cleanup";

            if (value == ManualJobName.MemoryCleanup)
                return "memory-cleanup";

            if (value == ManualJobName.MemoryCreate)
                return "memory-create";

            if (value == ManualJobName.BackupDatabase)
                return "backup-database";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ManualJobName"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ManualJobNameJsonConverter : JsonConverter<ManualJobName>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ManualJobName Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ManualJobName? result = rawValue == null
                ? null
                : ManualJobNameValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ManualJobName to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="manualJobName"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ManualJobName manualJobName, JsonSerializerOptions options)
        {
            writer.WriteStringValue(ManualJobNameValueConverter.ToJsonValue(manualJobName).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ManualJobName"/>
    /// </summary>
    public class ManualJobNameNullableJsonConverter : JsonConverter<ManualJobName?>
    {
        /// <summary>
        /// Returns a ManualJobName from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ManualJobName? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ManualJobName? result = rawValue == null
                ? null
                : ManualJobNameValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ManualJobName to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="manualJobName"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ManualJobName? manualJobName, JsonSerializerOptions options)
        {
            writer.WriteStringValue(manualJobName.HasValue ? ManualJobNameValueConverter.ToJsonValue(manualJobName.Value).ToString() : "null");
        }
    }
}
