// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ActivityCreateDto
    /// </summary>
    public partial class ActivityCreateDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivityCreateDto" /> class.
        /// </summary>
        /// <param name="albumId">albumId</param>
        /// <param name="type">type</param>
        /// <param name="assetId">assetId</param>
        /// <param name="comment">comment</param>
        [JsonConstructor]
        public ActivityCreateDto(Guid albumId, ReactionType type, Option<Guid?> assetId = default, Option<string?> comment = default)
        {
            AlbumId = albumId;
            Type = type;
            AssetIdOption = assetId;
            CommentOption = comment;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public ReactionType Type { get; set; }

        /// <summary>
        /// Gets or Sets AlbumId
        /// </summary>
        [JsonPropertyName("albumId")]
        public Guid AlbumId { get; set; }

        /// <summary>
        /// Used to track the state of AssetId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> AssetIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets AssetId
        /// </summary>
        [JsonPropertyName("assetId")]
        public Guid? AssetId { get { return this.AssetIdOption; } set { this.AssetIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Comment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CommentOption { get; private set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [JsonPropertyName("comment")]
        public string? Comment { get { return this.CommentOption; } set { this.CommentOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ActivityCreateDto {\n");
            sb.Append("  AlbumId: ").Append(AlbumId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ActivityCreateDto" />
    /// </summary>
    public class ActivityCreateDtoJsonConverter : JsonConverter<ActivityCreateDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="ActivityCreateDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ActivityCreateDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> albumId = default;
            Option<ReactionType?> type = default;
            Option<Guid?> assetId = default;
            Option<string?> comment = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "albumId":
                            albumId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<ReactionType?>(ReactionTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "assetId":
                            assetId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "comment":
                            comment = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!albumId.IsSet)
                throw new ArgumentException("Property is required for class ActivityCreateDto.", nameof(albumId));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class ActivityCreateDto.", nameof(type));

            if (albumId.IsSet && albumId.Value == null)
                throw new ArgumentNullException(nameof(albumId), "Property is not nullable for class ActivityCreateDto.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class ActivityCreateDto.");

            if (assetId.IsSet && assetId.Value == null)
                throw new ArgumentNullException(nameof(assetId), "Property is not nullable for class ActivityCreateDto.");

            if (comment.IsSet && comment.Value == null)
                throw new ArgumentNullException(nameof(comment), "Property is not nullable for class ActivityCreateDto.");

            return new ActivityCreateDto(albumId.Value!.Value!, type.Value!.Value!, assetId, comment);
        }

        /// <summary>
        /// Serializes a <see cref="ActivityCreateDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="activityCreateDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ActivityCreateDto activityCreateDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, activityCreateDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ActivityCreateDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="activityCreateDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ActivityCreateDto activityCreateDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (activityCreateDto.CommentOption.IsSet && activityCreateDto.Comment == null)
                throw new ArgumentNullException(nameof(activityCreateDto.Comment), "Property is required for class ActivityCreateDto.");

            writer.WriteString("albumId", activityCreateDto.AlbumId);

            var typeRawValue = ReactionTypeValueConverter.ToJsonValue(activityCreateDto.Type);
            writer.WriteString("type", typeRawValue);

            if (activityCreateDto.AssetIdOption.IsSet)
                writer.WriteString("assetId", activityCreateDto.AssetIdOption.Value!.Value);

            if (activityCreateDto.CommentOption.IsSet)
                writer.WriteString("comment", activityCreateDto.Comment);
        }
    }
}
