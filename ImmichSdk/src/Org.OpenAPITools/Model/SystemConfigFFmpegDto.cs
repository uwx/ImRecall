// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SystemConfigFFmpegDto
    /// </summary>
    public partial class SystemConfigFFmpegDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigFFmpegDto" /> class.
        /// </summary>
        /// <param name="accel">accel</param>
        /// <param name="accelDecode">accelDecode</param>
        /// <param name="acceptedAudioCodecs">acceptedAudioCodecs</param>
        /// <param name="acceptedContainers">acceptedContainers</param>
        /// <param name="acceptedVideoCodecs">acceptedVideoCodecs</param>
        /// <param name="bframes">bframes</param>
        /// <param name="cqMode">cqMode</param>
        /// <param name="crf">crf</param>
        /// <param name="gopSize">gopSize</param>
        /// <param name="maxBitrate">maxBitrate</param>
        /// <param name="preferredHwDevice">preferredHwDevice</param>
        /// <param name="preset">preset</param>
        /// <param name="refs">refs</param>
        /// <param name="targetAudioCodec">targetAudioCodec</param>
        /// <param name="targetResolution">targetResolution</param>
        /// <param name="targetVideoCodec">targetVideoCodec</param>
        /// <param name="temporalAQ">temporalAQ</param>
        /// <param name="threads">threads</param>
        /// <param name="tonemap">tonemap</param>
        /// <param name="transcode">transcode</param>
        /// <param name="twoPass">twoPass</param>
        [JsonConstructor]
        public SystemConfigFFmpegDto(TranscodeHWAccel accel, bool accelDecode, List<AudioCodec> acceptedAudioCodecs, List<VideoContainer> acceptedContainers, List<VideoCodec> acceptedVideoCodecs, int bframes, CQMode cqMode, int crf, int gopSize, string maxBitrate, string preferredHwDevice, string preset, int refs, AudioCodec targetAudioCodec, string targetResolution, VideoCodec targetVideoCodec, bool temporalAQ, int threads, ToneMapping tonemap, TranscodePolicy transcode, bool twoPass)
        {
            Accel = accel;
            AccelDecode = accelDecode;
            AcceptedAudioCodecs = acceptedAudioCodecs;
            AcceptedContainers = acceptedContainers;
            AcceptedVideoCodecs = acceptedVideoCodecs;
            Bframes = bframes;
            CqMode = cqMode;
            Crf = crf;
            GopSize = gopSize;
            MaxBitrate = maxBitrate;
            PreferredHwDevice = preferredHwDevice;
            Preset = preset;
            Refs = refs;
            TargetAudioCodec = targetAudioCodec;
            TargetResolution = targetResolution;
            TargetVideoCodec = targetVideoCodec;
            TemporalAQ = temporalAQ;
            Threads = threads;
            Tonemap = tonemap;
            Transcode = transcode;
            TwoPass = twoPass;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Accel
        /// </summary>
        [JsonPropertyName("accel")]
        public TranscodeHWAccel Accel { get; set; }

        /// <summary>
        /// Gets or Sets CqMode
        /// </summary>
        [JsonPropertyName("cqMode")]
        public CQMode CqMode { get; set; }

        /// <summary>
        /// Gets or Sets TargetAudioCodec
        /// </summary>
        [JsonPropertyName("targetAudioCodec")]
        public AudioCodec TargetAudioCodec { get; set; }

        /// <summary>
        /// Gets or Sets TargetVideoCodec
        /// </summary>
        [JsonPropertyName("targetVideoCodec")]
        public VideoCodec TargetVideoCodec { get; set; }

        /// <summary>
        /// Gets or Sets Tonemap
        /// </summary>
        [JsonPropertyName("tonemap")]
        public ToneMapping Tonemap { get; set; }

        /// <summary>
        /// Gets or Sets Transcode
        /// </summary>
        [JsonPropertyName("transcode")]
        public TranscodePolicy Transcode { get; set; }

        /// <summary>
        /// Gets or Sets AccelDecode
        /// </summary>
        [JsonPropertyName("accelDecode")]
        public bool AccelDecode { get; set; }

        /// <summary>
        /// Gets or Sets AcceptedAudioCodecs
        /// </summary>
        [JsonPropertyName("acceptedAudioCodecs")]
        public List<AudioCodec> AcceptedAudioCodecs { get; set; }

        /// <summary>
        /// Gets or Sets AcceptedContainers
        /// </summary>
        [JsonPropertyName("acceptedContainers")]
        public List<VideoContainer> AcceptedContainers { get; set; }

        /// <summary>
        /// Gets or Sets AcceptedVideoCodecs
        /// </summary>
        [JsonPropertyName("acceptedVideoCodecs")]
        public List<VideoCodec> AcceptedVideoCodecs { get; set; }

        /// <summary>
        /// Gets or Sets Bframes
        /// </summary>
        [JsonPropertyName("bframes")]
        public int Bframes { get; set; }

        /// <summary>
        /// Gets or Sets Crf
        /// </summary>
        [JsonPropertyName("crf")]
        public int Crf { get; set; }

        /// <summary>
        /// Gets or Sets GopSize
        /// </summary>
        [JsonPropertyName("gopSize")]
        public int GopSize { get; set; }

        /// <summary>
        /// Gets or Sets MaxBitrate
        /// </summary>
        [JsonPropertyName("maxBitrate")]
        public string MaxBitrate { get; set; }

        /// <summary>
        /// Gets or Sets PreferredHwDevice
        /// </summary>
        [JsonPropertyName("preferredHwDevice")]
        public string PreferredHwDevice { get; set; }

        /// <summary>
        /// Gets or Sets Preset
        /// </summary>
        [JsonPropertyName("preset")]
        public string Preset { get; set; }

        /// <summary>
        /// Gets or Sets Refs
        /// </summary>
        [JsonPropertyName("refs")]
        public int Refs { get; set; }

        /// <summary>
        /// Gets or Sets TargetResolution
        /// </summary>
        [JsonPropertyName("targetResolution")]
        public string TargetResolution { get; set; }

        /// <summary>
        /// Gets or Sets TemporalAQ
        /// </summary>
        [JsonPropertyName("temporalAQ")]
        public bool TemporalAQ { get; set; }

        /// <summary>
        /// Gets or Sets Threads
        /// </summary>
        [JsonPropertyName("threads")]
        public int Threads { get; set; }

        /// <summary>
        /// Gets or Sets TwoPass
        /// </summary>
        [JsonPropertyName("twoPass")]
        public bool TwoPass { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SystemConfigFFmpegDto {\n");
            sb.Append("  Accel: ").Append(Accel).Append("\n");
            sb.Append("  AccelDecode: ").Append(AccelDecode).Append("\n");
            sb.Append("  AcceptedAudioCodecs: ").Append(AcceptedAudioCodecs).Append("\n");
            sb.Append("  AcceptedContainers: ").Append(AcceptedContainers).Append("\n");
            sb.Append("  AcceptedVideoCodecs: ").Append(AcceptedVideoCodecs).Append("\n");
            sb.Append("  Bframes: ").Append(Bframes).Append("\n");
            sb.Append("  CqMode: ").Append(CqMode).Append("\n");
            sb.Append("  Crf: ").Append(Crf).Append("\n");
            sb.Append("  GopSize: ").Append(GopSize).Append("\n");
            sb.Append("  MaxBitrate: ").Append(MaxBitrate).Append("\n");
            sb.Append("  PreferredHwDevice: ").Append(PreferredHwDevice).Append("\n");
            sb.Append("  Preset: ").Append(Preset).Append("\n");
            sb.Append("  Refs: ").Append(Refs).Append("\n");
            sb.Append("  TargetAudioCodec: ").Append(TargetAudioCodec).Append("\n");
            sb.Append("  TargetResolution: ").Append(TargetResolution).Append("\n");
            sb.Append("  TargetVideoCodec: ").Append(TargetVideoCodec).Append("\n");
            sb.Append("  TemporalAQ: ").Append(TemporalAQ).Append("\n");
            sb.Append("  Threads: ").Append(Threads).Append("\n");
            sb.Append("  Tonemap: ").Append(Tonemap).Append("\n");
            sb.Append("  Transcode: ").Append(Transcode).Append("\n");
            sb.Append("  TwoPass: ").Append(TwoPass).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Bframes (int) maximum
            if (this.Bframes > (int)16)
            {
                yield return new ValidationResult("Invalid value for Bframes, must be a value less than or equal to 16.", new [] { "Bframes" });
            }

            // Bframes (int) minimum
            if (this.Bframes < (int)-1)
            {
                yield return new ValidationResult("Invalid value for Bframes, must be a value greater than or equal to -1.", new [] { "Bframes" });
            }

            // Crf (int) maximum
            if (this.Crf > (int)51)
            {
                yield return new ValidationResult("Invalid value for Crf, must be a value less than or equal to 51.", new [] { "Crf" });
            }

            // Crf (int) minimum
            if (this.Crf < (int)0)
            {
                yield return new ValidationResult("Invalid value for Crf, must be a value greater than or equal to 0.", new [] { "Crf" });
            }

            // GopSize (int) minimum
            if (this.GopSize < (int)0)
            {
                yield return new ValidationResult("Invalid value for GopSize, must be a value greater than or equal to 0.", new [] { "GopSize" });
            }

            // Refs (int) maximum
            if (this.Refs > (int)6)
            {
                yield return new ValidationResult("Invalid value for Refs, must be a value less than or equal to 6.", new [] { "Refs" });
            }

            // Refs (int) minimum
            if (this.Refs < (int)0)
            {
                yield return new ValidationResult("Invalid value for Refs, must be a value greater than or equal to 0.", new [] { "Refs" });
            }

            // Threads (int) minimum
            if (this.Threads < (int)0)
            {
                yield return new ValidationResult("Invalid value for Threads, must be a value greater than or equal to 0.", new [] { "Threads" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SystemConfigFFmpegDto" />
    /// </summary>
    public class SystemConfigFFmpegDtoJsonConverter : JsonConverter<SystemConfigFFmpegDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="SystemConfigFFmpegDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SystemConfigFFmpegDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<TranscodeHWAccel?> accel = default;
            Option<bool?> accelDecode = default;
            Option<List<AudioCodec>?> acceptedAudioCodecs = default;
            Option<List<VideoContainer>?> acceptedContainers = default;
            Option<List<VideoCodec>?> acceptedVideoCodecs = default;
            Option<int?> bframes = default;
            Option<CQMode?> cqMode = default;
            Option<int?> crf = default;
            Option<int?> gopSize = default;
            Option<string?> maxBitrate = default;
            Option<string?> preferredHwDevice = default;
            Option<string?> preset = default;
            Option<int?> refs = default;
            Option<AudioCodec?> targetAudioCodec = default;
            Option<string?> targetResolution = default;
            Option<VideoCodec?> targetVideoCodec = default;
            Option<bool?> temporalAQ = default;
            Option<int?> threads = default;
            Option<ToneMapping?> tonemap = default;
            Option<TranscodePolicy?> transcode = default;
            Option<bool?> twoPass = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "accel":
                            string? accelRawValue = utf8JsonReader.GetString();
                            if (accelRawValue != null)
                                accel = new Option<TranscodeHWAccel?>(TranscodeHWAccelValueConverter.FromStringOrDefault(accelRawValue));
                            break;
                        case "accelDecode":
                            accelDecode = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "acceptedAudioCodecs":
                            acceptedAudioCodecs = new Option<List<AudioCodec>?>(JsonSerializer.Deserialize<List<AudioCodec>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "acceptedContainers":
                            acceptedContainers = new Option<List<VideoContainer>?>(JsonSerializer.Deserialize<List<VideoContainer>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "acceptedVideoCodecs":
                            acceptedVideoCodecs = new Option<List<VideoCodec>?>(JsonSerializer.Deserialize<List<VideoCodec>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "bframes":
                            bframes = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "cqMode":
                            string? cqModeRawValue = utf8JsonReader.GetString();
                            if (cqModeRawValue != null)
                                cqMode = new Option<CQMode?>(CQModeValueConverter.FromStringOrDefault(cqModeRawValue));
                            break;
                        case "crf":
                            crf = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "gopSize":
                            gopSize = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "maxBitrate":
                            maxBitrate = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "preferredHwDevice":
                            preferredHwDevice = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "preset":
                            preset = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "refs":
                            refs = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "targetAudioCodec":
                            string? targetAudioCodecRawValue = utf8JsonReader.GetString();
                            if (targetAudioCodecRawValue != null)
                                targetAudioCodec = new Option<AudioCodec?>(AudioCodecValueConverter.FromStringOrDefault(targetAudioCodecRawValue));
                            break;
                        case "targetResolution":
                            targetResolution = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "targetVideoCodec":
                            string? targetVideoCodecRawValue = utf8JsonReader.GetString();
                            if (targetVideoCodecRawValue != null)
                                targetVideoCodec = new Option<VideoCodec?>(VideoCodecValueConverter.FromStringOrDefault(targetVideoCodecRawValue));
                            break;
                        case "temporalAQ":
                            temporalAQ = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "threads":
                            threads = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "tonemap":
                            string? tonemapRawValue = utf8JsonReader.GetString();
                            if (tonemapRawValue != null)
                                tonemap = new Option<ToneMapping?>(ToneMappingValueConverter.FromStringOrDefault(tonemapRawValue));
                            break;
                        case "transcode":
                            string? transcodeRawValue = utf8JsonReader.GetString();
                            if (transcodeRawValue != null)
                                transcode = new Option<TranscodePolicy?>(TranscodePolicyValueConverter.FromStringOrDefault(transcodeRawValue));
                            break;
                        case "twoPass":
                            twoPass = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!accel.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigFFmpegDto.", nameof(accel));

            if (!accelDecode.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigFFmpegDto.", nameof(accelDecode));

            if (!acceptedAudioCodecs.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigFFmpegDto.", nameof(acceptedAudioCodecs));

            if (!acceptedContainers.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigFFmpegDto.", nameof(acceptedContainers));

            if (!acceptedVideoCodecs.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigFFmpegDto.", nameof(acceptedVideoCodecs));

            if (!bframes.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigFFmpegDto.", nameof(bframes));

            if (!cqMode.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigFFmpegDto.", nameof(cqMode));

            if (!crf.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigFFmpegDto.", nameof(crf));

            if (!gopSize.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigFFmpegDto.", nameof(gopSize));

            if (!maxBitrate.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigFFmpegDto.", nameof(maxBitrate));

            if (!preferredHwDevice.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigFFmpegDto.", nameof(preferredHwDevice));

            if (!preset.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigFFmpegDto.", nameof(preset));

            if (!refs.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigFFmpegDto.", nameof(refs));

            if (!targetAudioCodec.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigFFmpegDto.", nameof(targetAudioCodec));

            if (!targetResolution.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigFFmpegDto.", nameof(targetResolution));

            if (!targetVideoCodec.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigFFmpegDto.", nameof(targetVideoCodec));

            if (!temporalAQ.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigFFmpegDto.", nameof(temporalAQ));

            if (!threads.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigFFmpegDto.", nameof(threads));

            if (!tonemap.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigFFmpegDto.", nameof(tonemap));

            if (!transcode.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigFFmpegDto.", nameof(transcode));

            if (!twoPass.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigFFmpegDto.", nameof(twoPass));

            if (accel.IsSet && accel.Value == null)
                throw new ArgumentNullException(nameof(accel), "Property is not nullable for class SystemConfigFFmpegDto.");

            if (accelDecode.IsSet && accelDecode.Value == null)
                throw new ArgumentNullException(nameof(accelDecode), "Property is not nullable for class SystemConfigFFmpegDto.");

            if (acceptedAudioCodecs.IsSet && acceptedAudioCodecs.Value == null)
                throw new ArgumentNullException(nameof(acceptedAudioCodecs), "Property is not nullable for class SystemConfigFFmpegDto.");

            if (acceptedContainers.IsSet && acceptedContainers.Value == null)
                throw new ArgumentNullException(nameof(acceptedContainers), "Property is not nullable for class SystemConfigFFmpegDto.");

            if (acceptedVideoCodecs.IsSet && acceptedVideoCodecs.Value == null)
                throw new ArgumentNullException(nameof(acceptedVideoCodecs), "Property is not nullable for class SystemConfigFFmpegDto.");

            if (bframes.IsSet && bframes.Value == null)
                throw new ArgumentNullException(nameof(bframes), "Property is not nullable for class SystemConfigFFmpegDto.");

            if (cqMode.IsSet && cqMode.Value == null)
                throw new ArgumentNullException(nameof(cqMode), "Property is not nullable for class SystemConfigFFmpegDto.");

            if (crf.IsSet && crf.Value == null)
                throw new ArgumentNullException(nameof(crf), "Property is not nullable for class SystemConfigFFmpegDto.");

            if (gopSize.IsSet && gopSize.Value == null)
                throw new ArgumentNullException(nameof(gopSize), "Property is not nullable for class SystemConfigFFmpegDto.");

            if (maxBitrate.IsSet && maxBitrate.Value == null)
                throw new ArgumentNullException(nameof(maxBitrate), "Property is not nullable for class SystemConfigFFmpegDto.");

            if (preferredHwDevice.IsSet && preferredHwDevice.Value == null)
                throw new ArgumentNullException(nameof(preferredHwDevice), "Property is not nullable for class SystemConfigFFmpegDto.");

            if (preset.IsSet && preset.Value == null)
                throw new ArgumentNullException(nameof(preset), "Property is not nullable for class SystemConfigFFmpegDto.");

            if (refs.IsSet && refs.Value == null)
                throw new ArgumentNullException(nameof(refs), "Property is not nullable for class SystemConfigFFmpegDto.");

            if (targetAudioCodec.IsSet && targetAudioCodec.Value == null)
                throw new ArgumentNullException(nameof(targetAudioCodec), "Property is not nullable for class SystemConfigFFmpegDto.");

            if (targetResolution.IsSet && targetResolution.Value == null)
                throw new ArgumentNullException(nameof(targetResolution), "Property is not nullable for class SystemConfigFFmpegDto.");

            if (targetVideoCodec.IsSet && targetVideoCodec.Value == null)
                throw new ArgumentNullException(nameof(targetVideoCodec), "Property is not nullable for class SystemConfigFFmpegDto.");

            if (temporalAQ.IsSet && temporalAQ.Value == null)
                throw new ArgumentNullException(nameof(temporalAQ), "Property is not nullable for class SystemConfigFFmpegDto.");

            if (threads.IsSet && threads.Value == null)
                throw new ArgumentNullException(nameof(threads), "Property is not nullable for class SystemConfigFFmpegDto.");

            if (tonemap.IsSet && tonemap.Value == null)
                throw new ArgumentNullException(nameof(tonemap), "Property is not nullable for class SystemConfigFFmpegDto.");

            if (transcode.IsSet && transcode.Value == null)
                throw new ArgumentNullException(nameof(transcode), "Property is not nullable for class SystemConfigFFmpegDto.");

            if (twoPass.IsSet && twoPass.Value == null)
                throw new ArgumentNullException(nameof(twoPass), "Property is not nullable for class SystemConfigFFmpegDto.");

            return new SystemConfigFFmpegDto(accel.Value!.Value!, accelDecode.Value!.Value!, acceptedAudioCodecs.Value!, acceptedContainers.Value!, acceptedVideoCodecs.Value!, bframes.Value!.Value!, cqMode.Value!.Value!, crf.Value!.Value!, gopSize.Value!.Value!, maxBitrate.Value!, preferredHwDevice.Value!, preset.Value!, refs.Value!.Value!, targetAudioCodec.Value!.Value!, targetResolution.Value!, targetVideoCodec.Value!.Value!, temporalAQ.Value!.Value!, threads.Value!.Value!, tonemap.Value!.Value!, transcode.Value!.Value!, twoPass.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="SystemConfigFFmpegDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="systemConfigFFmpegDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SystemConfigFFmpegDto systemConfigFFmpegDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, systemConfigFFmpegDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SystemConfigFFmpegDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="systemConfigFFmpegDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SystemConfigFFmpegDto systemConfigFFmpegDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (systemConfigFFmpegDto.AcceptedAudioCodecs == null)
                throw new ArgumentNullException(nameof(systemConfigFFmpegDto.AcceptedAudioCodecs), "Property is required for class SystemConfigFFmpegDto.");

            if (systemConfigFFmpegDto.AcceptedContainers == null)
                throw new ArgumentNullException(nameof(systemConfigFFmpegDto.AcceptedContainers), "Property is required for class SystemConfigFFmpegDto.");

            if (systemConfigFFmpegDto.AcceptedVideoCodecs == null)
                throw new ArgumentNullException(nameof(systemConfigFFmpegDto.AcceptedVideoCodecs), "Property is required for class SystemConfigFFmpegDto.");

            if (systemConfigFFmpegDto.MaxBitrate == null)
                throw new ArgumentNullException(nameof(systemConfigFFmpegDto.MaxBitrate), "Property is required for class SystemConfigFFmpegDto.");

            if (systemConfigFFmpegDto.PreferredHwDevice == null)
                throw new ArgumentNullException(nameof(systemConfigFFmpegDto.PreferredHwDevice), "Property is required for class SystemConfigFFmpegDto.");

            if (systemConfigFFmpegDto.Preset == null)
                throw new ArgumentNullException(nameof(systemConfigFFmpegDto.Preset), "Property is required for class SystemConfigFFmpegDto.");

            if (systemConfigFFmpegDto.TargetResolution == null)
                throw new ArgumentNullException(nameof(systemConfigFFmpegDto.TargetResolution), "Property is required for class SystemConfigFFmpegDto.");

            var accelRawValue = TranscodeHWAccelValueConverter.ToJsonValue(systemConfigFFmpegDto.Accel);
            writer.WriteString("accel", accelRawValue);

            writer.WriteBoolean("accelDecode", systemConfigFFmpegDto.AccelDecode);

            writer.WritePropertyName("acceptedAudioCodecs");
            JsonSerializer.Serialize(writer, systemConfigFFmpegDto.AcceptedAudioCodecs, jsonSerializerOptions);
            writer.WritePropertyName("acceptedContainers");
            JsonSerializer.Serialize(writer, systemConfigFFmpegDto.AcceptedContainers, jsonSerializerOptions);
            writer.WritePropertyName("acceptedVideoCodecs");
            JsonSerializer.Serialize(writer, systemConfigFFmpegDto.AcceptedVideoCodecs, jsonSerializerOptions);
            writer.WriteNumber("bframes", systemConfigFFmpegDto.Bframes);

            var cqModeRawValue = CQModeValueConverter.ToJsonValue(systemConfigFFmpegDto.CqMode);
            writer.WriteString("cqMode", cqModeRawValue);

            writer.WriteNumber("crf", systemConfigFFmpegDto.Crf);

            writer.WriteNumber("gopSize", systemConfigFFmpegDto.GopSize);

            writer.WriteString("maxBitrate", systemConfigFFmpegDto.MaxBitrate);

            writer.WriteString("preferredHwDevice", systemConfigFFmpegDto.PreferredHwDevice);

            writer.WriteString("preset", systemConfigFFmpegDto.Preset);

            writer.WriteNumber("refs", systemConfigFFmpegDto.Refs);

            var targetAudioCodecRawValue = AudioCodecValueConverter.ToJsonValue(systemConfigFFmpegDto.TargetAudioCodec);
            writer.WriteString("targetAudioCodec", targetAudioCodecRawValue);

            writer.WriteString("targetResolution", systemConfigFFmpegDto.TargetResolution);

            var targetVideoCodecRawValue = VideoCodecValueConverter.ToJsonValue(systemConfigFFmpegDto.TargetVideoCodec);
            writer.WriteString("targetVideoCodec", targetVideoCodecRawValue);

            writer.WriteBoolean("temporalAQ", systemConfigFFmpegDto.TemporalAQ);

            writer.WriteNumber("threads", systemConfigFFmpegDto.Threads);

            var tonemapRawValue = ToneMappingValueConverter.ToJsonValue(systemConfigFFmpegDto.Tonemap);
            writer.WriteString("tonemap", tonemapRawValue);

            var transcodeRawValue = TranscodePolicyValueConverter.ToJsonValue(systemConfigFFmpegDto.Transcode);
            writer.WriteString("transcode", transcodeRawValue);

            writer.WriteBoolean("twoPass", systemConfigFFmpegDto.TwoPass);
        }
    }
}
