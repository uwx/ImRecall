// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines LogLevel
    /// </summary>
    public enum LogLevel
    {
        /// <summary>
        /// Enum Verbose for value: verbose
        /// </summary>
        Verbose = 1,

        /// <summary>
        /// Enum Debug for value: debug
        /// </summary>
        Debug = 2,

        /// <summary>
        /// Enum Log for value: log
        /// </summary>
        Log = 3,

        /// <summary>
        /// Enum Warn for value: warn
        /// </summary>
        Warn = 4,

        /// <summary>
        /// Enum Error for value: error
        /// </summary>
        Error = 5,

        /// <summary>
        /// Enum Fatal for value: fatal
        /// </summary>
        Fatal = 6
    }

    /// <summary>
    /// Converts <see cref="LogLevel"/> to and from the JSON value
    /// </summary>
    public static class LogLevelValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="LogLevel"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static LogLevel FromString(string value)
        {
            if (value.Equals("verbose"))
                return LogLevel.Verbose;

            if (value.Equals("debug"))
                return LogLevel.Debug;

            if (value.Equals("log"))
                return LogLevel.Log;

            if (value.Equals("warn"))
                return LogLevel.Warn;

            if (value.Equals("error"))
                return LogLevel.Error;

            if (value.Equals("fatal"))
                return LogLevel.Fatal;

            throw new NotImplementedException($"Could not convert value to type LogLevel: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="LogLevel"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static LogLevel? FromStringOrDefault(string value)
        {
            if (value.Equals("verbose"))
                return LogLevel.Verbose;

            if (value.Equals("debug"))
                return LogLevel.Debug;

            if (value.Equals("log"))
                return LogLevel.Log;

            if (value.Equals("warn"))
                return LogLevel.Warn;

            if (value.Equals("error"))
                return LogLevel.Error;

            if (value.Equals("fatal"))
                return LogLevel.Fatal;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="LogLevel"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(LogLevel value)
        {
            if (value == LogLevel.Verbose)
                return "verbose";

            if (value == LogLevel.Debug)
                return "debug";

            if (value == LogLevel.Log)
                return "log";

            if (value == LogLevel.Warn)
                return "warn";

            if (value == LogLevel.Error)
                return "error";

            if (value == LogLevel.Fatal)
                return "fatal";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="LogLevel"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class LogLevelJsonConverter : JsonConverter<LogLevel>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override LogLevel Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            LogLevel? result = rawValue == null
                ? null
                : LogLevelValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the LogLevel to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="logLevel"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, LogLevel logLevel, JsonSerializerOptions options)
        {
            writer.WriteStringValue(LogLevelValueConverter.ToJsonValue(logLevel).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="LogLevel"/>
    /// </summary>
    public class LogLevelNullableJsonConverter : JsonConverter<LogLevel?>
    {
        /// <summary>
        /// Returns a LogLevel from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override LogLevel? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            LogLevel? result = rawValue == null
                ? null
                : LogLevelValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the LogLevel to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="logLevel"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, LogLevel? logLevel, JsonSerializerOptions options)
        {
            writer.WriteStringValue(logLevel.HasValue ? LogLevelValueConverter.ToJsonValue(logLevel.Value).ToString() : "null");
        }
    }
}
