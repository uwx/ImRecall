// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AssetFaceCreateDto
    /// </summary>
    public partial class AssetFaceCreateDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetFaceCreateDto" /> class.
        /// </summary>
        /// <param name="assetId">assetId</param>
        /// <param name="height">height</param>
        /// <param name="imageHeight">imageHeight</param>
        /// <param name="imageWidth">imageWidth</param>
        /// <param name="personId">personId</param>
        /// <param name="width">width</param>
        /// <param name="x">x</param>
        /// <param name="y">y</param>
        [JsonConstructor]
        public AssetFaceCreateDto(Guid assetId, int height, int imageHeight, int imageWidth, Guid personId, int width, int x, int y)
        {
            AssetId = assetId;
            Height = height;
            ImageHeight = imageHeight;
            ImageWidth = imageWidth;
            PersonId = personId;
            Width = width;
            X = x;
            Y = y;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets AssetId
        /// </summary>
        [JsonPropertyName("assetId")]
        public Guid AssetId { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [JsonPropertyName("height")]
        public int Height { get; set; }

        /// <summary>
        /// Gets or Sets ImageHeight
        /// </summary>
        [JsonPropertyName("imageHeight")]
        public int ImageHeight { get; set; }

        /// <summary>
        /// Gets or Sets ImageWidth
        /// </summary>
        [JsonPropertyName("imageWidth")]
        public int ImageWidth { get; set; }

        /// <summary>
        /// Gets or Sets PersonId
        /// </summary>
        [JsonPropertyName("personId")]
        public Guid PersonId { get; set; }

        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [JsonPropertyName("width")]
        public int Width { get; set; }

        /// <summary>
        /// Gets or Sets X
        /// </summary>
        [JsonPropertyName("x")]
        public int X { get; set; }

        /// <summary>
        /// Gets or Sets Y
        /// </summary>
        [JsonPropertyName("y")]
        public int Y { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AssetFaceCreateDto {\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  ImageHeight: ").Append(ImageHeight).Append("\n");
            sb.Append("  ImageWidth: ").Append(ImageWidth).Append("\n");
            sb.Append("  PersonId: ").Append(PersonId).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("  Y: ").Append(Y).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AssetFaceCreateDto" />
    /// </summary>
    public class AssetFaceCreateDtoJsonConverter : JsonConverter<AssetFaceCreateDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="AssetFaceCreateDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AssetFaceCreateDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> assetId = default;
            Option<int?> height = default;
            Option<int?> imageHeight = default;
            Option<int?> imageWidth = default;
            Option<Guid?> personId = default;
            Option<int?> width = default;
            Option<int?> x = default;
            Option<int?> y = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "assetId":
                            assetId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "height":
                            height = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "imageHeight":
                            imageHeight = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "imageWidth":
                            imageWidth = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "personId":
                            personId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "width":
                            width = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "x":
                            x = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "y":
                            y = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!assetId.IsSet)
                throw new ArgumentException("Property is required for class AssetFaceCreateDto.", nameof(assetId));

            if (!height.IsSet)
                throw new ArgumentException("Property is required for class AssetFaceCreateDto.", nameof(height));

            if (!imageHeight.IsSet)
                throw new ArgumentException("Property is required for class AssetFaceCreateDto.", nameof(imageHeight));

            if (!imageWidth.IsSet)
                throw new ArgumentException("Property is required for class AssetFaceCreateDto.", nameof(imageWidth));

            if (!personId.IsSet)
                throw new ArgumentException("Property is required for class AssetFaceCreateDto.", nameof(personId));

            if (!width.IsSet)
                throw new ArgumentException("Property is required for class AssetFaceCreateDto.", nameof(width));

            if (!x.IsSet)
                throw new ArgumentException("Property is required for class AssetFaceCreateDto.", nameof(x));

            if (!y.IsSet)
                throw new ArgumentException("Property is required for class AssetFaceCreateDto.", nameof(y));

            if (assetId.IsSet && assetId.Value == null)
                throw new ArgumentNullException(nameof(assetId), "Property is not nullable for class AssetFaceCreateDto.");

            if (height.IsSet && height.Value == null)
                throw new ArgumentNullException(nameof(height), "Property is not nullable for class AssetFaceCreateDto.");

            if (imageHeight.IsSet && imageHeight.Value == null)
                throw new ArgumentNullException(nameof(imageHeight), "Property is not nullable for class AssetFaceCreateDto.");

            if (imageWidth.IsSet && imageWidth.Value == null)
                throw new ArgumentNullException(nameof(imageWidth), "Property is not nullable for class AssetFaceCreateDto.");

            if (personId.IsSet && personId.Value == null)
                throw new ArgumentNullException(nameof(personId), "Property is not nullable for class AssetFaceCreateDto.");

            if (width.IsSet && width.Value == null)
                throw new ArgumentNullException(nameof(width), "Property is not nullable for class AssetFaceCreateDto.");

            if (x.IsSet && x.Value == null)
                throw new ArgumentNullException(nameof(x), "Property is not nullable for class AssetFaceCreateDto.");

            if (y.IsSet && y.Value == null)
                throw new ArgumentNullException(nameof(y), "Property is not nullable for class AssetFaceCreateDto.");

            return new AssetFaceCreateDto(assetId.Value!.Value!, height.Value!.Value!, imageHeight.Value!.Value!, imageWidth.Value!.Value!, personId.Value!.Value!, width.Value!.Value!, x.Value!.Value!, y.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="AssetFaceCreateDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="assetFaceCreateDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AssetFaceCreateDto assetFaceCreateDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, assetFaceCreateDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AssetFaceCreateDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="assetFaceCreateDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AssetFaceCreateDto assetFaceCreateDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteString("assetId", assetFaceCreateDto.AssetId);

            writer.WriteNumber("height", assetFaceCreateDto.Height);

            writer.WriteNumber("imageHeight", assetFaceCreateDto.ImageHeight);

            writer.WriteNumber("imageWidth", assetFaceCreateDto.ImageWidth);

            writer.WriteString("personId", assetFaceCreateDto.PersonId);

            writer.WriteNumber("width", assetFaceCreateDto.Width);

            writer.WriteNumber("x", assetFaceCreateDto.X);

            writer.WriteNumber("y", assetFaceCreateDto.Y);
        }
    }
}
