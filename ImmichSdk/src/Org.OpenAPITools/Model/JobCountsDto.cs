// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// JobCountsDto
    /// </summary>
    public partial class JobCountsDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobCountsDto" /> class.
        /// </summary>
        /// <param name="active">active</param>
        /// <param name="completed">completed</param>
        /// <param name="delayed">delayed</param>
        /// <param name="failed">failed</param>
        /// <param name="paused">paused</param>
        /// <param name="waiting">waiting</param>
        [JsonConstructor]
        public JobCountsDto(int active, int completed, int delayed, int failed, int paused, int waiting)
        {
            Active = active;
            Completed = completed;
            Delayed = delayed;
            Failed = failed;
            Paused = paused;
            Waiting = waiting;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [JsonPropertyName("active")]
        public int Active { get; set; }

        /// <summary>
        /// Gets or Sets Completed
        /// </summary>
        [JsonPropertyName("completed")]
        public int Completed { get; set; }

        /// <summary>
        /// Gets or Sets Delayed
        /// </summary>
        [JsonPropertyName("delayed")]
        public int Delayed { get; set; }

        /// <summary>
        /// Gets or Sets Failed
        /// </summary>
        [JsonPropertyName("failed")]
        public int Failed { get; set; }

        /// <summary>
        /// Gets or Sets Paused
        /// </summary>
        [JsonPropertyName("paused")]
        public int Paused { get; set; }

        /// <summary>
        /// Gets or Sets Waiting
        /// </summary>
        [JsonPropertyName("waiting")]
        public int Waiting { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JobCountsDto {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Completed: ").Append(Completed).Append("\n");
            sb.Append("  Delayed: ").Append(Delayed).Append("\n");
            sb.Append("  Failed: ").Append(Failed).Append("\n");
            sb.Append("  Paused: ").Append(Paused).Append("\n");
            sb.Append("  Waiting: ").Append(Waiting).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="JobCountsDto" />
    /// </summary>
    public class JobCountsDtoJsonConverter : JsonConverter<JobCountsDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="JobCountsDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override JobCountsDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> active = default;
            Option<int?> completed = default;
            Option<int?> delayed = default;
            Option<int?> failed = default;
            Option<int?> paused = default;
            Option<int?> waiting = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "active":
                            active = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "completed":
                            completed = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "delayed":
                            delayed = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "failed":
                            failed = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "paused":
                            paused = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "waiting":
                            waiting = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!active.IsSet)
                throw new ArgumentException("Property is required for class JobCountsDto.", nameof(active));

            if (!completed.IsSet)
                throw new ArgumentException("Property is required for class JobCountsDto.", nameof(completed));

            if (!delayed.IsSet)
                throw new ArgumentException("Property is required for class JobCountsDto.", nameof(delayed));

            if (!failed.IsSet)
                throw new ArgumentException("Property is required for class JobCountsDto.", nameof(failed));

            if (!paused.IsSet)
                throw new ArgumentException("Property is required for class JobCountsDto.", nameof(paused));

            if (!waiting.IsSet)
                throw new ArgumentException("Property is required for class JobCountsDto.", nameof(waiting));

            if (active.IsSet && active.Value == null)
                throw new ArgumentNullException(nameof(active), "Property is not nullable for class JobCountsDto.");

            if (completed.IsSet && completed.Value == null)
                throw new ArgumentNullException(nameof(completed), "Property is not nullable for class JobCountsDto.");

            if (delayed.IsSet && delayed.Value == null)
                throw new ArgumentNullException(nameof(delayed), "Property is not nullable for class JobCountsDto.");

            if (failed.IsSet && failed.Value == null)
                throw new ArgumentNullException(nameof(failed), "Property is not nullable for class JobCountsDto.");

            if (paused.IsSet && paused.Value == null)
                throw new ArgumentNullException(nameof(paused), "Property is not nullable for class JobCountsDto.");

            if (waiting.IsSet && waiting.Value == null)
                throw new ArgumentNullException(nameof(waiting), "Property is not nullable for class JobCountsDto.");

            return new JobCountsDto(active.Value!.Value!, completed.Value!.Value!, delayed.Value!.Value!, failed.Value!.Value!, paused.Value!.Value!, waiting.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="JobCountsDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="jobCountsDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, JobCountsDto jobCountsDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, jobCountsDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="JobCountsDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="jobCountsDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, JobCountsDto jobCountsDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("active", jobCountsDto.Active);

            writer.WriteNumber("completed", jobCountsDto.Completed);

            writer.WriteNumber("delayed", jobCountsDto.Delayed);

            writer.WriteNumber("failed", jobCountsDto.Failed);

            writer.WriteNumber("paused", jobCountsDto.Paused);

            writer.WriteNumber("waiting", jobCountsDto.Waiting);
        }
    }
}
