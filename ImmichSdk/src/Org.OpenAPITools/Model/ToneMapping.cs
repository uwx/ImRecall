// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines ToneMapping
    /// </summary>
    public enum ToneMapping
    {
        /// <summary>
        /// Enum Hable for value: hable
        /// </summary>
        Hable = 1,

        /// <summary>
        /// Enum Mobius for value: mobius
        /// </summary>
        Mobius = 2,

        /// <summary>
        /// Enum Reinhard for value: reinhard
        /// </summary>
        Reinhard = 3,

        /// <summary>
        /// Enum Disabled for value: disabled
        /// </summary>
        Disabled = 4
    }

    /// <summary>
    /// Converts <see cref="ToneMapping"/> to and from the JSON value
    /// </summary>
    public static class ToneMappingValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ToneMapping"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ToneMapping FromString(string value)
        {
            if (value.Equals("hable"))
                return ToneMapping.Hable;

            if (value.Equals("mobius"))
                return ToneMapping.Mobius;

            if (value.Equals("reinhard"))
                return ToneMapping.Reinhard;

            if (value.Equals("disabled"))
                return ToneMapping.Disabled;

            throw new NotImplementedException($"Could not convert value to type ToneMapping: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="ToneMapping"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ToneMapping? FromStringOrDefault(string value)
        {
            if (value.Equals("hable"))
                return ToneMapping.Hable;

            if (value.Equals("mobius"))
                return ToneMapping.Mobius;

            if (value.Equals("reinhard"))
                return ToneMapping.Reinhard;

            if (value.Equals("disabled"))
                return ToneMapping.Disabled;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ToneMapping"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(ToneMapping value)
        {
            if (value == ToneMapping.Hable)
                return "hable";

            if (value == ToneMapping.Mobius)
                return "mobius";

            if (value == ToneMapping.Reinhard)
                return "reinhard";

            if (value == ToneMapping.Disabled)
                return "disabled";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ToneMapping"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ToneMappingJsonConverter : JsonConverter<ToneMapping>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ToneMapping Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ToneMapping? result = rawValue == null
                ? null
                : ToneMappingValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ToneMapping to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="toneMapping"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ToneMapping toneMapping, JsonSerializerOptions options)
        {
            writer.WriteStringValue(ToneMappingValueConverter.ToJsonValue(toneMapping).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ToneMapping"/>
    /// </summary>
    public class ToneMappingNullableJsonConverter : JsonConverter<ToneMapping?>
    {
        /// <summary>
        /// Returns a ToneMapping from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ToneMapping? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ToneMapping? result = rawValue == null
                ? null
                : ToneMappingValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ToneMapping to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="toneMapping"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ToneMapping? toneMapping, JsonSerializerOptions options)
        {
            writer.WriteStringValue(toneMapping.HasValue ? ToneMappingValueConverter.ToJsonValue(toneMapping.Value).ToString() : "null");
        }
    }
}
