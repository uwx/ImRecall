// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SystemConfigMachineLearningDto
    /// </summary>
    public partial class SystemConfigMachineLearningDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigMachineLearningDto" /> class.
        /// </summary>
        /// <param name="availabilityChecks">availabilityChecks</param>
        /// <param name="clip">clip</param>
        /// <param name="duplicateDetection">duplicateDetection</param>
        /// <param name="enabled">enabled</param>
        /// <param name="facialRecognition">facialRecognition</param>
        /// <param name="urls">urls</param>
        [JsonConstructor]
        public SystemConfigMachineLearningDto(MachineLearningAvailabilityChecksDto availabilityChecks, CLIPConfig clip, DuplicateDetectionConfig duplicateDetection, bool enabled, FacialRecognitionConfig facialRecognition, List<string> urls)
        {
            AvailabilityChecks = availabilityChecks;
            Clip = clip;
            DuplicateDetection = duplicateDetection;
            Enabled = enabled;
            FacialRecognition = facialRecognition;
            Urls = urls;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets AvailabilityChecks
        /// </summary>
        [JsonPropertyName("availabilityChecks")]
        public MachineLearningAvailabilityChecksDto AvailabilityChecks { get; set; }

        /// <summary>
        /// Gets or Sets Clip
        /// </summary>
        [JsonPropertyName("clip")]
        public CLIPConfig Clip { get; set; }

        /// <summary>
        /// Gets or Sets DuplicateDetection
        /// </summary>
        [JsonPropertyName("duplicateDetection")]
        public DuplicateDetectionConfig DuplicateDetection { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [JsonPropertyName("enabled")]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets FacialRecognition
        /// </summary>
        [JsonPropertyName("facialRecognition")]
        public FacialRecognitionConfig FacialRecognition { get; set; }

        /// <summary>
        /// Gets or Sets Urls
        /// </summary>
        [JsonPropertyName("urls")]
        public List<string> Urls { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SystemConfigMachineLearningDto {\n");
            sb.Append("  AvailabilityChecks: ").Append(AvailabilityChecks).Append("\n");
            sb.Append("  Clip: ").Append(Clip).Append("\n");
            sb.Append("  DuplicateDetection: ").Append(DuplicateDetection).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  FacialRecognition: ").Append(FacialRecognition).Append("\n");
            sb.Append("  Urls: ").Append(Urls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SystemConfigMachineLearningDto" />
    /// </summary>
    public class SystemConfigMachineLearningDtoJsonConverter : JsonConverter<SystemConfigMachineLearningDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="SystemConfigMachineLearningDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SystemConfigMachineLearningDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<MachineLearningAvailabilityChecksDto?> availabilityChecks = default;
            Option<CLIPConfig?> clip = default;
            Option<DuplicateDetectionConfig?> duplicateDetection = default;
            Option<bool?> enabled = default;
            Option<FacialRecognitionConfig?> facialRecognition = default;
            Option<List<string>?> urls = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "availabilityChecks":
                            availabilityChecks = new Option<MachineLearningAvailabilityChecksDto?>(JsonSerializer.Deserialize<MachineLearningAvailabilityChecksDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "clip":
                            clip = new Option<CLIPConfig?>(JsonSerializer.Deserialize<CLIPConfig>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "duplicateDetection":
                            duplicateDetection = new Option<DuplicateDetectionConfig?>(JsonSerializer.Deserialize<DuplicateDetectionConfig>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "enabled":
                            enabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "facialRecognition":
                            facialRecognition = new Option<FacialRecognitionConfig?>(JsonSerializer.Deserialize<FacialRecognitionConfig>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "urls":
                            urls = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!availabilityChecks.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigMachineLearningDto.", nameof(availabilityChecks));

            if (!clip.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigMachineLearningDto.", nameof(clip));

            if (!duplicateDetection.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigMachineLearningDto.", nameof(duplicateDetection));

            if (!enabled.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigMachineLearningDto.", nameof(enabled));

            if (!facialRecognition.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigMachineLearningDto.", nameof(facialRecognition));

            if (!urls.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigMachineLearningDto.", nameof(urls));

            if (availabilityChecks.IsSet && availabilityChecks.Value == null)
                throw new ArgumentNullException(nameof(availabilityChecks), "Property is not nullable for class SystemConfigMachineLearningDto.");

            if (clip.IsSet && clip.Value == null)
                throw new ArgumentNullException(nameof(clip), "Property is not nullable for class SystemConfigMachineLearningDto.");

            if (duplicateDetection.IsSet && duplicateDetection.Value == null)
                throw new ArgumentNullException(nameof(duplicateDetection), "Property is not nullable for class SystemConfigMachineLearningDto.");

            if (enabled.IsSet && enabled.Value == null)
                throw new ArgumentNullException(nameof(enabled), "Property is not nullable for class SystemConfigMachineLearningDto.");

            if (facialRecognition.IsSet && facialRecognition.Value == null)
                throw new ArgumentNullException(nameof(facialRecognition), "Property is not nullable for class SystemConfigMachineLearningDto.");

            if (urls.IsSet && urls.Value == null)
                throw new ArgumentNullException(nameof(urls), "Property is not nullable for class SystemConfigMachineLearningDto.");

            return new SystemConfigMachineLearningDto(availabilityChecks.Value!, clip.Value!, duplicateDetection.Value!, enabled.Value!.Value!, facialRecognition.Value!, urls.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="SystemConfigMachineLearningDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="systemConfigMachineLearningDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SystemConfigMachineLearningDto systemConfigMachineLearningDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, systemConfigMachineLearningDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SystemConfigMachineLearningDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="systemConfigMachineLearningDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SystemConfigMachineLearningDto systemConfigMachineLearningDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (systemConfigMachineLearningDto.AvailabilityChecks == null)
                throw new ArgumentNullException(nameof(systemConfigMachineLearningDto.AvailabilityChecks), "Property is required for class SystemConfigMachineLearningDto.");

            if (systemConfigMachineLearningDto.Clip == null)
                throw new ArgumentNullException(nameof(systemConfigMachineLearningDto.Clip), "Property is required for class SystemConfigMachineLearningDto.");

            if (systemConfigMachineLearningDto.DuplicateDetection == null)
                throw new ArgumentNullException(nameof(systemConfigMachineLearningDto.DuplicateDetection), "Property is required for class SystemConfigMachineLearningDto.");

            if (systemConfigMachineLearningDto.FacialRecognition == null)
                throw new ArgumentNullException(nameof(systemConfigMachineLearningDto.FacialRecognition), "Property is required for class SystemConfigMachineLearningDto.");

            if (systemConfigMachineLearningDto.Urls == null)
                throw new ArgumentNullException(nameof(systemConfigMachineLearningDto.Urls), "Property is required for class SystemConfigMachineLearningDto.");

            writer.WritePropertyName("availabilityChecks");
            JsonSerializer.Serialize(writer, systemConfigMachineLearningDto.AvailabilityChecks, jsonSerializerOptions);
            writer.WritePropertyName("clip");
            JsonSerializer.Serialize(writer, systemConfigMachineLearningDto.Clip, jsonSerializerOptions);
            writer.WritePropertyName("duplicateDetection");
            JsonSerializer.Serialize(writer, systemConfigMachineLearningDto.DuplicateDetection, jsonSerializerOptions);
            writer.WriteBoolean("enabled", systemConfigMachineLearningDto.Enabled);

            writer.WritePropertyName("facialRecognition");
            JsonSerializer.Serialize(writer, systemConfigMachineLearningDto.FacialRecognition, jsonSerializerOptions);
            writer.WritePropertyName("urls");
            JsonSerializer.Serialize(writer, systemConfigMachineLearningDto.Urls, jsonSerializerOptions);
        }
    }
}
