// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines VideoContainer
    /// </summary>
    public enum VideoContainer
    {
        /// <summary>
        /// Enum Mov for value: mov
        /// </summary>
        Mov = 1,

        /// <summary>
        /// Enum Mp4 for value: mp4
        /// </summary>
        Mp4 = 2,

        /// <summary>
        /// Enum Ogg for value: ogg
        /// </summary>
        Ogg = 3,

        /// <summary>
        /// Enum Webm for value: webm
        /// </summary>
        Webm = 4
    }

    /// <summary>
    /// Converts <see cref="VideoContainer"/> to and from the JSON value
    /// </summary>
    public static class VideoContainerValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="VideoContainer"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static VideoContainer FromString(string value)
        {
            if (value.Equals("mov"))
                return VideoContainer.Mov;

            if (value.Equals("mp4"))
                return VideoContainer.Mp4;

            if (value.Equals("ogg"))
                return VideoContainer.Ogg;

            if (value.Equals("webm"))
                return VideoContainer.Webm;

            throw new NotImplementedException($"Could not convert value to type VideoContainer: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="VideoContainer"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static VideoContainer? FromStringOrDefault(string value)
        {
            if (value.Equals("mov"))
                return VideoContainer.Mov;

            if (value.Equals("mp4"))
                return VideoContainer.Mp4;

            if (value.Equals("ogg"))
                return VideoContainer.Ogg;

            if (value.Equals("webm"))
                return VideoContainer.Webm;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="VideoContainer"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(VideoContainer value)
        {
            if (value == VideoContainer.Mov)
                return "mov";

            if (value == VideoContainer.Mp4)
                return "mp4";

            if (value == VideoContainer.Ogg)
                return "ogg";

            if (value == VideoContainer.Webm)
                return "webm";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VideoContainer"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class VideoContainerJsonConverter : JsonConverter<VideoContainer>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override VideoContainer Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            VideoContainer? result = rawValue == null
                ? null
                : VideoContainerValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the VideoContainer to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="videoContainer"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, VideoContainer videoContainer, JsonSerializerOptions options)
        {
            writer.WriteStringValue(VideoContainerValueConverter.ToJsonValue(videoContainer).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VideoContainer"/>
    /// </summary>
    public class VideoContainerNullableJsonConverter : JsonConverter<VideoContainer?>
    {
        /// <summary>
        /// Returns a VideoContainer from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override VideoContainer? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            VideoContainer? result = rawValue == null
                ? null
                : VideoContainerValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the VideoContainer to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="videoContainer"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, VideoContainer? videoContainer, JsonSerializerOptions options)
        {
            writer.WriteStringValue(videoContainer.HasValue ? VideoContainerValueConverter.ToJsonValue(videoContainer.Value).ToString() : "null");
        }
    }
}
