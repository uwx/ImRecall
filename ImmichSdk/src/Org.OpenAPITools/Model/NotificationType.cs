// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines NotificationType
    /// </summary>
    public enum NotificationType
    {
        /// <summary>
        /// Enum JobFailed for value: JobFailed
        /// </summary>
        JobFailed = 1,

        /// <summary>
        /// Enum BackupFailed for value: BackupFailed
        /// </summary>
        BackupFailed = 2,

        /// <summary>
        /// Enum SystemMessage for value: SystemMessage
        /// </summary>
        SystemMessage = 3,

        /// <summary>
        /// Enum AlbumInvite for value: AlbumInvite
        /// </summary>
        AlbumInvite = 4,

        /// <summary>
        /// Enum AlbumUpdate for value: AlbumUpdate
        /// </summary>
        AlbumUpdate = 5,

        /// <summary>
        /// Enum Custom for value: Custom
        /// </summary>
        Custom = 6
    }

    /// <summary>
    /// Converts <see cref="NotificationType"/> to and from the JSON value
    /// </summary>
    public static class NotificationTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="NotificationType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static NotificationType FromString(string value)
        {
            if (value.Equals("JobFailed"))
                return NotificationType.JobFailed;

            if (value.Equals("BackupFailed"))
                return NotificationType.BackupFailed;

            if (value.Equals("SystemMessage"))
                return NotificationType.SystemMessage;

            if (value.Equals("AlbumInvite"))
                return NotificationType.AlbumInvite;

            if (value.Equals("AlbumUpdate"))
                return NotificationType.AlbumUpdate;

            if (value.Equals("Custom"))
                return NotificationType.Custom;

            throw new NotImplementedException($"Could not convert value to type NotificationType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="NotificationType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static NotificationType? FromStringOrDefault(string value)
        {
            if (value.Equals("JobFailed"))
                return NotificationType.JobFailed;

            if (value.Equals("BackupFailed"))
                return NotificationType.BackupFailed;

            if (value.Equals("SystemMessage"))
                return NotificationType.SystemMessage;

            if (value.Equals("AlbumInvite"))
                return NotificationType.AlbumInvite;

            if (value.Equals("AlbumUpdate"))
                return NotificationType.AlbumUpdate;

            if (value.Equals("Custom"))
                return NotificationType.Custom;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="NotificationType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(NotificationType value)
        {
            if (value == NotificationType.JobFailed)
                return "JobFailed";

            if (value == NotificationType.BackupFailed)
                return "BackupFailed";

            if (value == NotificationType.SystemMessage)
                return "SystemMessage";

            if (value == NotificationType.AlbumInvite)
                return "AlbumInvite";

            if (value == NotificationType.AlbumUpdate)
                return "AlbumUpdate";

            if (value == NotificationType.Custom)
                return "Custom";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="NotificationType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class NotificationTypeJsonConverter : JsonConverter<NotificationType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override NotificationType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            NotificationType? result = rawValue == null
                ? null
                : NotificationTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the NotificationType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="notificationType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, NotificationType notificationType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(NotificationTypeValueConverter.ToJsonValue(notificationType).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="NotificationType"/>
    /// </summary>
    public class NotificationTypeNullableJsonConverter : JsonConverter<NotificationType?>
    {
        /// <summary>
        /// Returns a NotificationType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override NotificationType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            NotificationType? result = rawValue == null
                ? null
                : NotificationTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the NotificationType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="notificationType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, NotificationType? notificationType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(notificationType.HasValue ? NotificationTypeValueConverter.ToJsonValue(notificationType.Value).ToString() : "null");
        }
    }
}
