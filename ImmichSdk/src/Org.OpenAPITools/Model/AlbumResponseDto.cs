// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AlbumResponseDto
    /// </summary>
    public partial class AlbumResponseDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlbumResponseDto" /> class.
        /// </summary>
        /// <param name="albumName">albumName</param>
        /// <param name="albumUsers">albumUsers</param>
        /// <param name="assetCount">assetCount</param>
        /// <param name="assets">assets</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="description">description</param>
        /// <param name="hasSharedLink">hasSharedLink</param>
        /// <param name="id">id</param>
        /// <param name="isActivityEnabled">isActivityEnabled</param>
        /// <param name="owner">owner</param>
        /// <param name="ownerId">ownerId</param>
        /// <param name="shared">shared</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="albumThumbnailAssetId">albumThumbnailAssetId</param>
        /// <param name="contributorCounts">contributorCounts</param>
        /// <param name="endDate">endDate</param>
        /// <param name="lastModifiedAssetTimestamp">lastModifiedAssetTimestamp</param>
        /// <param name="order">order</param>
        /// <param name="startDate">startDate</param>
        [JsonConstructor]
        public AlbumResponseDto(string albumName, List<AlbumUserResponseDto> albumUsers, int assetCount, List<AssetResponseDto> assets, DateTime createdAt, string description, bool hasSharedLink, string id, bool isActivityEnabled, UserResponseDto owner, string ownerId, bool shared, DateTime updatedAt, string? albumThumbnailAssetId = default, Option<List<ContributorCountResponseDto>?> contributorCounts = default, Option<DateTime?> endDate = default, Option<DateTime?> lastModifiedAssetTimestamp = default, Option<AssetOrder?> order = default, Option<DateTime?> startDate = default)
        {
            AlbumName = albumName;
            AlbumUsers = albumUsers;
            AssetCount = assetCount;
            Assets = assets;
            CreatedAt = createdAt;
            Description = description;
            HasSharedLink = hasSharedLink;
            Id = id;
            IsActivityEnabled = isActivityEnabled;
            Owner = owner;
            OwnerId = ownerId;
            Shared = shared;
            UpdatedAt = updatedAt;
            AlbumThumbnailAssetId = albumThumbnailAssetId;
            ContributorCountsOption = contributorCounts;
            EndDateOption = endDate;
            LastModifiedAssetTimestampOption = lastModifiedAssetTimestamp;
            OrderOption = order;
            StartDateOption = startDate;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Order
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AssetOrder?> OrderOption { get; private set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [JsonPropertyName("order")]
        public AssetOrder? Order { get { return this.OrderOption; } set { this.OrderOption = new(value); } }

        /// <summary>
        /// Gets or Sets AlbumName
        /// </summary>
        [JsonPropertyName("albumName")]
        public string AlbumName { get; set; }

        /// <summary>
        /// Gets or Sets AlbumUsers
        /// </summary>
        [JsonPropertyName("albumUsers")]
        public List<AlbumUserResponseDto> AlbumUsers { get; set; }

        /// <summary>
        /// Gets or Sets AssetCount
        /// </summary>
        [JsonPropertyName("assetCount")]
        public int AssetCount { get; set; }

        /// <summary>
        /// Gets or Sets Assets
        /// </summary>
        [JsonPropertyName("assets")]
        public List<AssetResponseDto> Assets { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets HasSharedLink
        /// </summary>
        [JsonPropertyName("hasSharedLink")]
        public bool HasSharedLink { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IsActivityEnabled
        /// </summary>
        [JsonPropertyName("isActivityEnabled")]
        public bool IsActivityEnabled { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [JsonPropertyName("owner")]
        public UserResponseDto Owner { get; set; }

        /// <summary>
        /// Gets or Sets OwnerId
        /// </summary>
        [JsonPropertyName("ownerId")]
        public string OwnerId { get; set; }

        /// <summary>
        /// Gets or Sets Shared
        /// </summary>
        [JsonPropertyName("shared")]
        public bool Shared { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets AlbumThumbnailAssetId
        /// </summary>
        [JsonPropertyName("albumThumbnailAssetId")]
        public string? AlbumThumbnailAssetId { get; set; }

        /// <summary>
        /// Used to track the state of ContributorCounts
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ContributorCountResponseDto>?> ContributorCountsOption { get; private set; }

        /// <summary>
        /// Gets or Sets ContributorCounts
        /// </summary>
        [JsonPropertyName("contributorCounts")]
        public List<ContributorCountResponseDto>? ContributorCounts { get { return this.ContributorCountsOption; } set { this.ContributorCountsOption = new(value); } }

        /// <summary>
        /// Used to track the state of EndDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> EndDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [JsonPropertyName("endDate")]
        public DateTime? EndDate { get { return this.EndDateOption; } set { this.EndDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedAssetTimestamp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedAssetTimestampOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastModifiedAssetTimestamp
        /// </summary>
        [JsonPropertyName("lastModifiedAssetTimestamp")]
        public DateTime? LastModifiedAssetTimestamp { get { return this.LastModifiedAssetTimestampOption; } set { this.LastModifiedAssetTimestampOption = new(value); } }

        /// <summary>
        /// Used to track the state of StartDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> StartDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [JsonPropertyName("startDate")]
        public DateTime? StartDate { get { return this.StartDateOption; } set { this.StartDateOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlbumResponseDto {\n");
            sb.Append("  AlbumName: ").Append(AlbumName).Append("\n");
            sb.Append("  AlbumUsers: ").Append(AlbumUsers).Append("\n");
            sb.Append("  AssetCount: ").Append(AssetCount).Append("\n");
            sb.Append("  Assets: ").Append(Assets).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  HasSharedLink: ").Append(HasSharedLink).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsActivityEnabled: ").Append(IsActivityEnabled).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  Shared: ").Append(Shared).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  AlbumThumbnailAssetId: ").Append(AlbumThumbnailAssetId).Append("\n");
            sb.Append("  ContributorCounts: ").Append(ContributorCounts).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  LastModifiedAssetTimestamp: ").Append(LastModifiedAssetTimestamp).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AlbumResponseDto" />
    /// </summary>
    public class AlbumResponseDtoJsonConverter : JsonConverter<AlbumResponseDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize EndDate
        /// </summary>
        public static string EndDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize LastModifiedAssetTimestamp
        /// </summary>
        public static string LastModifiedAssetTimestampFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize StartDate
        /// </summary>
        public static string StartDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="AlbumResponseDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AlbumResponseDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> albumName = default;
            Option<List<AlbumUserResponseDto>?> albumUsers = default;
            Option<int?> assetCount = default;
            Option<List<AssetResponseDto>?> assets = default;
            Option<DateTime?> createdAt = default;
            Option<string?> description = default;
            Option<bool?> hasSharedLink = default;
            Option<string?> id = default;
            Option<bool?> isActivityEnabled = default;
            Option<UserResponseDto?> owner = default;
            Option<string?> ownerId = default;
            Option<bool?> shared = default;
            Option<DateTime?> updatedAt = default;
            Option<string?> albumThumbnailAssetId = default;
            Option<List<ContributorCountResponseDto>?> contributorCounts = default;
            Option<DateTime?> endDate = default;
            Option<DateTime?> lastModifiedAssetTimestamp = default;
            Option<AssetOrder?> order = default;
            Option<DateTime?> startDate = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "albumName":
                            albumName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "albumUsers":
                            albumUsers = new Option<List<AlbumUserResponseDto>?>(JsonSerializer.Deserialize<List<AlbumUserResponseDto>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "assetCount":
                            assetCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "assets":
                            assets = new Option<List<AssetResponseDto>?>(JsonSerializer.Deserialize<List<AssetResponseDto>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "hasSharedLink":
                            hasSharedLink = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "isActivityEnabled":
                            isActivityEnabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "owner":
                            owner = new Option<UserResponseDto?>(JsonSerializer.Deserialize<UserResponseDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "ownerId":
                            ownerId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "shared":
                            shared = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "updatedAt":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "albumThumbnailAssetId":
                            albumThumbnailAssetId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "contributorCounts":
                            contributorCounts = new Option<List<ContributorCountResponseDto>?>(JsonSerializer.Deserialize<List<ContributorCountResponseDto>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "endDate":
                            endDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "lastModifiedAssetTimestamp":
                            lastModifiedAssetTimestamp = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "order":
                            string? orderRawValue = utf8JsonReader.GetString();
                            if (orderRawValue != null)
                                order = new Option<AssetOrder?>(AssetOrderValueConverter.FromStringOrDefault(orderRawValue));
                            break;
                        case "startDate":
                            startDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!albumName.IsSet)
                throw new ArgumentException("Property is required for class AlbumResponseDto.", nameof(albumName));

            if (!albumUsers.IsSet)
                throw new ArgumentException("Property is required for class AlbumResponseDto.", nameof(albumUsers));

            if (!assetCount.IsSet)
                throw new ArgumentException("Property is required for class AlbumResponseDto.", nameof(assetCount));

            if (!assets.IsSet)
                throw new ArgumentException("Property is required for class AlbumResponseDto.", nameof(assets));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class AlbumResponseDto.", nameof(createdAt));

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class AlbumResponseDto.", nameof(description));

            if (!hasSharedLink.IsSet)
                throw new ArgumentException("Property is required for class AlbumResponseDto.", nameof(hasSharedLink));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class AlbumResponseDto.", nameof(id));

            if (!isActivityEnabled.IsSet)
                throw new ArgumentException("Property is required for class AlbumResponseDto.", nameof(isActivityEnabled));

            if (!owner.IsSet)
                throw new ArgumentException("Property is required for class AlbumResponseDto.", nameof(owner));

            if (!ownerId.IsSet)
                throw new ArgumentException("Property is required for class AlbumResponseDto.", nameof(ownerId));

            if (!shared.IsSet)
                throw new ArgumentException("Property is required for class AlbumResponseDto.", nameof(shared));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class AlbumResponseDto.", nameof(updatedAt));

            if (!albumThumbnailAssetId.IsSet)
                throw new ArgumentException("Property is required for class AlbumResponseDto.", nameof(albumThumbnailAssetId));

            if (albumName.IsSet && albumName.Value == null)
                throw new ArgumentNullException(nameof(albumName), "Property is not nullable for class AlbumResponseDto.");

            if (albumUsers.IsSet && albumUsers.Value == null)
                throw new ArgumentNullException(nameof(albumUsers), "Property is not nullable for class AlbumResponseDto.");

            if (assetCount.IsSet && assetCount.Value == null)
                throw new ArgumentNullException(nameof(assetCount), "Property is not nullable for class AlbumResponseDto.");

            if (assets.IsSet && assets.Value == null)
                throw new ArgumentNullException(nameof(assets), "Property is not nullable for class AlbumResponseDto.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class AlbumResponseDto.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class AlbumResponseDto.");

            if (hasSharedLink.IsSet && hasSharedLink.Value == null)
                throw new ArgumentNullException(nameof(hasSharedLink), "Property is not nullable for class AlbumResponseDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class AlbumResponseDto.");

            if (isActivityEnabled.IsSet && isActivityEnabled.Value == null)
                throw new ArgumentNullException(nameof(isActivityEnabled), "Property is not nullable for class AlbumResponseDto.");

            if (owner.IsSet && owner.Value == null)
                throw new ArgumentNullException(nameof(owner), "Property is not nullable for class AlbumResponseDto.");

            if (ownerId.IsSet && ownerId.Value == null)
                throw new ArgumentNullException(nameof(ownerId), "Property is not nullable for class AlbumResponseDto.");

            if (shared.IsSet && shared.Value == null)
                throw new ArgumentNullException(nameof(shared), "Property is not nullable for class AlbumResponseDto.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class AlbumResponseDto.");

            if (contributorCounts.IsSet && contributorCounts.Value == null)
                throw new ArgumentNullException(nameof(contributorCounts), "Property is not nullable for class AlbumResponseDto.");

            if (endDate.IsSet && endDate.Value == null)
                throw new ArgumentNullException(nameof(endDate), "Property is not nullable for class AlbumResponseDto.");

            if (lastModifiedAssetTimestamp.IsSet && lastModifiedAssetTimestamp.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedAssetTimestamp), "Property is not nullable for class AlbumResponseDto.");

            if (order.IsSet && order.Value == null)
                throw new ArgumentNullException(nameof(order), "Property is not nullable for class AlbumResponseDto.");

            if (startDate.IsSet && startDate.Value == null)
                throw new ArgumentNullException(nameof(startDate), "Property is not nullable for class AlbumResponseDto.");

            return new AlbumResponseDto(albumName.Value!, albumUsers.Value!, assetCount.Value!.Value!, assets.Value!, createdAt.Value!.Value!, description.Value!, hasSharedLink.Value!.Value!, id.Value!, isActivityEnabled.Value!.Value!, owner.Value!, ownerId.Value!, shared.Value!.Value!, updatedAt.Value!.Value!, albumThumbnailAssetId.Value!, contributorCounts, endDate, lastModifiedAssetTimestamp, order, startDate);
        }

        /// <summary>
        /// Serializes a <see cref="AlbumResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="albumResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AlbumResponseDto albumResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, albumResponseDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AlbumResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="albumResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AlbumResponseDto albumResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (albumResponseDto.AlbumName == null)
                throw new ArgumentNullException(nameof(albumResponseDto.AlbumName), "Property is required for class AlbumResponseDto.");

            if (albumResponseDto.AlbumUsers == null)
                throw new ArgumentNullException(nameof(albumResponseDto.AlbumUsers), "Property is required for class AlbumResponseDto.");

            if (albumResponseDto.Assets == null)
                throw new ArgumentNullException(nameof(albumResponseDto.Assets), "Property is required for class AlbumResponseDto.");

            if (albumResponseDto.Description == null)
                throw new ArgumentNullException(nameof(albumResponseDto.Description), "Property is required for class AlbumResponseDto.");

            if (albumResponseDto.Id == null)
                throw new ArgumentNullException(nameof(albumResponseDto.Id), "Property is required for class AlbumResponseDto.");

            if (albumResponseDto.Owner == null)
                throw new ArgumentNullException(nameof(albumResponseDto.Owner), "Property is required for class AlbumResponseDto.");

            if (albumResponseDto.OwnerId == null)
                throw new ArgumentNullException(nameof(albumResponseDto.OwnerId), "Property is required for class AlbumResponseDto.");

            if (albumResponseDto.ContributorCountsOption.IsSet && albumResponseDto.ContributorCounts == null)
                throw new ArgumentNullException(nameof(albumResponseDto.ContributorCounts), "Property is required for class AlbumResponseDto.");

            writer.WriteString("albumName", albumResponseDto.AlbumName);

            writer.WritePropertyName("albumUsers");
            JsonSerializer.Serialize(writer, albumResponseDto.AlbumUsers, jsonSerializerOptions);
            writer.WriteNumber("assetCount", albumResponseDto.AssetCount);

            writer.WritePropertyName("assets");
            JsonSerializer.Serialize(writer, albumResponseDto.Assets, jsonSerializerOptions);
            writer.WriteString("createdAt", albumResponseDto.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("description", albumResponseDto.Description);

            writer.WriteBoolean("hasSharedLink", albumResponseDto.HasSharedLink);

            writer.WriteString("id", albumResponseDto.Id);

            writer.WriteBoolean("isActivityEnabled", albumResponseDto.IsActivityEnabled);

            writer.WritePropertyName("owner");
            JsonSerializer.Serialize(writer, albumResponseDto.Owner, jsonSerializerOptions);
            writer.WriteString("ownerId", albumResponseDto.OwnerId);

            writer.WriteBoolean("shared", albumResponseDto.Shared);

            writer.WriteString("updatedAt", albumResponseDto.UpdatedAt.ToString(UpdatedAtFormat));

            if (albumResponseDto.AlbumThumbnailAssetId != null)
                writer.WriteString("albumThumbnailAssetId", albumResponseDto.AlbumThumbnailAssetId);
            else
                writer.WriteNull("albumThumbnailAssetId");

            if (albumResponseDto.ContributorCountsOption.IsSet)
            {
                writer.WritePropertyName("contributorCounts");
                JsonSerializer.Serialize(writer, albumResponseDto.ContributorCounts, jsonSerializerOptions);
            }
            if (albumResponseDto.EndDateOption.IsSet)
                writer.WriteString("endDate", albumResponseDto.EndDateOption.Value!.Value.ToString(EndDateFormat));

            if (albumResponseDto.LastModifiedAssetTimestampOption.IsSet)
                writer.WriteString("lastModifiedAssetTimestamp", albumResponseDto.LastModifiedAssetTimestampOption.Value!.Value.ToString(LastModifiedAssetTimestampFormat));

            if (albumResponseDto.OrderOption.IsSet)
            {
                var orderRawValue = AssetOrderValueConverter.ToJsonValue(albumResponseDto.Order!.Value);
                writer.WriteString("order", orderRawValue);
            }
            if (albumResponseDto.StartDateOption.IsSet)
                writer.WriteString("startDate", albumResponseDto.StartDateOption.Value!.Value.ToString(StartDateFormat));
        }
    }
}
