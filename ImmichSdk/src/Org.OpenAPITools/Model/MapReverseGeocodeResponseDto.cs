// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// MapReverseGeocodeResponseDto
    /// </summary>
    public partial class MapReverseGeocodeResponseDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MapReverseGeocodeResponseDto" /> class.
        /// </summary>
        /// <param name="city">city</param>
        /// <param name="country">country</param>
        /// <param name="state">state</param>
        [JsonConstructor]
        public MapReverseGeocodeResponseDto(string? city = default, string? country = default, string? state = default)
        {
            City = city;
            Country = country;
            State = state;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [JsonPropertyName("city")]
        public string? City { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [JsonPropertyName("country")]
        public string? Country { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonPropertyName("state")]
        public string? State { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MapReverseGeocodeResponseDto {\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MapReverseGeocodeResponseDto" />
    /// </summary>
    public class MapReverseGeocodeResponseDtoJsonConverter : JsonConverter<MapReverseGeocodeResponseDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="MapReverseGeocodeResponseDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MapReverseGeocodeResponseDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> city = default;
            Option<string?> country = default;
            Option<string?> state = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "city":
                            city = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "country":
                            country = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "state":
                            state = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!city.IsSet)
                throw new ArgumentException("Property is required for class MapReverseGeocodeResponseDto.", nameof(city));

            if (!country.IsSet)
                throw new ArgumentException("Property is required for class MapReverseGeocodeResponseDto.", nameof(country));

            if (!state.IsSet)
                throw new ArgumentException("Property is required for class MapReverseGeocodeResponseDto.", nameof(state));

            return new MapReverseGeocodeResponseDto(city.Value!, country.Value!, state.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="MapReverseGeocodeResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="mapReverseGeocodeResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MapReverseGeocodeResponseDto mapReverseGeocodeResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, mapReverseGeocodeResponseDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MapReverseGeocodeResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="mapReverseGeocodeResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MapReverseGeocodeResponseDto mapReverseGeocodeResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (mapReverseGeocodeResponseDto.City != null)
                writer.WriteString("city", mapReverseGeocodeResponseDto.City);
            else
                writer.WriteNull("city");

            if (mapReverseGeocodeResponseDto.Country != null)
                writer.WriteString("country", mapReverseGeocodeResponseDto.Country);
            else
                writer.WriteNull("country");

            if (mapReverseGeocodeResponseDto.State != null)
                writer.WriteString("state", mapReverseGeocodeResponseDto.State);
            else
                writer.WriteNull("state");
        }
    }
}
