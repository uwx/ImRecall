// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AuthStatusResponseDto
    /// </summary>
    public partial class AuthStatusResponseDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthStatusResponseDto" /> class.
        /// </summary>
        /// <param name="isElevated">isElevated</param>
        /// <param name="password">password</param>
        /// <param name="pinCode">pinCode</param>
        /// <param name="expiresAt">expiresAt</param>
        /// <param name="pinExpiresAt">pinExpiresAt</param>
        [JsonConstructor]
        public AuthStatusResponseDto(bool isElevated, bool password, bool pinCode, Option<string?> expiresAt = default, Option<string?> pinExpiresAt = default)
        {
            IsElevated = isElevated;
            Password = password;
            PinCode = pinCode;
            ExpiresAtOption = expiresAt;
            PinExpiresAtOption = pinExpiresAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets IsElevated
        /// </summary>
        [JsonPropertyName("isElevated")]
        public bool IsElevated { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [JsonPropertyName("password")]
        public bool Password { get; set; }

        /// <summary>
        /// Gets or Sets PinCode
        /// </summary>
        [JsonPropertyName("pinCode")]
        public bool PinCode { get; set; }

        /// <summary>
        /// Used to track the state of ExpiresAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExpiresAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExpiresAt
        /// </summary>
        [JsonPropertyName("expiresAt")]
        public string? ExpiresAt { get { return this.ExpiresAtOption; } set { this.ExpiresAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of PinExpiresAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PinExpiresAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets PinExpiresAt
        /// </summary>
        [JsonPropertyName("pinExpiresAt")]
        public string? PinExpiresAt { get { return this.PinExpiresAtOption; } set { this.PinExpiresAtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthStatusResponseDto {\n");
            sb.Append("  IsElevated: ").Append(IsElevated).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  PinCode: ").Append(PinCode).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  PinExpiresAt: ").Append(PinExpiresAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AuthStatusResponseDto" />
    /// </summary>
    public class AuthStatusResponseDtoJsonConverter : JsonConverter<AuthStatusResponseDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="AuthStatusResponseDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AuthStatusResponseDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> isElevated = default;
            Option<bool?> password = default;
            Option<bool?> pinCode = default;
            Option<string?> expiresAt = default;
            Option<string?> pinExpiresAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "isElevated":
                            isElevated = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "password":
                            password = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "pinCode":
                            pinCode = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "expiresAt":
                            expiresAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "pinExpiresAt":
                            pinExpiresAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!isElevated.IsSet)
                throw new ArgumentException("Property is required for class AuthStatusResponseDto.", nameof(isElevated));

            if (!password.IsSet)
                throw new ArgumentException("Property is required for class AuthStatusResponseDto.", nameof(password));

            if (!pinCode.IsSet)
                throw new ArgumentException("Property is required for class AuthStatusResponseDto.", nameof(pinCode));

            if (isElevated.IsSet && isElevated.Value == null)
                throw new ArgumentNullException(nameof(isElevated), "Property is not nullable for class AuthStatusResponseDto.");

            if (password.IsSet && password.Value == null)
                throw new ArgumentNullException(nameof(password), "Property is not nullable for class AuthStatusResponseDto.");

            if (pinCode.IsSet && pinCode.Value == null)
                throw new ArgumentNullException(nameof(pinCode), "Property is not nullable for class AuthStatusResponseDto.");

            if (expiresAt.IsSet && expiresAt.Value == null)
                throw new ArgumentNullException(nameof(expiresAt), "Property is not nullable for class AuthStatusResponseDto.");

            if (pinExpiresAt.IsSet && pinExpiresAt.Value == null)
                throw new ArgumentNullException(nameof(pinExpiresAt), "Property is not nullable for class AuthStatusResponseDto.");

            return new AuthStatusResponseDto(isElevated.Value!.Value!, password.Value!.Value!, pinCode.Value!.Value!, expiresAt, pinExpiresAt);
        }

        /// <summary>
        /// Serializes a <see cref="AuthStatusResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="authStatusResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AuthStatusResponseDto authStatusResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, authStatusResponseDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AuthStatusResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="authStatusResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AuthStatusResponseDto authStatusResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (authStatusResponseDto.ExpiresAtOption.IsSet && authStatusResponseDto.ExpiresAt == null)
                throw new ArgumentNullException(nameof(authStatusResponseDto.ExpiresAt), "Property is required for class AuthStatusResponseDto.");

            if (authStatusResponseDto.PinExpiresAtOption.IsSet && authStatusResponseDto.PinExpiresAt == null)
                throw new ArgumentNullException(nameof(authStatusResponseDto.PinExpiresAt), "Property is required for class AuthStatusResponseDto.");

            writer.WriteBoolean("isElevated", authStatusResponseDto.IsElevated);

            writer.WriteBoolean("password", authStatusResponseDto.Password);

            writer.WriteBoolean("pinCode", authStatusResponseDto.PinCode);

            if (authStatusResponseDto.ExpiresAtOption.IsSet)
                writer.WriteString("expiresAt", authStatusResponseDto.ExpiresAt);

            if (authStatusResponseDto.PinExpiresAtOption.IsSet)
                writer.WriteString("pinExpiresAt", authStatusResponseDto.PinExpiresAt);
        }
    }
}
