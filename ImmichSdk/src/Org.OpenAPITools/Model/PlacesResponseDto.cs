// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PlacesResponseDto
    /// </summary>
    public partial class PlacesResponseDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlacesResponseDto" /> class.
        /// </summary>
        /// <param name="latitude">latitude</param>
        /// <param name="longitude">longitude</param>
        /// <param name="name">name</param>
        /// <param name="admin1name">admin1name</param>
        /// <param name="admin2name">admin2name</param>
        [JsonConstructor]
        public PlacesResponseDto(decimal latitude, decimal longitude, string name, Option<string?> admin1name = default, Option<string?> admin2name = default)
        {
            Latitude = latitude;
            Longitude = longitude;
            Name = name;
            Admin1nameOption = admin1name;
            Admin2nameOption = admin2name;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [JsonPropertyName("latitude")]
        public decimal Latitude { get; set; }

        /// <summary>
        /// Gets or Sets Longitude
        /// </summary>
        [JsonPropertyName("longitude")]
        public decimal Longitude { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Used to track the state of Admin1name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> Admin1nameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Admin1name
        /// </summary>
        [JsonPropertyName("admin1name")]
        public string? Admin1name { get { return this.Admin1nameOption; } set { this.Admin1nameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Admin2name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> Admin2nameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Admin2name
        /// </summary>
        [JsonPropertyName("admin2name")]
        public string? Admin2name { get { return this.Admin2nameOption; } set { this.Admin2nameOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlacesResponseDto {\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Admin1name: ").Append(Admin1name).Append("\n");
            sb.Append("  Admin2name: ").Append(Admin2name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PlacesResponseDto" />
    /// </summary>
    public class PlacesResponseDtoJsonConverter : JsonConverter<PlacesResponseDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="PlacesResponseDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PlacesResponseDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<decimal?> latitude = default;
            Option<decimal?> longitude = default;
            Option<string?> name = default;
            Option<string?> admin1name = default;
            Option<string?> admin2name = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "latitude":
                            latitude = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "longitude":
                            longitude = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "admin1name":
                            admin1name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "admin2name":
                            admin2name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!latitude.IsSet)
                throw new ArgumentException("Property is required for class PlacesResponseDto.", nameof(latitude));

            if (!longitude.IsSet)
                throw new ArgumentException("Property is required for class PlacesResponseDto.", nameof(longitude));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class PlacesResponseDto.", nameof(name));

            if (latitude.IsSet && latitude.Value == null)
                throw new ArgumentNullException(nameof(latitude), "Property is not nullable for class PlacesResponseDto.");

            if (longitude.IsSet && longitude.Value == null)
                throw new ArgumentNullException(nameof(longitude), "Property is not nullable for class PlacesResponseDto.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class PlacesResponseDto.");

            if (admin1name.IsSet && admin1name.Value == null)
                throw new ArgumentNullException(nameof(admin1name), "Property is not nullable for class PlacesResponseDto.");

            if (admin2name.IsSet && admin2name.Value == null)
                throw new ArgumentNullException(nameof(admin2name), "Property is not nullable for class PlacesResponseDto.");

            return new PlacesResponseDto(latitude.Value!.Value!, longitude.Value!.Value!, name.Value!, admin1name, admin2name);
        }

        /// <summary>
        /// Serializes a <see cref="PlacesResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="placesResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PlacesResponseDto placesResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, placesResponseDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PlacesResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="placesResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PlacesResponseDto placesResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (placesResponseDto.Name == null)
                throw new ArgumentNullException(nameof(placesResponseDto.Name), "Property is required for class PlacesResponseDto.");

            if (placesResponseDto.Admin1nameOption.IsSet && placesResponseDto.Admin1name == null)
                throw new ArgumentNullException(nameof(placesResponseDto.Admin1name), "Property is required for class PlacesResponseDto.");

            if (placesResponseDto.Admin2nameOption.IsSet && placesResponseDto.Admin2name == null)
                throw new ArgumentNullException(nameof(placesResponseDto.Admin2name), "Property is required for class PlacesResponseDto.");

            writer.WriteNumber("latitude", placesResponseDto.Latitude);

            writer.WriteNumber("longitude", placesResponseDto.Longitude);

            writer.WriteString("name", placesResponseDto.Name);

            if (placesResponseDto.Admin1nameOption.IsSet)
                writer.WriteString("admin1name", placesResponseDto.Admin1name);

            if (placesResponseDto.Admin2nameOption.IsSet)
                writer.WriteString("admin2name", placesResponseDto.Admin2name);
        }
    }
}
