// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SessionCreateResponseDto
    /// </summary>
    public partial class SessionCreateResponseDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionCreateResponseDto" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt</param>
        /// <param name="current">current</param>
        /// <param name="deviceOS">deviceOS</param>
        /// <param name="deviceType">deviceType</param>
        /// <param name="id">id</param>
        /// <param name="isPendingSyncReset">isPendingSyncReset</param>
        /// <param name="token">token</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="appVersion">appVersion</param>
        /// <param name="expiresAt">expiresAt</param>
        [JsonConstructor]
        public SessionCreateResponseDto(string createdAt, bool current, string deviceOS, string deviceType, string id, bool isPendingSyncReset, string token, string updatedAt, string? appVersion = default, Option<string?> expiresAt = default)
        {
            CreatedAt = createdAt;
            Current = current;
            DeviceOS = deviceOS;
            DeviceType = deviceType;
            Id = id;
            IsPendingSyncReset = isPendingSyncReset;
            Token = token;
            UpdatedAt = updatedAt;
            AppVersion = appVersion;
            ExpiresAtOption = expiresAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Current
        /// </summary>
        [JsonPropertyName("current")]
        public bool Current { get; set; }

        /// <summary>
        /// Gets or Sets DeviceOS
        /// </summary>
        [JsonPropertyName("deviceOS")]
        public string DeviceOS { get; set; }

        /// <summary>
        /// Gets or Sets DeviceType
        /// </summary>
        [JsonPropertyName("deviceType")]
        public string DeviceType { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IsPendingSyncReset
        /// </summary>
        [JsonPropertyName("isPendingSyncReset")]
        public bool IsPendingSyncReset { get; set; }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [JsonPropertyName("token")]
        public string Token { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets AppVersion
        /// </summary>
        [JsonPropertyName("appVersion")]
        public string? AppVersion { get; set; }

        /// <summary>
        /// Used to track the state of ExpiresAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExpiresAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExpiresAt
        /// </summary>
        [JsonPropertyName("expiresAt")]
        public string? ExpiresAt { get { return this.ExpiresAtOption; } set { this.ExpiresAtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SessionCreateResponseDto {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Current: ").Append(Current).Append("\n");
            sb.Append("  DeviceOS: ").Append(DeviceOS).Append("\n");
            sb.Append("  DeviceType: ").Append(DeviceType).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsPendingSyncReset: ").Append(IsPendingSyncReset).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  AppVersion: ").Append(AppVersion).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SessionCreateResponseDto" />
    /// </summary>
    public class SessionCreateResponseDtoJsonConverter : JsonConverter<SessionCreateResponseDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="SessionCreateResponseDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SessionCreateResponseDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> createdAt = default;
            Option<bool?> current = default;
            Option<string?> deviceOS = default;
            Option<string?> deviceType = default;
            Option<string?> id = default;
            Option<bool?> isPendingSyncReset = default;
            Option<string?> token = default;
            Option<string?> updatedAt = default;
            Option<string?> appVersion = default;
            Option<string?> expiresAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "createdAt":
                            createdAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "current":
                            current = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "deviceOS":
                            deviceOS = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "deviceType":
                            deviceType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "isPendingSyncReset":
                            isPendingSyncReset = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "token":
                            token = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "updatedAt":
                            updatedAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "appVersion":
                            appVersion = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "expiresAt":
                            expiresAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class SessionCreateResponseDto.", nameof(createdAt));

            if (!current.IsSet)
                throw new ArgumentException("Property is required for class SessionCreateResponseDto.", nameof(current));

            if (!deviceOS.IsSet)
                throw new ArgumentException("Property is required for class SessionCreateResponseDto.", nameof(deviceOS));

            if (!deviceType.IsSet)
                throw new ArgumentException("Property is required for class SessionCreateResponseDto.", nameof(deviceType));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class SessionCreateResponseDto.", nameof(id));

            if (!isPendingSyncReset.IsSet)
                throw new ArgumentException("Property is required for class SessionCreateResponseDto.", nameof(isPendingSyncReset));

            if (!token.IsSet)
                throw new ArgumentException("Property is required for class SessionCreateResponseDto.", nameof(token));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class SessionCreateResponseDto.", nameof(updatedAt));

            if (!appVersion.IsSet)
                throw new ArgumentException("Property is required for class SessionCreateResponseDto.", nameof(appVersion));

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class SessionCreateResponseDto.");

            if (current.IsSet && current.Value == null)
                throw new ArgumentNullException(nameof(current), "Property is not nullable for class SessionCreateResponseDto.");

            if (deviceOS.IsSet && deviceOS.Value == null)
                throw new ArgumentNullException(nameof(deviceOS), "Property is not nullable for class SessionCreateResponseDto.");

            if (deviceType.IsSet && deviceType.Value == null)
                throw new ArgumentNullException(nameof(deviceType), "Property is not nullable for class SessionCreateResponseDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class SessionCreateResponseDto.");

            if (isPendingSyncReset.IsSet && isPendingSyncReset.Value == null)
                throw new ArgumentNullException(nameof(isPendingSyncReset), "Property is not nullable for class SessionCreateResponseDto.");

            if (token.IsSet && token.Value == null)
                throw new ArgumentNullException(nameof(token), "Property is not nullable for class SessionCreateResponseDto.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class SessionCreateResponseDto.");

            if (expiresAt.IsSet && expiresAt.Value == null)
                throw new ArgumentNullException(nameof(expiresAt), "Property is not nullable for class SessionCreateResponseDto.");

            return new SessionCreateResponseDto(createdAt.Value!, current.Value!.Value!, deviceOS.Value!, deviceType.Value!, id.Value!, isPendingSyncReset.Value!.Value!, token.Value!, updatedAt.Value!, appVersion.Value!, expiresAt);
        }

        /// <summary>
        /// Serializes a <see cref="SessionCreateResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sessionCreateResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SessionCreateResponseDto sessionCreateResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, sessionCreateResponseDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SessionCreateResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sessionCreateResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SessionCreateResponseDto sessionCreateResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (sessionCreateResponseDto.CreatedAt == null)
                throw new ArgumentNullException(nameof(sessionCreateResponseDto.CreatedAt), "Property is required for class SessionCreateResponseDto.");

            if (sessionCreateResponseDto.DeviceOS == null)
                throw new ArgumentNullException(nameof(sessionCreateResponseDto.DeviceOS), "Property is required for class SessionCreateResponseDto.");

            if (sessionCreateResponseDto.DeviceType == null)
                throw new ArgumentNullException(nameof(sessionCreateResponseDto.DeviceType), "Property is required for class SessionCreateResponseDto.");

            if (sessionCreateResponseDto.Id == null)
                throw new ArgumentNullException(nameof(sessionCreateResponseDto.Id), "Property is required for class SessionCreateResponseDto.");

            if (sessionCreateResponseDto.Token == null)
                throw new ArgumentNullException(nameof(sessionCreateResponseDto.Token), "Property is required for class SessionCreateResponseDto.");

            if (sessionCreateResponseDto.UpdatedAt == null)
                throw new ArgumentNullException(nameof(sessionCreateResponseDto.UpdatedAt), "Property is required for class SessionCreateResponseDto.");

            if (sessionCreateResponseDto.ExpiresAtOption.IsSet && sessionCreateResponseDto.ExpiresAt == null)
                throw new ArgumentNullException(nameof(sessionCreateResponseDto.ExpiresAt), "Property is required for class SessionCreateResponseDto.");

            writer.WriteString("createdAt", sessionCreateResponseDto.CreatedAt);

            writer.WriteBoolean("current", sessionCreateResponseDto.Current);

            writer.WriteString("deviceOS", sessionCreateResponseDto.DeviceOS);

            writer.WriteString("deviceType", sessionCreateResponseDto.DeviceType);

            writer.WriteString("id", sessionCreateResponseDto.Id);

            writer.WriteBoolean("isPendingSyncReset", sessionCreateResponseDto.IsPendingSyncReset);

            writer.WriteString("token", sessionCreateResponseDto.Token);

            writer.WriteString("updatedAt", sessionCreateResponseDto.UpdatedAt);

            if (sessionCreateResponseDto.AppVersion != null)
                writer.WriteString("appVersion", sessionCreateResponseDto.AppVersion);
            else
                writer.WriteNull("appVersion");

            if (sessionCreateResponseDto.ExpiresAtOption.IsSet)
                writer.WriteString("expiresAt", sessionCreateResponseDto.ExpiresAt);
        }
    }
}
