// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ServerStatsResponseDto
    /// </summary>
    public partial class ServerStatsResponseDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerStatsResponseDto" /> class.
        /// </summary>
        /// <param name="usageByUser">usageByUser</param>
        /// <param name="photos">photos (default to 0)</param>
        /// <param name="usage">usage (default to 0)</param>
        /// <param name="usagePhotos">usagePhotos (default to 0)</param>
        /// <param name="usageVideos">usageVideos (default to 0)</param>
        /// <param name="videos">videos (default to 0)</param>
        [JsonConstructor]
        public ServerStatsResponseDto(List<UsageByUserDto> usageByUser, int photos = 0, long usage = 0, long usagePhotos = 0, long usageVideos = 0, int videos = 0)
        {
            UsageByUser = usageByUser;
            Photos = photos;
            Usage = usage;
            UsagePhotos = usagePhotos;
            UsageVideos = usageVideos;
            Videos = videos;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets UsageByUser
        /// </summary>
        /* <example>[{&quot;photos&quot;:1,&quot;videos&quot;:1,&quot;diskUsageRaw&quot;:2,&quot;usagePhotos&quot;:1,&quot;usageVideos&quot;:1}]</example> */
        [JsonPropertyName("usageByUser")]
        public List<UsageByUserDto> UsageByUser { get; set; }

        /// <summary>
        /// Gets or Sets Photos
        /// </summary>
        [JsonPropertyName("photos")]
        public int Photos { get; set; }

        /// <summary>
        /// Gets or Sets Usage
        /// </summary>
        [JsonPropertyName("usage")]
        public long Usage { get; set; }

        /// <summary>
        /// Gets or Sets UsagePhotos
        /// </summary>
        [JsonPropertyName("usagePhotos")]
        public long UsagePhotos { get; set; }

        /// <summary>
        /// Gets or Sets UsageVideos
        /// </summary>
        [JsonPropertyName("usageVideos")]
        public long UsageVideos { get; set; }

        /// <summary>
        /// Gets or Sets Videos
        /// </summary>
        [JsonPropertyName("videos")]
        public int Videos { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServerStatsResponseDto {\n");
            sb.Append("  UsageByUser: ").Append(UsageByUser).Append("\n");
            sb.Append("  Photos: ").Append(Photos).Append("\n");
            sb.Append("  Usage: ").Append(Usage).Append("\n");
            sb.Append("  UsagePhotos: ").Append(UsagePhotos).Append("\n");
            sb.Append("  UsageVideos: ").Append(UsageVideos).Append("\n");
            sb.Append("  Videos: ").Append(Videos).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ServerStatsResponseDto" />
    /// </summary>
    public class ServerStatsResponseDtoJsonConverter : JsonConverter<ServerStatsResponseDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="ServerStatsResponseDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ServerStatsResponseDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<UsageByUserDto>?> usageByUser = default;
            Option<int?> photos = default;
            Option<long?> usage = default;
            Option<long?> usagePhotos = default;
            Option<long?> usageVideos = default;
            Option<int?> videos = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "usageByUser":
                            usageByUser = new Option<List<UsageByUserDto>?>(JsonSerializer.Deserialize<List<UsageByUserDto>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "photos":
                            photos = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "usage":
                            usage = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "usagePhotos":
                            usagePhotos = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "usageVideos":
                            usageVideos = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "videos":
                            videos = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!usageByUser.IsSet)
                throw new ArgumentException("Property is required for class ServerStatsResponseDto.", nameof(usageByUser));

            if (!photos.IsSet)
                throw new ArgumentException("Property is required for class ServerStatsResponseDto.", nameof(photos));

            if (!usage.IsSet)
                throw new ArgumentException("Property is required for class ServerStatsResponseDto.", nameof(usage));

            if (!usagePhotos.IsSet)
                throw new ArgumentException("Property is required for class ServerStatsResponseDto.", nameof(usagePhotos));

            if (!usageVideos.IsSet)
                throw new ArgumentException("Property is required for class ServerStatsResponseDto.", nameof(usageVideos));

            if (!videos.IsSet)
                throw new ArgumentException("Property is required for class ServerStatsResponseDto.", nameof(videos));

            if (usageByUser.IsSet && usageByUser.Value == null)
                throw new ArgumentNullException(nameof(usageByUser), "Property is not nullable for class ServerStatsResponseDto.");

            if (photos.IsSet && photos.Value == null)
                throw new ArgumentNullException(nameof(photos), "Property is not nullable for class ServerStatsResponseDto.");

            if (usage.IsSet && usage.Value == null)
                throw new ArgumentNullException(nameof(usage), "Property is not nullable for class ServerStatsResponseDto.");

            if (usagePhotos.IsSet && usagePhotos.Value == null)
                throw new ArgumentNullException(nameof(usagePhotos), "Property is not nullable for class ServerStatsResponseDto.");

            if (usageVideos.IsSet && usageVideos.Value == null)
                throw new ArgumentNullException(nameof(usageVideos), "Property is not nullable for class ServerStatsResponseDto.");

            if (videos.IsSet && videos.Value == null)
                throw new ArgumentNullException(nameof(videos), "Property is not nullable for class ServerStatsResponseDto.");

            return new ServerStatsResponseDto(usageByUser.Value!, photos.Value!.Value!, usage.Value!.Value!, usagePhotos.Value!.Value!, usageVideos.Value!.Value!, videos.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ServerStatsResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="serverStatsResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ServerStatsResponseDto serverStatsResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, serverStatsResponseDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ServerStatsResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="serverStatsResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ServerStatsResponseDto serverStatsResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (serverStatsResponseDto.UsageByUser == null)
                throw new ArgumentNullException(nameof(serverStatsResponseDto.UsageByUser), "Property is required for class ServerStatsResponseDto.");

            writer.WritePropertyName("usageByUser");
            JsonSerializer.Serialize(writer, serverStatsResponseDto.UsageByUser, jsonSerializerOptions);
            writer.WriteNumber("photos", serverStatsResponseDto.Photos);

            writer.WriteNumber("usage", serverStatsResponseDto.Usage);

            writer.WriteNumber("usagePhotos", serverStatsResponseDto.UsagePhotos);

            writer.WriteNumber("usageVideos", serverStatsResponseDto.UsageVideos);

            writer.WriteNumber("videos", serverStatsResponseDto.Videos);
        }
    }
}
