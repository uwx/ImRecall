// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SystemConfigImageDto
    /// </summary>
    public partial class SystemConfigImageDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigImageDto" /> class.
        /// </summary>
        /// <param name="colorspace">colorspace</param>
        /// <param name="extractEmbedded">extractEmbedded</param>
        /// <param name="fullsize">fullsize</param>
        /// <param name="preview">preview</param>
        /// <param name="thumbnail">thumbnail</param>
        [JsonConstructor]
        public SystemConfigImageDto(Colorspace colorspace, bool extractEmbedded, SystemConfigGeneratedFullsizeImageDto fullsize, SystemConfigGeneratedImageDto preview, SystemConfigGeneratedImageDto thumbnail)
        {
            Colorspace = colorspace;
            ExtractEmbedded = extractEmbedded;
            Fullsize = fullsize;
            Preview = preview;
            Thumbnail = thumbnail;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Colorspace
        /// </summary>
        [JsonPropertyName("colorspace")]
        public Colorspace Colorspace { get; set; }

        /// <summary>
        /// Gets or Sets ExtractEmbedded
        /// </summary>
        [JsonPropertyName("extractEmbedded")]
        public bool ExtractEmbedded { get; set; }

        /// <summary>
        /// Gets or Sets Fullsize
        /// </summary>
        [JsonPropertyName("fullsize")]
        public SystemConfigGeneratedFullsizeImageDto Fullsize { get; set; }

        /// <summary>
        /// Gets or Sets Preview
        /// </summary>
        [JsonPropertyName("preview")]
        public SystemConfigGeneratedImageDto Preview { get; set; }

        /// <summary>
        /// Gets or Sets Thumbnail
        /// </summary>
        [JsonPropertyName("thumbnail")]
        public SystemConfigGeneratedImageDto Thumbnail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SystemConfigImageDto {\n");
            sb.Append("  Colorspace: ").Append(Colorspace).Append("\n");
            sb.Append("  ExtractEmbedded: ").Append(ExtractEmbedded).Append("\n");
            sb.Append("  Fullsize: ").Append(Fullsize).Append("\n");
            sb.Append("  Preview: ").Append(Preview).Append("\n");
            sb.Append("  Thumbnail: ").Append(Thumbnail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SystemConfigImageDto" />
    /// </summary>
    public class SystemConfigImageDtoJsonConverter : JsonConverter<SystemConfigImageDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="SystemConfigImageDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SystemConfigImageDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Colorspace?> colorspace = default;
            Option<bool?> extractEmbedded = default;
            Option<SystemConfigGeneratedFullsizeImageDto?> fullsize = default;
            Option<SystemConfigGeneratedImageDto?> preview = default;
            Option<SystemConfigGeneratedImageDto?> thumbnail = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "colorspace":
                            string? colorspaceRawValue = utf8JsonReader.GetString();
                            if (colorspaceRawValue != null)
                                colorspace = new Option<Colorspace?>(ColorspaceValueConverter.FromStringOrDefault(colorspaceRawValue));
                            break;
                        case "extractEmbedded":
                            extractEmbedded = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "fullsize":
                            fullsize = new Option<SystemConfigGeneratedFullsizeImageDto?>(JsonSerializer.Deserialize<SystemConfigGeneratedFullsizeImageDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "preview":
                            preview = new Option<SystemConfigGeneratedImageDto?>(JsonSerializer.Deserialize<SystemConfigGeneratedImageDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "thumbnail":
                            thumbnail = new Option<SystemConfigGeneratedImageDto?>(JsonSerializer.Deserialize<SystemConfigGeneratedImageDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!colorspace.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigImageDto.", nameof(colorspace));

            if (!extractEmbedded.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigImageDto.", nameof(extractEmbedded));

            if (!fullsize.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigImageDto.", nameof(fullsize));

            if (!preview.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigImageDto.", nameof(preview));

            if (!thumbnail.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigImageDto.", nameof(thumbnail));

            if (colorspace.IsSet && colorspace.Value == null)
                throw new ArgumentNullException(nameof(colorspace), "Property is not nullable for class SystemConfigImageDto.");

            if (extractEmbedded.IsSet && extractEmbedded.Value == null)
                throw new ArgumentNullException(nameof(extractEmbedded), "Property is not nullable for class SystemConfigImageDto.");

            if (fullsize.IsSet && fullsize.Value == null)
                throw new ArgumentNullException(nameof(fullsize), "Property is not nullable for class SystemConfigImageDto.");

            if (preview.IsSet && preview.Value == null)
                throw new ArgumentNullException(nameof(preview), "Property is not nullable for class SystemConfigImageDto.");

            if (thumbnail.IsSet && thumbnail.Value == null)
                throw new ArgumentNullException(nameof(thumbnail), "Property is not nullable for class SystemConfigImageDto.");

            return new SystemConfigImageDto(colorspace.Value!.Value!, extractEmbedded.Value!.Value!, fullsize.Value!, preview.Value!, thumbnail.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="SystemConfigImageDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="systemConfigImageDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SystemConfigImageDto systemConfigImageDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, systemConfigImageDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SystemConfigImageDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="systemConfigImageDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SystemConfigImageDto systemConfigImageDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (systemConfigImageDto.Fullsize == null)
                throw new ArgumentNullException(nameof(systemConfigImageDto.Fullsize), "Property is required for class SystemConfigImageDto.");

            if (systemConfigImageDto.Preview == null)
                throw new ArgumentNullException(nameof(systemConfigImageDto.Preview), "Property is required for class SystemConfigImageDto.");

            if (systemConfigImageDto.Thumbnail == null)
                throw new ArgumentNullException(nameof(systemConfigImageDto.Thumbnail), "Property is required for class SystemConfigImageDto.");

            var colorspaceRawValue = ColorspaceValueConverter.ToJsonValue(systemConfigImageDto.Colorspace);
            writer.WriteString("colorspace", colorspaceRawValue);

            writer.WriteBoolean("extractEmbedded", systemConfigImageDto.ExtractEmbedded);

            writer.WritePropertyName("fullsize");
            JsonSerializer.Serialize(writer, systemConfigImageDto.Fullsize, jsonSerializerOptions);
            writer.WritePropertyName("preview");
            JsonSerializer.Serialize(writer, systemConfigImageDto.Preview, jsonSerializerOptions);
            writer.WritePropertyName("thumbnail");
            JsonSerializer.Serialize(writer, systemConfigImageDto.Thumbnail, jsonSerializerOptions);
        }
    }
}
