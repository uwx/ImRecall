// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines UserStatus
    /// </summary>
    public enum UserStatus
    {
        /// <summary>
        /// Enum Active for value: active
        /// </summary>
        Active = 1,

        /// <summary>
        /// Enum Removing for value: removing
        /// </summary>
        Removing = 2,

        /// <summary>
        /// Enum Deleted for value: deleted
        /// </summary>
        Deleted = 3
    }

    /// <summary>
    /// Converts <see cref="UserStatus"/> to and from the JSON value
    /// </summary>
    public static class UserStatusValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="UserStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static UserStatus FromString(string value)
        {
            if (value.Equals("active"))
                return UserStatus.Active;

            if (value.Equals("removing"))
                return UserStatus.Removing;

            if (value.Equals("deleted"))
                return UserStatus.Deleted;

            throw new NotImplementedException($"Could not convert value to type UserStatus: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="UserStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static UserStatus? FromStringOrDefault(string value)
        {
            if (value.Equals("active"))
                return UserStatus.Active;

            if (value.Equals("removing"))
                return UserStatus.Removing;

            if (value.Equals("deleted"))
                return UserStatus.Deleted;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="UserStatus"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(UserStatus value)
        {
            if (value == UserStatus.Active)
                return "active";

            if (value == UserStatus.Removing)
                return "removing";

            if (value == UserStatus.Deleted)
                return "deleted";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserStatus"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class UserStatusJsonConverter : JsonConverter<UserStatus>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override UserStatus Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            UserStatus? result = rawValue == null
                ? null
                : UserStatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the UserStatus to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userStatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, UserStatus userStatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(UserStatusValueConverter.ToJsonValue(userStatus).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserStatus"/>
    /// </summary>
    public class UserStatusNullableJsonConverter : JsonConverter<UserStatus?>
    {
        /// <summary>
        /// Returns a UserStatus from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override UserStatus? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            UserStatus? result = rawValue == null
                ? null
                : UserStatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the UserStatus to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userStatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, UserStatus? userStatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(userStatus.HasValue ? UserStatusValueConverter.ToJsonValue(userStatus.Value).ToString() : "null");
        }
    }
}
