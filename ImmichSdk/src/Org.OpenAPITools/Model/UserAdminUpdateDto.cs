// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// UserAdminUpdateDto
    /// </summary>
    public partial class UserAdminUpdateDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserAdminUpdateDto" /> class.
        /// </summary>
        /// <param name="avatarColor">avatarColor</param>
        /// <param name="email">email</param>
        /// <param name="isAdmin">isAdmin</param>
        /// <param name="name">name</param>
        /// <param name="password">password</param>
        /// <param name="pinCode">pinCode</param>
        /// <param name="quotaSizeInBytes">quotaSizeInBytes</param>
        /// <param name="shouldChangePassword">shouldChangePassword</param>
        /// <param name="storageLabel">storageLabel</param>
        [JsonConstructor]
        public UserAdminUpdateDto(Option<UserAvatarColor?> avatarColor = default, Option<string?> email = default, Option<bool?> isAdmin = default, Option<string?> name = default, Option<string?> password = default, Option<string?> pinCode = default, Option<long?> quotaSizeInBytes = default, Option<bool?> shouldChangePassword = default, Option<string?> storageLabel = default)
        {
            AvatarColorOption = avatarColor;
            EmailOption = email;
            IsAdminOption = isAdmin;
            NameOption = name;
            PasswordOption = password;
            PinCodeOption = pinCode;
            QuotaSizeInBytesOption = quotaSizeInBytes;
            ShouldChangePasswordOption = shouldChangePassword;
            StorageLabelOption = storageLabel;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AvatarColor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<UserAvatarColor?> AvatarColorOption { get; private set; }

        /// <summary>
        /// Gets or Sets AvatarColor
        /// </summary>
        [JsonPropertyName("avatarColor")]
        public UserAvatarColor? AvatarColor { get { return this.AvatarColorOption; } set { this.AvatarColorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailOption { get; private set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [JsonPropertyName("email")]
        public string? Email { get { return this.EmailOption; } set { this.EmailOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsAdmin
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsAdminOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsAdmin
        /// </summary>
        [JsonPropertyName("isAdmin")]
        public bool? IsAdmin { get { return this.IsAdminOption; } set { this.IsAdminOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Password
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PasswordOption { get; private set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [JsonPropertyName("password")]
        public string? Password { get { return this.PasswordOption; } set { this.PasswordOption = new(value); } }

        /// <summary>
        /// Used to track the state of PinCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PinCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets PinCode
        /// </summary>
        /* <example>123456</example> */
        [JsonPropertyName("pinCode")]
        public string? PinCode { get { return this.PinCodeOption; } set { this.PinCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of QuotaSizeInBytes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> QuotaSizeInBytesOption { get; private set; }

        /// <summary>
        /// Gets or Sets QuotaSizeInBytes
        /// </summary>
        [JsonPropertyName("quotaSizeInBytes")]
        public long? QuotaSizeInBytes { get { return this.QuotaSizeInBytesOption; } set { this.QuotaSizeInBytesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ShouldChangePassword
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ShouldChangePasswordOption { get; private set; }

        /// <summary>
        /// Gets or Sets ShouldChangePassword
        /// </summary>
        [JsonPropertyName("shouldChangePassword")]
        public bool? ShouldChangePassword { get { return this.ShouldChangePasswordOption; } set { this.ShouldChangePasswordOption = new(value); } }

        /// <summary>
        /// Used to track the state of StorageLabel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StorageLabelOption { get; private set; }

        /// <summary>
        /// Gets or Sets StorageLabel
        /// </summary>
        [JsonPropertyName("storageLabel")]
        public string? StorageLabel { get { return this.StorageLabelOption; } set { this.StorageLabelOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserAdminUpdateDto {\n");
            sb.Append("  AvatarColor: ").Append(AvatarColor).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  IsAdmin: ").Append(IsAdmin).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  PinCode: ").Append(PinCode).Append("\n");
            sb.Append("  QuotaSizeInBytes: ").Append(QuotaSizeInBytes).Append("\n");
            sb.Append("  ShouldChangePassword: ").Append(ShouldChangePassword).Append("\n");
            sb.Append("  StorageLabel: ").Append(StorageLabel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // QuotaSizeInBytes (long) minimum
            if (this.QuotaSizeInBytesOption.IsSet && this.QuotaSizeInBytesOption.Value < (long)0)
            {
                yield return new ValidationResult("Invalid value for QuotaSizeInBytes, must be a value greater than or equal to 0.", new [] { "QuotaSizeInBytes" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserAdminUpdateDto" />
    /// </summary>
    public class UserAdminUpdateDtoJsonConverter : JsonConverter<UserAdminUpdateDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="UserAdminUpdateDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UserAdminUpdateDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<UserAvatarColor?> avatarColor = default;
            Option<string?> email = default;
            Option<bool?> isAdmin = default;
            Option<string?> name = default;
            Option<string?> password = default;
            Option<string?> pinCode = default;
            Option<long?> quotaSizeInBytes = default;
            Option<bool?> shouldChangePassword = default;
            Option<string?> storageLabel = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "avatarColor":
                            string? avatarColorRawValue = utf8JsonReader.GetString();
                            if (avatarColorRawValue != null)
                                avatarColor = new Option<UserAvatarColor?>(UserAvatarColorValueConverter.FromStringOrDefault(avatarColorRawValue));
                            break;
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "isAdmin":
                            isAdmin = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "password":
                            password = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "pinCode":
                            pinCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "quotaSizeInBytes":
                            quotaSizeInBytes = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "shouldChangePassword":
                            shouldChangePassword = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "storageLabel":
                            storageLabel = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class UserAdminUpdateDto.");

            if (isAdmin.IsSet && isAdmin.Value == null)
                throw new ArgumentNullException(nameof(isAdmin), "Property is not nullable for class UserAdminUpdateDto.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class UserAdminUpdateDto.");

            if (password.IsSet && password.Value == null)
                throw new ArgumentNullException(nameof(password), "Property is not nullable for class UserAdminUpdateDto.");

            if (shouldChangePassword.IsSet && shouldChangePassword.Value == null)
                throw new ArgumentNullException(nameof(shouldChangePassword), "Property is not nullable for class UserAdminUpdateDto.");

            return new UserAdminUpdateDto(avatarColor, email, isAdmin, name, password, pinCode, quotaSizeInBytes, shouldChangePassword, storageLabel);
        }

        /// <summary>
        /// Serializes a <see cref="UserAdminUpdateDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userAdminUpdateDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UserAdminUpdateDto userAdminUpdateDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, userAdminUpdateDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UserAdminUpdateDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userAdminUpdateDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UserAdminUpdateDto userAdminUpdateDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (userAdminUpdateDto.EmailOption.IsSet && userAdminUpdateDto.Email == null)
                throw new ArgumentNullException(nameof(userAdminUpdateDto.Email), "Property is required for class UserAdminUpdateDto.");

            if (userAdminUpdateDto.NameOption.IsSet && userAdminUpdateDto.Name == null)
                throw new ArgumentNullException(nameof(userAdminUpdateDto.Name), "Property is required for class UserAdminUpdateDto.");

            if (userAdminUpdateDto.PasswordOption.IsSet && userAdminUpdateDto.Password == null)
                throw new ArgumentNullException(nameof(userAdminUpdateDto.Password), "Property is required for class UserAdminUpdateDto.");

            if (userAdminUpdateDto.AvatarColorOption.IsSet)
                if (userAdminUpdateDto.AvatarColorOption!.Value != null)
                {
                    var avatarColorRawValue = UserAvatarColorValueConverter.ToJsonValue(userAdminUpdateDto.AvatarColorOption.Value!.Value);
                    writer.WriteString("avatarColor", avatarColorRawValue);
                }
                else
                    writer.WriteNull("avatarColor");
            if (userAdminUpdateDto.EmailOption.IsSet)
                writer.WriteString("email", userAdminUpdateDto.Email);

            if (userAdminUpdateDto.IsAdminOption.IsSet)
                writer.WriteBoolean("isAdmin", userAdminUpdateDto.IsAdminOption.Value!.Value);

            if (userAdminUpdateDto.NameOption.IsSet)
                writer.WriteString("name", userAdminUpdateDto.Name);

            if (userAdminUpdateDto.PasswordOption.IsSet)
                writer.WriteString("password", userAdminUpdateDto.Password);

            if (userAdminUpdateDto.PinCodeOption.IsSet)
                if (userAdminUpdateDto.PinCodeOption.Value != null)
                    writer.WriteString("pinCode", userAdminUpdateDto.PinCode);
                else
                    writer.WriteNull("pinCode");

            if (userAdminUpdateDto.QuotaSizeInBytesOption.IsSet)
                if (userAdminUpdateDto.QuotaSizeInBytesOption.Value != null)
                    writer.WriteNumber("quotaSizeInBytes", userAdminUpdateDto.QuotaSizeInBytesOption.Value!.Value);
                else
                    writer.WriteNull("quotaSizeInBytes");

            if (userAdminUpdateDto.ShouldChangePasswordOption.IsSet)
                writer.WriteBoolean("shouldChangePassword", userAdminUpdateDto.ShouldChangePasswordOption.Value!.Value);

            if (userAdminUpdateDto.StorageLabelOption.IsSet)
                if (userAdminUpdateDto.StorageLabelOption.Value != null)
                    writer.WriteString("storageLabel", userAdminUpdateDto.StorageLabel);
                else
                    writer.WriteNull("storageLabel");
        }
    }
}
