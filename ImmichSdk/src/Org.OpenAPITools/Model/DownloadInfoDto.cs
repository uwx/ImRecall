// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DownloadInfoDto
    /// </summary>
    public partial class DownloadInfoDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DownloadInfoDto" /> class.
        /// </summary>
        /// <param name="albumId">albumId</param>
        /// <param name="archiveSize">archiveSize</param>
        /// <param name="assetIds">assetIds</param>
        /// <param name="userId">userId</param>
        [JsonConstructor]
        public DownloadInfoDto(Option<Guid?> albumId = default, Option<int?> archiveSize = default, Option<List<Guid>?> assetIds = default, Option<Guid?> userId = default)
        {
            AlbumIdOption = albumId;
            ArchiveSizeOption = archiveSize;
            AssetIdsOption = assetIds;
            UserIdOption = userId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AlbumId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> AlbumIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets AlbumId
        /// </summary>
        [JsonPropertyName("albumId")]
        public Guid? AlbumId { get { return this.AlbumIdOption; } set { this.AlbumIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ArchiveSize
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ArchiveSizeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ArchiveSize
        /// </summary>
        [JsonPropertyName("archiveSize")]
        public int? ArchiveSize { get { return this.ArchiveSizeOption; } set { this.ArchiveSizeOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssetIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Guid>?> AssetIdsOption { get; private set; }

        /// <summary>
        /// Gets or Sets AssetIds
        /// </summary>
        [JsonPropertyName("assetIds")]
        public List<Guid>? AssetIds { get { return this.AssetIdsOption; } set { this.AssetIdsOption = new(value); } }

        /// <summary>
        /// Used to track the state of UserId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> UserIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("userId")]
        public Guid? UserId { get { return this.UserIdOption; } set { this.UserIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DownloadInfoDto {\n");
            sb.Append("  AlbumId: ").Append(AlbumId).Append("\n");
            sb.Append("  ArchiveSize: ").Append(ArchiveSize).Append("\n");
            sb.Append("  AssetIds: ").Append(AssetIds).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ArchiveSize (int) minimum
            if (this.ArchiveSizeOption.IsSet && this.ArchiveSizeOption.Value < (int)1)
            {
                yield return new ValidationResult("Invalid value for ArchiveSize, must be a value greater than or equal to 1.", new [] { "ArchiveSize" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DownloadInfoDto" />
    /// </summary>
    public class DownloadInfoDtoJsonConverter : JsonConverter<DownloadInfoDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="DownloadInfoDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DownloadInfoDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> albumId = default;
            Option<int?> archiveSize = default;
            Option<List<Guid>?> assetIds = default;
            Option<Guid?> userId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "albumId":
                            albumId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "archiveSize":
                            archiveSize = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "assetIds":
                            assetIds = new Option<List<Guid>?>(JsonSerializer.Deserialize<List<Guid>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "userId":
                            userId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (albumId.IsSet && albumId.Value == null)
                throw new ArgumentNullException(nameof(albumId), "Property is not nullable for class DownloadInfoDto.");

            if (archiveSize.IsSet && archiveSize.Value == null)
                throw new ArgumentNullException(nameof(archiveSize), "Property is not nullable for class DownloadInfoDto.");

            if (assetIds.IsSet && assetIds.Value == null)
                throw new ArgumentNullException(nameof(assetIds), "Property is not nullable for class DownloadInfoDto.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class DownloadInfoDto.");

            return new DownloadInfoDto(albumId, archiveSize, assetIds, userId);
        }

        /// <summary>
        /// Serializes a <see cref="DownloadInfoDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="downloadInfoDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DownloadInfoDto downloadInfoDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, downloadInfoDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DownloadInfoDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="downloadInfoDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DownloadInfoDto downloadInfoDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (downloadInfoDto.AssetIdsOption.IsSet && downloadInfoDto.AssetIds == null)
                throw new ArgumentNullException(nameof(downloadInfoDto.AssetIds), "Property is required for class DownloadInfoDto.");

            if (downloadInfoDto.AlbumIdOption.IsSet)
                writer.WriteString("albumId", downloadInfoDto.AlbumIdOption.Value!.Value);

            if (downloadInfoDto.ArchiveSizeOption.IsSet)
                writer.WriteNumber("archiveSize", downloadInfoDto.ArchiveSizeOption.Value!.Value);

            if (downloadInfoDto.AssetIdsOption.IsSet)
            {
                writer.WritePropertyName("assetIds");
                JsonSerializer.Serialize(writer, downloadInfoDto.AssetIds, jsonSerializerOptions);
            }
            if (downloadInfoDto.UserIdOption.IsSet)
                writer.WriteString("userId", downloadInfoDto.UserIdOption.Value!.Value);
        }
    }
}
