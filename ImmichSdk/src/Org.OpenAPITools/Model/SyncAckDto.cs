// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SyncAckDto
    /// </summary>
    public partial class SyncAckDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SyncAckDto" /> class.
        /// </summary>
        /// <param name="ack">ack</param>
        /// <param name="type">type</param>
        [JsonConstructor]
        public SyncAckDto(string ack, SyncEntityType type)
        {
            Ack = ack;
            Type = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public SyncEntityType Type { get; set; }

        /// <summary>
        /// Gets or Sets Ack
        /// </summary>
        [JsonPropertyName("ack")]
        public string Ack { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SyncAckDto {\n");
            sb.Append("  Ack: ").Append(Ack).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SyncAckDto" />
    /// </summary>
    public class SyncAckDtoJsonConverter : JsonConverter<SyncAckDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="SyncAckDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SyncAckDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> ack = default;
            Option<SyncEntityType?> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ack":
                            ack = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<SyncEntityType?>(SyncEntityTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!ack.IsSet)
                throw new ArgumentException("Property is required for class SyncAckDto.", nameof(ack));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class SyncAckDto.", nameof(type));

            if (ack.IsSet && ack.Value == null)
                throw new ArgumentNullException(nameof(ack), "Property is not nullable for class SyncAckDto.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class SyncAckDto.");

            return new SyncAckDto(ack.Value!, type.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="SyncAckDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="syncAckDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SyncAckDto syncAckDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, syncAckDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SyncAckDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="syncAckDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SyncAckDto syncAckDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (syncAckDto.Ack == null)
                throw new ArgumentNullException(nameof(syncAckDto.Ack), "Property is required for class SyncAckDto.");

            writer.WriteString("ack", syncAckDto.Ack);

            var typeRawValue = SyncEntityTypeValueConverter.ToJsonValue(syncAckDto.Type);
            writer.WriteString("type", typeRawValue);
        }
    }
}
