// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SharedLinkResponseDto
    /// </summary>
    public partial class SharedLinkResponseDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharedLinkResponseDto" /> class.
        /// </summary>
        /// <param name="allowDownload">allowDownload</param>
        /// <param name="allowUpload">allowUpload</param>
        /// <param name="assets">assets</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="id">id</param>
        /// <param name="key">key</param>
        /// <param name="showMetadata">showMetadata</param>
        /// <param name="type">type</param>
        /// <param name="userId">userId</param>
        /// <param name="album">album</param>
        /// <param name="description">description</param>
        /// <param name="expiresAt">expiresAt</param>
        /// <param name="password">password</param>
        /// <param name="slug">slug</param>
        /// <param name="token">token</param>
        [JsonConstructor]
        public SharedLinkResponseDto(bool allowDownload, bool allowUpload, List<AssetResponseDto> assets, DateTime createdAt, string id, string key, bool showMetadata, SharedLinkType type, string userId, Option<AlbumResponseDto?> album = default, string? description = default, DateTime? expiresAt = default, string? password = default, string? slug = default, Option<string?> token = default)
        {
            AllowDownload = allowDownload;
            AllowUpload = allowUpload;
            Assets = assets;
            CreatedAt = createdAt;
            Id = id;
            Key = key;
            ShowMetadata = showMetadata;
            Type = type;
            UserId = userId;
            AlbumOption = album;
            Description = description;
            ExpiresAt = expiresAt;
            Password = password;
            Slug = slug;
            TokenOption = token;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public SharedLinkType Type { get; set; }

        /// <summary>
        /// Gets or Sets AllowDownload
        /// </summary>
        [JsonPropertyName("allowDownload")]
        public bool AllowDownload { get; set; }

        /// <summary>
        /// Gets or Sets AllowUpload
        /// </summary>
        [JsonPropertyName("allowUpload")]
        public bool AllowUpload { get; set; }

        /// <summary>
        /// Gets or Sets Assets
        /// </summary>
        [JsonPropertyName("assets")]
        public List<AssetResponseDto> Assets { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [JsonPropertyName("key")]
        public string Key { get; set; }

        /// <summary>
        /// Gets or Sets ShowMetadata
        /// </summary>
        [JsonPropertyName("showMetadata")]
        public bool ShowMetadata { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("userId")]
        public string UserId { get; set; }

        /// <summary>
        /// Used to track the state of Album
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AlbumResponseDto?> AlbumOption { get; private set; }

        /// <summary>
        /// Gets or Sets Album
        /// </summary>
        [JsonPropertyName("album")]
        public AlbumResponseDto? Album { get { return this.AlbumOption; } set { this.AlbumOption = new(value); } }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get; set; }

        /// <summary>
        /// Gets or Sets ExpiresAt
        /// </summary>
        [JsonPropertyName("expiresAt")]
        public DateTime? ExpiresAt { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [JsonPropertyName("password")]
        public string? Password { get; set; }

        /// <summary>
        /// Gets or Sets Slug
        /// </summary>
        [JsonPropertyName("slug")]
        public string? Slug { get; set; }

        /// <summary>
        /// Used to track the state of Token
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TokenOption { get; private set; }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [JsonPropertyName("token")]
        public string? Token { get { return this.TokenOption; } set { this.TokenOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SharedLinkResponseDto {\n");
            sb.Append("  AllowDownload: ").Append(AllowDownload).Append("\n");
            sb.Append("  AllowUpload: ").Append(AllowUpload).Append("\n");
            sb.Append("  Assets: ").Append(Assets).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  ShowMetadata: ").Append(ShowMetadata).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Album: ").Append(Album).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SharedLinkResponseDto" />
    /// </summary>
    public class SharedLinkResponseDtoJsonConverter : JsonConverter<SharedLinkResponseDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ExpiresAt
        /// </summary>
        public static string ExpiresAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="SharedLinkResponseDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SharedLinkResponseDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> allowDownload = default;
            Option<bool?> allowUpload = default;
            Option<List<AssetResponseDto>?> assets = default;
            Option<DateTime?> createdAt = default;
            Option<string?> id = default;
            Option<string?> key = default;
            Option<bool?> showMetadata = default;
            Option<SharedLinkType?> type = default;
            Option<string?> userId = default;
            Option<AlbumResponseDto?> album = default;
            Option<string?> description = default;
            Option<DateTime?> expiresAt = default;
            Option<string?> password = default;
            Option<string?> slug = default;
            Option<string?> token = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "allowDownload":
                            allowDownload = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "allowUpload":
                            allowUpload = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "assets":
                            assets = new Option<List<AssetResponseDto>?>(JsonSerializer.Deserialize<List<AssetResponseDto>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "key":
                            key = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "showMetadata":
                            showMetadata = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<SharedLinkType?>(SharedLinkTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "userId":
                            userId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "album":
                            album = new Option<AlbumResponseDto?>(JsonSerializer.Deserialize<AlbumResponseDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "expiresAt":
                            expiresAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "password":
                            password = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "slug":
                            slug = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "token":
                            token = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!allowDownload.IsSet)
                throw new ArgumentException("Property is required for class SharedLinkResponseDto.", nameof(allowDownload));

            if (!allowUpload.IsSet)
                throw new ArgumentException("Property is required for class SharedLinkResponseDto.", nameof(allowUpload));

            if (!assets.IsSet)
                throw new ArgumentException("Property is required for class SharedLinkResponseDto.", nameof(assets));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class SharedLinkResponseDto.", nameof(createdAt));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class SharedLinkResponseDto.", nameof(id));

            if (!key.IsSet)
                throw new ArgumentException("Property is required for class SharedLinkResponseDto.", nameof(key));

            if (!showMetadata.IsSet)
                throw new ArgumentException("Property is required for class SharedLinkResponseDto.", nameof(showMetadata));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class SharedLinkResponseDto.", nameof(type));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class SharedLinkResponseDto.", nameof(userId));

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class SharedLinkResponseDto.", nameof(description));

            if (!expiresAt.IsSet)
                throw new ArgumentException("Property is required for class SharedLinkResponseDto.", nameof(expiresAt));

            if (!password.IsSet)
                throw new ArgumentException("Property is required for class SharedLinkResponseDto.", nameof(password));

            if (!slug.IsSet)
                throw new ArgumentException("Property is required for class SharedLinkResponseDto.", nameof(slug));

            if (allowDownload.IsSet && allowDownload.Value == null)
                throw new ArgumentNullException(nameof(allowDownload), "Property is not nullable for class SharedLinkResponseDto.");

            if (allowUpload.IsSet && allowUpload.Value == null)
                throw new ArgumentNullException(nameof(allowUpload), "Property is not nullable for class SharedLinkResponseDto.");

            if (assets.IsSet && assets.Value == null)
                throw new ArgumentNullException(nameof(assets), "Property is not nullable for class SharedLinkResponseDto.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class SharedLinkResponseDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class SharedLinkResponseDto.");

            if (key.IsSet && key.Value == null)
                throw new ArgumentNullException(nameof(key), "Property is not nullable for class SharedLinkResponseDto.");

            if (showMetadata.IsSet && showMetadata.Value == null)
                throw new ArgumentNullException(nameof(showMetadata), "Property is not nullable for class SharedLinkResponseDto.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class SharedLinkResponseDto.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class SharedLinkResponseDto.");

            if (album.IsSet && album.Value == null)
                throw new ArgumentNullException(nameof(album), "Property is not nullable for class SharedLinkResponseDto.");

            return new SharedLinkResponseDto(allowDownload.Value!.Value!, allowUpload.Value!.Value!, assets.Value!, createdAt.Value!.Value!, id.Value!, key.Value!, showMetadata.Value!.Value!, type.Value!.Value!, userId.Value!, album, description.Value!, expiresAt.Value!, password.Value!, slug.Value!, token);
        }

        /// <summary>
        /// Serializes a <see cref="SharedLinkResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sharedLinkResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SharedLinkResponseDto sharedLinkResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, sharedLinkResponseDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SharedLinkResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sharedLinkResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SharedLinkResponseDto sharedLinkResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (sharedLinkResponseDto.Assets == null)
                throw new ArgumentNullException(nameof(sharedLinkResponseDto.Assets), "Property is required for class SharedLinkResponseDto.");

            if (sharedLinkResponseDto.Id == null)
                throw new ArgumentNullException(nameof(sharedLinkResponseDto.Id), "Property is required for class SharedLinkResponseDto.");

            if (sharedLinkResponseDto.Key == null)
                throw new ArgumentNullException(nameof(sharedLinkResponseDto.Key), "Property is required for class SharedLinkResponseDto.");

            if (sharedLinkResponseDto.UserId == null)
                throw new ArgumentNullException(nameof(sharedLinkResponseDto.UserId), "Property is required for class SharedLinkResponseDto.");

            if (sharedLinkResponseDto.AlbumOption.IsSet && sharedLinkResponseDto.Album == null)
                throw new ArgumentNullException(nameof(sharedLinkResponseDto.Album), "Property is required for class SharedLinkResponseDto.");

            writer.WriteBoolean("allowDownload", sharedLinkResponseDto.AllowDownload);

            writer.WriteBoolean("allowUpload", sharedLinkResponseDto.AllowUpload);

            writer.WritePropertyName("assets");
            JsonSerializer.Serialize(writer, sharedLinkResponseDto.Assets, jsonSerializerOptions);
            writer.WriteString("createdAt", sharedLinkResponseDto.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("id", sharedLinkResponseDto.Id);

            writer.WriteString("key", sharedLinkResponseDto.Key);

            writer.WriteBoolean("showMetadata", sharedLinkResponseDto.ShowMetadata);

            var typeRawValue = SharedLinkTypeValueConverter.ToJsonValue(sharedLinkResponseDto.Type);
            writer.WriteString("type", typeRawValue);

            writer.WriteString("userId", sharedLinkResponseDto.UserId);

            if (sharedLinkResponseDto.AlbumOption.IsSet)
            {
                writer.WritePropertyName("album");
                JsonSerializer.Serialize(writer, sharedLinkResponseDto.Album, jsonSerializerOptions);
            }
            if (sharedLinkResponseDto.Description != null)
                writer.WriteString("description", sharedLinkResponseDto.Description);
            else
                writer.WriteNull("description");

            if (sharedLinkResponseDto.ExpiresAt != null)
                writer.WriteString("expiresAt", sharedLinkResponseDto.ExpiresAt.Value.ToString(ExpiresAtFormat));
            else
                writer.WriteNull("expiresAt");

            if (sharedLinkResponseDto.Password != null)
                writer.WriteString("password", sharedLinkResponseDto.Password);
            else
                writer.WriteNull("password");

            if (sharedLinkResponseDto.Slug != null)
                writer.WriteString("slug", sharedLinkResponseDto.Slug);
            else
                writer.WriteNull("slug");

            if (sharedLinkResponseDto.TokenOption.IsSet)
                if (sharedLinkResponseDto.TokenOption.Value != null)
                    writer.WriteString("token", sharedLinkResponseDto.Token);
                else
                    writer.WriteNull("token");
        }
    }
}
