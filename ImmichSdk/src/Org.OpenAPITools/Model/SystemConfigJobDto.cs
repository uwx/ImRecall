// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SystemConfigJobDto
    /// </summary>
    public partial class SystemConfigJobDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigJobDto" /> class.
        /// </summary>
        /// <param name="backgroundTask">backgroundTask</param>
        /// <param name="faceDetection">faceDetection</param>
        /// <param name="library">library</param>
        /// <param name="metadataExtraction">metadataExtraction</param>
        /// <param name="migration">migration</param>
        /// <param name="notifications">notifications</param>
        /// <param name="search">search</param>
        /// <param name="sidecar">sidecar</param>
        /// <param name="smartSearch">smartSearch</param>
        /// <param name="thumbnailGeneration">thumbnailGeneration</param>
        /// <param name="videoConversion">videoConversion</param>
        [JsonConstructor]
        public SystemConfigJobDto(JobSettingsDto backgroundTask, JobSettingsDto faceDetection, JobSettingsDto library, JobSettingsDto metadataExtraction, JobSettingsDto migration, JobSettingsDto notifications, JobSettingsDto search, JobSettingsDto sidecar, JobSettingsDto smartSearch, JobSettingsDto thumbnailGeneration, JobSettingsDto videoConversion)
        {
            BackgroundTask = backgroundTask;
            FaceDetection = faceDetection;
            Library = library;
            MetadataExtraction = metadataExtraction;
            Migration = migration;
            Notifications = notifications;
            Search = search;
            Sidecar = sidecar;
            SmartSearch = smartSearch;
            ThumbnailGeneration = thumbnailGeneration;
            VideoConversion = videoConversion;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets BackgroundTask
        /// </summary>
        [JsonPropertyName("backgroundTask")]
        public JobSettingsDto BackgroundTask { get; set; }

        /// <summary>
        /// Gets or Sets FaceDetection
        /// </summary>
        [JsonPropertyName("faceDetection")]
        public JobSettingsDto FaceDetection { get; set; }

        /// <summary>
        /// Gets or Sets Library
        /// </summary>
        [JsonPropertyName("library")]
        public JobSettingsDto Library { get; set; }

        /// <summary>
        /// Gets or Sets MetadataExtraction
        /// </summary>
        [JsonPropertyName("metadataExtraction")]
        public JobSettingsDto MetadataExtraction { get; set; }

        /// <summary>
        /// Gets or Sets Migration
        /// </summary>
        [JsonPropertyName("migration")]
        public JobSettingsDto Migration { get; set; }

        /// <summary>
        /// Gets or Sets Notifications
        /// </summary>
        [JsonPropertyName("notifications")]
        public JobSettingsDto Notifications { get; set; }

        /// <summary>
        /// Gets or Sets Search
        /// </summary>
        [JsonPropertyName("search")]
        public JobSettingsDto Search { get; set; }

        /// <summary>
        /// Gets or Sets Sidecar
        /// </summary>
        [JsonPropertyName("sidecar")]
        public JobSettingsDto Sidecar { get; set; }

        /// <summary>
        /// Gets or Sets SmartSearch
        /// </summary>
        [JsonPropertyName("smartSearch")]
        public JobSettingsDto SmartSearch { get; set; }

        /// <summary>
        /// Gets or Sets ThumbnailGeneration
        /// </summary>
        [JsonPropertyName("thumbnailGeneration")]
        public JobSettingsDto ThumbnailGeneration { get; set; }

        /// <summary>
        /// Gets or Sets VideoConversion
        /// </summary>
        [JsonPropertyName("videoConversion")]
        public JobSettingsDto VideoConversion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SystemConfigJobDto {\n");
            sb.Append("  BackgroundTask: ").Append(BackgroundTask).Append("\n");
            sb.Append("  FaceDetection: ").Append(FaceDetection).Append("\n");
            sb.Append("  Library: ").Append(Library).Append("\n");
            sb.Append("  MetadataExtraction: ").Append(MetadataExtraction).Append("\n");
            sb.Append("  Migration: ").Append(Migration).Append("\n");
            sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            sb.Append("  Search: ").Append(Search).Append("\n");
            sb.Append("  Sidecar: ").Append(Sidecar).Append("\n");
            sb.Append("  SmartSearch: ").Append(SmartSearch).Append("\n");
            sb.Append("  ThumbnailGeneration: ").Append(ThumbnailGeneration).Append("\n");
            sb.Append("  VideoConversion: ").Append(VideoConversion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SystemConfigJobDto" />
    /// </summary>
    public class SystemConfigJobDtoJsonConverter : JsonConverter<SystemConfigJobDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="SystemConfigJobDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SystemConfigJobDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<JobSettingsDto?> backgroundTask = default;
            Option<JobSettingsDto?> faceDetection = default;
            Option<JobSettingsDto?> library = default;
            Option<JobSettingsDto?> metadataExtraction = default;
            Option<JobSettingsDto?> migration = default;
            Option<JobSettingsDto?> notifications = default;
            Option<JobSettingsDto?> search = default;
            Option<JobSettingsDto?> sidecar = default;
            Option<JobSettingsDto?> smartSearch = default;
            Option<JobSettingsDto?> thumbnailGeneration = default;
            Option<JobSettingsDto?> videoConversion = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "backgroundTask":
                            backgroundTask = new Option<JobSettingsDto?>(JsonSerializer.Deserialize<JobSettingsDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "faceDetection":
                            faceDetection = new Option<JobSettingsDto?>(JsonSerializer.Deserialize<JobSettingsDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "library":
                            library = new Option<JobSettingsDto?>(JsonSerializer.Deserialize<JobSettingsDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "metadataExtraction":
                            metadataExtraction = new Option<JobSettingsDto?>(JsonSerializer.Deserialize<JobSettingsDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "migration":
                            migration = new Option<JobSettingsDto?>(JsonSerializer.Deserialize<JobSettingsDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "notifications":
                            notifications = new Option<JobSettingsDto?>(JsonSerializer.Deserialize<JobSettingsDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "search":
                            search = new Option<JobSettingsDto?>(JsonSerializer.Deserialize<JobSettingsDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "sidecar":
                            sidecar = new Option<JobSettingsDto?>(JsonSerializer.Deserialize<JobSettingsDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "smartSearch":
                            smartSearch = new Option<JobSettingsDto?>(JsonSerializer.Deserialize<JobSettingsDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "thumbnailGeneration":
                            thumbnailGeneration = new Option<JobSettingsDto?>(JsonSerializer.Deserialize<JobSettingsDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "videoConversion":
                            videoConversion = new Option<JobSettingsDto?>(JsonSerializer.Deserialize<JobSettingsDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!backgroundTask.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigJobDto.", nameof(backgroundTask));

            if (!faceDetection.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigJobDto.", nameof(faceDetection));

            if (!library.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigJobDto.", nameof(library));

            if (!metadataExtraction.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigJobDto.", nameof(metadataExtraction));

            if (!migration.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigJobDto.", nameof(migration));

            if (!notifications.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigJobDto.", nameof(notifications));

            if (!search.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigJobDto.", nameof(search));

            if (!sidecar.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigJobDto.", nameof(sidecar));

            if (!smartSearch.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigJobDto.", nameof(smartSearch));

            if (!thumbnailGeneration.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigJobDto.", nameof(thumbnailGeneration));

            if (!videoConversion.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigJobDto.", nameof(videoConversion));

            if (backgroundTask.IsSet && backgroundTask.Value == null)
                throw new ArgumentNullException(nameof(backgroundTask), "Property is not nullable for class SystemConfigJobDto.");

            if (faceDetection.IsSet && faceDetection.Value == null)
                throw new ArgumentNullException(nameof(faceDetection), "Property is not nullable for class SystemConfigJobDto.");

            if (library.IsSet && library.Value == null)
                throw new ArgumentNullException(nameof(library), "Property is not nullable for class SystemConfigJobDto.");

            if (metadataExtraction.IsSet && metadataExtraction.Value == null)
                throw new ArgumentNullException(nameof(metadataExtraction), "Property is not nullable for class SystemConfigJobDto.");

            if (migration.IsSet && migration.Value == null)
                throw new ArgumentNullException(nameof(migration), "Property is not nullable for class SystemConfigJobDto.");

            if (notifications.IsSet && notifications.Value == null)
                throw new ArgumentNullException(nameof(notifications), "Property is not nullable for class SystemConfigJobDto.");

            if (search.IsSet && search.Value == null)
                throw new ArgumentNullException(nameof(search), "Property is not nullable for class SystemConfigJobDto.");

            if (sidecar.IsSet && sidecar.Value == null)
                throw new ArgumentNullException(nameof(sidecar), "Property is not nullable for class SystemConfigJobDto.");

            if (smartSearch.IsSet && smartSearch.Value == null)
                throw new ArgumentNullException(nameof(smartSearch), "Property is not nullable for class SystemConfigJobDto.");

            if (thumbnailGeneration.IsSet && thumbnailGeneration.Value == null)
                throw new ArgumentNullException(nameof(thumbnailGeneration), "Property is not nullable for class SystemConfigJobDto.");

            if (videoConversion.IsSet && videoConversion.Value == null)
                throw new ArgumentNullException(nameof(videoConversion), "Property is not nullable for class SystemConfigJobDto.");

            return new SystemConfigJobDto(backgroundTask.Value!, faceDetection.Value!, library.Value!, metadataExtraction.Value!, migration.Value!, notifications.Value!, search.Value!, sidecar.Value!, smartSearch.Value!, thumbnailGeneration.Value!, videoConversion.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="SystemConfigJobDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="systemConfigJobDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SystemConfigJobDto systemConfigJobDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, systemConfigJobDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SystemConfigJobDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="systemConfigJobDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SystemConfigJobDto systemConfigJobDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (systemConfigJobDto.BackgroundTask == null)
                throw new ArgumentNullException(nameof(systemConfigJobDto.BackgroundTask), "Property is required for class SystemConfigJobDto.");

            if (systemConfigJobDto.FaceDetection == null)
                throw new ArgumentNullException(nameof(systemConfigJobDto.FaceDetection), "Property is required for class SystemConfigJobDto.");

            if (systemConfigJobDto.Library == null)
                throw new ArgumentNullException(nameof(systemConfigJobDto.Library), "Property is required for class SystemConfigJobDto.");

            if (systemConfigJobDto.MetadataExtraction == null)
                throw new ArgumentNullException(nameof(systemConfigJobDto.MetadataExtraction), "Property is required for class SystemConfigJobDto.");

            if (systemConfigJobDto.Migration == null)
                throw new ArgumentNullException(nameof(systemConfigJobDto.Migration), "Property is required for class SystemConfigJobDto.");

            if (systemConfigJobDto.Notifications == null)
                throw new ArgumentNullException(nameof(systemConfigJobDto.Notifications), "Property is required for class SystemConfigJobDto.");

            if (systemConfigJobDto.Search == null)
                throw new ArgumentNullException(nameof(systemConfigJobDto.Search), "Property is required for class SystemConfigJobDto.");

            if (systemConfigJobDto.Sidecar == null)
                throw new ArgumentNullException(nameof(systemConfigJobDto.Sidecar), "Property is required for class SystemConfigJobDto.");

            if (systemConfigJobDto.SmartSearch == null)
                throw new ArgumentNullException(nameof(systemConfigJobDto.SmartSearch), "Property is required for class SystemConfigJobDto.");

            if (systemConfigJobDto.ThumbnailGeneration == null)
                throw new ArgumentNullException(nameof(systemConfigJobDto.ThumbnailGeneration), "Property is required for class SystemConfigJobDto.");

            if (systemConfigJobDto.VideoConversion == null)
                throw new ArgumentNullException(nameof(systemConfigJobDto.VideoConversion), "Property is required for class SystemConfigJobDto.");

            writer.WritePropertyName("backgroundTask");
            JsonSerializer.Serialize(writer, systemConfigJobDto.BackgroundTask, jsonSerializerOptions);
            writer.WritePropertyName("faceDetection");
            JsonSerializer.Serialize(writer, systemConfigJobDto.FaceDetection, jsonSerializerOptions);
            writer.WritePropertyName("library");
            JsonSerializer.Serialize(writer, systemConfigJobDto.Library, jsonSerializerOptions);
            writer.WritePropertyName("metadataExtraction");
            JsonSerializer.Serialize(writer, systemConfigJobDto.MetadataExtraction, jsonSerializerOptions);
            writer.WritePropertyName("migration");
            JsonSerializer.Serialize(writer, systemConfigJobDto.Migration, jsonSerializerOptions);
            writer.WritePropertyName("notifications");
            JsonSerializer.Serialize(writer, systemConfigJobDto.Notifications, jsonSerializerOptions);
            writer.WritePropertyName("search");
            JsonSerializer.Serialize(writer, systemConfigJobDto.Search, jsonSerializerOptions);
            writer.WritePropertyName("sidecar");
            JsonSerializer.Serialize(writer, systemConfigJobDto.Sidecar, jsonSerializerOptions);
            writer.WritePropertyName("smartSearch");
            JsonSerializer.Serialize(writer, systemConfigJobDto.SmartSearch, jsonSerializerOptions);
            writer.WritePropertyName("thumbnailGeneration");
            JsonSerializer.Serialize(writer, systemConfigJobDto.ThumbnailGeneration, jsonSerializerOptions);
            writer.WritePropertyName("videoConversion");
            JsonSerializer.Serialize(writer, systemConfigJobDto.VideoConversion, jsonSerializerOptions);
        }
    }
}
