// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SystemConfigOAuthDto
    /// </summary>
    public partial class SystemConfigOAuthDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigOAuthDto" /> class.
        /// </summary>
        /// <param name="autoLaunch">autoLaunch</param>
        /// <param name="autoRegister">autoRegister</param>
        /// <param name="buttonText">buttonText</param>
        /// <param name="clientId">clientId</param>
        /// <param name="clientSecret">clientSecret</param>
        /// <param name="enabled">enabled</param>
        /// <param name="issuerUrl">issuerUrl</param>
        /// <param name="mobileOverrideEnabled">mobileOverrideEnabled</param>
        /// <param name="mobileRedirectUri">mobileRedirectUri</param>
        /// <param name="profileSigningAlgorithm">profileSigningAlgorithm</param>
        /// <param name="roleClaim">roleClaim</param>
        /// <param name="scope">scope</param>
        /// <param name="signingAlgorithm">signingAlgorithm</param>
        /// <param name="storageLabelClaim">storageLabelClaim</param>
        /// <param name="storageQuotaClaim">storageQuotaClaim</param>
        /// <param name="timeout">timeout</param>
        /// <param name="tokenEndpointAuthMethod">tokenEndpointAuthMethod</param>
        /// <param name="defaultStorageQuota">defaultStorageQuota</param>
        [JsonConstructor]
        public SystemConfigOAuthDto(bool autoLaunch, bool autoRegister, string buttonText, string clientId, string clientSecret, bool enabled, string issuerUrl, bool mobileOverrideEnabled, string mobileRedirectUri, string profileSigningAlgorithm, string roleClaim, string scope, string signingAlgorithm, string storageLabelClaim, string storageQuotaClaim, int timeout, OAuthTokenEndpointAuthMethod tokenEndpointAuthMethod, long? defaultStorageQuota = default)
        {
            AutoLaunch = autoLaunch;
            AutoRegister = autoRegister;
            ButtonText = buttonText;
            ClientId = clientId;
            ClientSecret = clientSecret;
            Enabled = enabled;
            IssuerUrl = issuerUrl;
            MobileOverrideEnabled = mobileOverrideEnabled;
            MobileRedirectUri = mobileRedirectUri;
            ProfileSigningAlgorithm = profileSigningAlgorithm;
            RoleClaim = roleClaim;
            Scope = scope;
            SigningAlgorithm = signingAlgorithm;
            StorageLabelClaim = storageLabelClaim;
            StorageQuotaClaim = storageQuotaClaim;
            Timeout = timeout;
            TokenEndpointAuthMethod = tokenEndpointAuthMethod;
            DefaultStorageQuota = defaultStorageQuota;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets TokenEndpointAuthMethod
        /// </summary>
        [JsonPropertyName("tokenEndpointAuthMethod")]
        public OAuthTokenEndpointAuthMethod TokenEndpointAuthMethod { get; set; }

        /// <summary>
        /// Gets or Sets AutoLaunch
        /// </summary>
        [JsonPropertyName("autoLaunch")]
        public bool AutoLaunch { get; set; }

        /// <summary>
        /// Gets or Sets AutoRegister
        /// </summary>
        [JsonPropertyName("autoRegister")]
        public bool AutoRegister { get; set; }

        /// <summary>
        /// Gets or Sets ButtonText
        /// </summary>
        [JsonPropertyName("buttonText")]
        public string ButtonText { get; set; }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [JsonPropertyName("clientId")]
        public string ClientId { get; set; }

        /// <summary>
        /// Gets or Sets ClientSecret
        /// </summary>
        [JsonPropertyName("clientSecret")]
        public string ClientSecret { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [JsonPropertyName("enabled")]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets IssuerUrl
        /// </summary>
        [JsonPropertyName("issuerUrl")]
        public string IssuerUrl { get; set; }

        /// <summary>
        /// Gets or Sets MobileOverrideEnabled
        /// </summary>
        [JsonPropertyName("mobileOverrideEnabled")]
        public bool MobileOverrideEnabled { get; set; }

        /// <summary>
        /// Gets or Sets MobileRedirectUri
        /// </summary>
        [JsonPropertyName("mobileRedirectUri")]
        public string MobileRedirectUri { get; set; }

        /// <summary>
        /// Gets or Sets ProfileSigningAlgorithm
        /// </summary>
        [JsonPropertyName("profileSigningAlgorithm")]
        public string ProfileSigningAlgorithm { get; set; }

        /// <summary>
        /// Gets or Sets RoleClaim
        /// </summary>
        [JsonPropertyName("roleClaim")]
        public string RoleClaim { get; set; }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [JsonPropertyName("scope")]
        public string Scope { get; set; }

        /// <summary>
        /// Gets or Sets SigningAlgorithm
        /// </summary>
        [JsonPropertyName("signingAlgorithm")]
        public string SigningAlgorithm { get; set; }

        /// <summary>
        /// Gets or Sets StorageLabelClaim
        /// </summary>
        [JsonPropertyName("storageLabelClaim")]
        public string StorageLabelClaim { get; set; }

        /// <summary>
        /// Gets or Sets StorageQuotaClaim
        /// </summary>
        [JsonPropertyName("storageQuotaClaim")]
        public string StorageQuotaClaim { get; set; }

        /// <summary>
        /// Gets or Sets Timeout
        /// </summary>
        [JsonPropertyName("timeout")]
        public int Timeout { get; set; }

        /// <summary>
        /// Gets or Sets DefaultStorageQuota
        /// </summary>
        [JsonPropertyName("defaultStorageQuota")]
        public long? DefaultStorageQuota { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SystemConfigOAuthDto {\n");
            sb.Append("  AutoLaunch: ").Append(AutoLaunch).Append("\n");
            sb.Append("  AutoRegister: ").Append(AutoRegister).Append("\n");
            sb.Append("  ButtonText: ").Append(ButtonText).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientSecret: ").Append(ClientSecret).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  IssuerUrl: ").Append(IssuerUrl).Append("\n");
            sb.Append("  MobileOverrideEnabled: ").Append(MobileOverrideEnabled).Append("\n");
            sb.Append("  MobileRedirectUri: ").Append(MobileRedirectUri).Append("\n");
            sb.Append("  ProfileSigningAlgorithm: ").Append(ProfileSigningAlgorithm).Append("\n");
            sb.Append("  RoleClaim: ").Append(RoleClaim).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  SigningAlgorithm: ").Append(SigningAlgorithm).Append("\n");
            sb.Append("  StorageLabelClaim: ").Append(StorageLabelClaim).Append("\n");
            sb.Append("  StorageQuotaClaim: ").Append(StorageQuotaClaim).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  TokenEndpointAuthMethod: ").Append(TokenEndpointAuthMethod).Append("\n");
            sb.Append("  DefaultStorageQuota: ").Append(DefaultStorageQuota).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Timeout (int) minimum
            if (this.Timeout < (int)1)
            {
                yield return new ValidationResult("Invalid value for Timeout, must be a value greater than or equal to 1.", new [] { "Timeout" });
            }

            // DefaultStorageQuota (long) minimum
            if (this.DefaultStorageQuota < (long)0)
            {
                yield return new ValidationResult("Invalid value for DefaultStorageQuota, must be a value greater than or equal to 0.", new [] { "DefaultStorageQuota" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SystemConfigOAuthDto" />
    /// </summary>
    public class SystemConfigOAuthDtoJsonConverter : JsonConverter<SystemConfigOAuthDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="SystemConfigOAuthDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SystemConfigOAuthDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> autoLaunch = default;
            Option<bool?> autoRegister = default;
            Option<string?> buttonText = default;
            Option<string?> clientId = default;
            Option<string?> clientSecret = default;
            Option<bool?> enabled = default;
            Option<string?> issuerUrl = default;
            Option<bool?> mobileOverrideEnabled = default;
            Option<string?> mobileRedirectUri = default;
            Option<string?> profileSigningAlgorithm = default;
            Option<string?> roleClaim = default;
            Option<string?> scope = default;
            Option<string?> signingAlgorithm = default;
            Option<string?> storageLabelClaim = default;
            Option<string?> storageQuotaClaim = default;
            Option<int?> timeout = default;
            Option<OAuthTokenEndpointAuthMethod?> tokenEndpointAuthMethod = default;
            Option<long?> defaultStorageQuota = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "autoLaunch":
                            autoLaunch = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "autoRegister":
                            autoRegister = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "buttonText":
                            buttonText = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "clientId":
                            clientId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "clientSecret":
                            clientSecret = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "enabled":
                            enabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "issuerUrl":
                            issuerUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "mobileOverrideEnabled":
                            mobileOverrideEnabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "mobileRedirectUri":
                            mobileRedirectUri = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "profileSigningAlgorithm":
                            profileSigningAlgorithm = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "roleClaim":
                            roleClaim = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "scope":
                            scope = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "signingAlgorithm":
                            signingAlgorithm = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "storageLabelClaim":
                            storageLabelClaim = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "storageQuotaClaim":
                            storageQuotaClaim = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "timeout":
                            timeout = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "tokenEndpointAuthMethod":
                            string? tokenEndpointAuthMethodRawValue = utf8JsonReader.GetString();
                            if (tokenEndpointAuthMethodRawValue != null)
                                tokenEndpointAuthMethod = new Option<OAuthTokenEndpointAuthMethod?>(OAuthTokenEndpointAuthMethodValueConverter.FromStringOrDefault(tokenEndpointAuthMethodRawValue));
                            break;
                        case "defaultStorageQuota":
                            defaultStorageQuota = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!autoLaunch.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigOAuthDto.", nameof(autoLaunch));

            if (!autoRegister.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigOAuthDto.", nameof(autoRegister));

            if (!buttonText.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigOAuthDto.", nameof(buttonText));

            if (!clientId.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigOAuthDto.", nameof(clientId));

            if (!clientSecret.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigOAuthDto.", nameof(clientSecret));

            if (!enabled.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigOAuthDto.", nameof(enabled));

            if (!issuerUrl.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigOAuthDto.", nameof(issuerUrl));

            if (!mobileOverrideEnabled.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigOAuthDto.", nameof(mobileOverrideEnabled));

            if (!mobileRedirectUri.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigOAuthDto.", nameof(mobileRedirectUri));

            if (!profileSigningAlgorithm.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigOAuthDto.", nameof(profileSigningAlgorithm));

            if (!roleClaim.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigOAuthDto.", nameof(roleClaim));

            if (!scope.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigOAuthDto.", nameof(scope));

            if (!signingAlgorithm.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigOAuthDto.", nameof(signingAlgorithm));

            if (!storageLabelClaim.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigOAuthDto.", nameof(storageLabelClaim));

            if (!storageQuotaClaim.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigOAuthDto.", nameof(storageQuotaClaim));

            if (!timeout.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigOAuthDto.", nameof(timeout));

            if (!tokenEndpointAuthMethod.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigOAuthDto.", nameof(tokenEndpointAuthMethod));

            if (!defaultStorageQuota.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigOAuthDto.", nameof(defaultStorageQuota));

            if (autoLaunch.IsSet && autoLaunch.Value == null)
                throw new ArgumentNullException(nameof(autoLaunch), "Property is not nullable for class SystemConfigOAuthDto.");

            if (autoRegister.IsSet && autoRegister.Value == null)
                throw new ArgumentNullException(nameof(autoRegister), "Property is not nullable for class SystemConfigOAuthDto.");

            if (buttonText.IsSet && buttonText.Value == null)
                throw new ArgumentNullException(nameof(buttonText), "Property is not nullable for class SystemConfigOAuthDto.");

            if (clientId.IsSet && clientId.Value == null)
                throw new ArgumentNullException(nameof(clientId), "Property is not nullable for class SystemConfigOAuthDto.");

            if (clientSecret.IsSet && clientSecret.Value == null)
                throw new ArgumentNullException(nameof(clientSecret), "Property is not nullable for class SystemConfigOAuthDto.");

            if (enabled.IsSet && enabled.Value == null)
                throw new ArgumentNullException(nameof(enabled), "Property is not nullable for class SystemConfigOAuthDto.");

            if (issuerUrl.IsSet && issuerUrl.Value == null)
                throw new ArgumentNullException(nameof(issuerUrl), "Property is not nullable for class SystemConfigOAuthDto.");

            if (mobileOverrideEnabled.IsSet && mobileOverrideEnabled.Value == null)
                throw new ArgumentNullException(nameof(mobileOverrideEnabled), "Property is not nullable for class SystemConfigOAuthDto.");

            if (mobileRedirectUri.IsSet && mobileRedirectUri.Value == null)
                throw new ArgumentNullException(nameof(mobileRedirectUri), "Property is not nullable for class SystemConfigOAuthDto.");

            if (profileSigningAlgorithm.IsSet && profileSigningAlgorithm.Value == null)
                throw new ArgumentNullException(nameof(profileSigningAlgorithm), "Property is not nullable for class SystemConfigOAuthDto.");

            if (roleClaim.IsSet && roleClaim.Value == null)
                throw new ArgumentNullException(nameof(roleClaim), "Property is not nullable for class SystemConfigOAuthDto.");

            if (scope.IsSet && scope.Value == null)
                throw new ArgumentNullException(nameof(scope), "Property is not nullable for class SystemConfigOAuthDto.");

            if (signingAlgorithm.IsSet && signingAlgorithm.Value == null)
                throw new ArgumentNullException(nameof(signingAlgorithm), "Property is not nullable for class SystemConfigOAuthDto.");

            if (storageLabelClaim.IsSet && storageLabelClaim.Value == null)
                throw new ArgumentNullException(nameof(storageLabelClaim), "Property is not nullable for class SystemConfigOAuthDto.");

            if (storageQuotaClaim.IsSet && storageQuotaClaim.Value == null)
                throw new ArgumentNullException(nameof(storageQuotaClaim), "Property is not nullable for class SystemConfigOAuthDto.");

            if (timeout.IsSet && timeout.Value == null)
                throw new ArgumentNullException(nameof(timeout), "Property is not nullable for class SystemConfigOAuthDto.");

            if (tokenEndpointAuthMethod.IsSet && tokenEndpointAuthMethod.Value == null)
                throw new ArgumentNullException(nameof(tokenEndpointAuthMethod), "Property is not nullable for class SystemConfigOAuthDto.");

            return new SystemConfigOAuthDto(autoLaunch.Value!.Value!, autoRegister.Value!.Value!, buttonText.Value!, clientId.Value!, clientSecret.Value!, enabled.Value!.Value!, issuerUrl.Value!, mobileOverrideEnabled.Value!.Value!, mobileRedirectUri.Value!, profileSigningAlgorithm.Value!, roleClaim.Value!, scope.Value!, signingAlgorithm.Value!, storageLabelClaim.Value!, storageQuotaClaim.Value!, timeout.Value!.Value!, tokenEndpointAuthMethod.Value!.Value!, defaultStorageQuota.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="SystemConfigOAuthDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="systemConfigOAuthDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SystemConfigOAuthDto systemConfigOAuthDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, systemConfigOAuthDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SystemConfigOAuthDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="systemConfigOAuthDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SystemConfigOAuthDto systemConfigOAuthDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (systemConfigOAuthDto.ButtonText == null)
                throw new ArgumentNullException(nameof(systemConfigOAuthDto.ButtonText), "Property is required for class SystemConfigOAuthDto.");

            if (systemConfigOAuthDto.ClientId == null)
                throw new ArgumentNullException(nameof(systemConfigOAuthDto.ClientId), "Property is required for class SystemConfigOAuthDto.");

            if (systemConfigOAuthDto.ClientSecret == null)
                throw new ArgumentNullException(nameof(systemConfigOAuthDto.ClientSecret), "Property is required for class SystemConfigOAuthDto.");

            if (systemConfigOAuthDto.IssuerUrl == null)
                throw new ArgumentNullException(nameof(systemConfigOAuthDto.IssuerUrl), "Property is required for class SystemConfigOAuthDto.");

            if (systemConfigOAuthDto.MobileRedirectUri == null)
                throw new ArgumentNullException(nameof(systemConfigOAuthDto.MobileRedirectUri), "Property is required for class SystemConfigOAuthDto.");

            if (systemConfigOAuthDto.ProfileSigningAlgorithm == null)
                throw new ArgumentNullException(nameof(systemConfigOAuthDto.ProfileSigningAlgorithm), "Property is required for class SystemConfigOAuthDto.");

            if (systemConfigOAuthDto.RoleClaim == null)
                throw new ArgumentNullException(nameof(systemConfigOAuthDto.RoleClaim), "Property is required for class SystemConfigOAuthDto.");

            if (systemConfigOAuthDto.Scope == null)
                throw new ArgumentNullException(nameof(systemConfigOAuthDto.Scope), "Property is required for class SystemConfigOAuthDto.");

            if (systemConfigOAuthDto.SigningAlgorithm == null)
                throw new ArgumentNullException(nameof(systemConfigOAuthDto.SigningAlgorithm), "Property is required for class SystemConfigOAuthDto.");

            if (systemConfigOAuthDto.StorageLabelClaim == null)
                throw new ArgumentNullException(nameof(systemConfigOAuthDto.StorageLabelClaim), "Property is required for class SystemConfigOAuthDto.");

            if (systemConfigOAuthDto.StorageQuotaClaim == null)
                throw new ArgumentNullException(nameof(systemConfigOAuthDto.StorageQuotaClaim), "Property is required for class SystemConfigOAuthDto.");

            writer.WriteBoolean("autoLaunch", systemConfigOAuthDto.AutoLaunch);

            writer.WriteBoolean("autoRegister", systemConfigOAuthDto.AutoRegister);

            writer.WriteString("buttonText", systemConfigOAuthDto.ButtonText);

            writer.WriteString("clientId", systemConfigOAuthDto.ClientId);

            writer.WriteString("clientSecret", systemConfigOAuthDto.ClientSecret);

            writer.WriteBoolean("enabled", systemConfigOAuthDto.Enabled);

            writer.WriteString("issuerUrl", systemConfigOAuthDto.IssuerUrl);

            writer.WriteBoolean("mobileOverrideEnabled", systemConfigOAuthDto.MobileOverrideEnabled);

            writer.WriteString("mobileRedirectUri", systemConfigOAuthDto.MobileRedirectUri);

            writer.WriteString("profileSigningAlgorithm", systemConfigOAuthDto.ProfileSigningAlgorithm);

            writer.WriteString("roleClaim", systemConfigOAuthDto.RoleClaim);

            writer.WriteString("scope", systemConfigOAuthDto.Scope);

            writer.WriteString("signingAlgorithm", systemConfigOAuthDto.SigningAlgorithm);

            writer.WriteString("storageLabelClaim", systemConfigOAuthDto.StorageLabelClaim);

            writer.WriteString("storageQuotaClaim", systemConfigOAuthDto.StorageQuotaClaim);

            writer.WriteNumber("timeout", systemConfigOAuthDto.Timeout);

            var tokenEndpointAuthMethodRawValue = OAuthTokenEndpointAuthMethodValueConverter.ToJsonValue(systemConfigOAuthDto.TokenEndpointAuthMethod);
            writer.WriteString("tokenEndpointAuthMethod", tokenEndpointAuthMethodRawValue);

            if (systemConfigOAuthDto.DefaultStorageQuota != null)
                writer.WriteNumber("defaultStorageQuota", systemConfigOAuthDto.DefaultStorageQuota.Value);
            else
                writer.WriteNull("defaultStorageQuota");
        }
    }
}
