// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines TranscodeHWAccel
    /// </summary>
    public enum TranscodeHWAccel
    {
        /// <summary>
        /// Enum Nvenc for value: nvenc
        /// </summary>
        Nvenc = 1,

        /// <summary>
        /// Enum Qsv for value: qsv
        /// </summary>
        Qsv = 2,

        /// <summary>
        /// Enum Vaapi for value: vaapi
        /// </summary>
        Vaapi = 3,

        /// <summary>
        /// Enum Rkmpp for value: rkmpp
        /// </summary>
        Rkmpp = 4,

        /// <summary>
        /// Enum Disabled for value: disabled
        /// </summary>
        Disabled = 5
    }

    /// <summary>
    /// Converts <see cref="TranscodeHWAccel"/> to and from the JSON value
    /// </summary>
    public static class TranscodeHWAccelValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="TranscodeHWAccel"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TranscodeHWAccel FromString(string value)
        {
            if (value.Equals("nvenc"))
                return TranscodeHWAccel.Nvenc;

            if (value.Equals("qsv"))
                return TranscodeHWAccel.Qsv;

            if (value.Equals("vaapi"))
                return TranscodeHWAccel.Vaapi;

            if (value.Equals("rkmpp"))
                return TranscodeHWAccel.Rkmpp;

            if (value.Equals("disabled"))
                return TranscodeHWAccel.Disabled;

            throw new NotImplementedException($"Could not convert value to type TranscodeHWAccel: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="TranscodeHWAccel"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TranscodeHWAccel? FromStringOrDefault(string value)
        {
            if (value.Equals("nvenc"))
                return TranscodeHWAccel.Nvenc;

            if (value.Equals("qsv"))
                return TranscodeHWAccel.Qsv;

            if (value.Equals("vaapi"))
                return TranscodeHWAccel.Vaapi;

            if (value.Equals("rkmpp"))
                return TranscodeHWAccel.Rkmpp;

            if (value.Equals("disabled"))
                return TranscodeHWAccel.Disabled;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TranscodeHWAccel"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(TranscodeHWAccel value)
        {
            if (value == TranscodeHWAccel.Nvenc)
                return "nvenc";

            if (value == TranscodeHWAccel.Qsv)
                return "qsv";

            if (value == TranscodeHWAccel.Vaapi)
                return "vaapi";

            if (value == TranscodeHWAccel.Rkmpp)
                return "rkmpp";

            if (value == TranscodeHWAccel.Disabled)
                return "disabled";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TranscodeHWAccel"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class TranscodeHWAccelJsonConverter : JsonConverter<TranscodeHWAccel>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override TranscodeHWAccel Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            TranscodeHWAccel? result = rawValue == null
                ? null
                : TranscodeHWAccelValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the TranscodeHWAccel to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transcodeHWAccel"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, TranscodeHWAccel transcodeHWAccel, JsonSerializerOptions options)
        {
            writer.WriteStringValue(TranscodeHWAccelValueConverter.ToJsonValue(transcodeHWAccel).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TranscodeHWAccel"/>
    /// </summary>
    public class TranscodeHWAccelNullableJsonConverter : JsonConverter<TranscodeHWAccel?>
    {
        /// <summary>
        /// Returns a TranscodeHWAccel from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override TranscodeHWAccel? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            TranscodeHWAccel? result = rawValue == null
                ? null
                : TranscodeHWAccelValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the TranscodeHWAccel to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transcodeHWAccel"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, TranscodeHWAccel? transcodeHWAccel, JsonSerializerOptions options)
        {
            writer.WriteStringValue(transcodeHWAccel.HasValue ? TranscodeHWAccelValueConverter.ToJsonValue(transcodeHWAccel.Value).ToString() : "null");
        }
    }
}
