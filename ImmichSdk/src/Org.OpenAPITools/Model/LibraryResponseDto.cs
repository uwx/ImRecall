// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// LibraryResponseDto
    /// </summary>
    public partial class LibraryResponseDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LibraryResponseDto" /> class.
        /// </summary>
        /// <param name="assetCount">assetCount</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="exclusionPatterns">exclusionPatterns</param>
        /// <param name="id">id</param>
        /// <param name="importPaths">importPaths</param>
        /// <param name="name">name</param>
        /// <param name="ownerId">ownerId</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="refreshedAt">refreshedAt</param>
        [JsonConstructor]
        public LibraryResponseDto(int assetCount, DateTime createdAt, List<string> exclusionPatterns, string id, List<string> importPaths, string name, string ownerId, DateTime updatedAt, DateTime? refreshedAt = default)
        {
            AssetCount = assetCount;
            CreatedAt = createdAt;
            ExclusionPatterns = exclusionPatterns;
            Id = id;
            ImportPaths = importPaths;
            Name = name;
            OwnerId = ownerId;
            UpdatedAt = updatedAt;
            RefreshedAt = refreshedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets AssetCount
        /// </summary>
        [JsonPropertyName("assetCount")]
        public int AssetCount { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets ExclusionPatterns
        /// </summary>
        [JsonPropertyName("exclusionPatterns")]
        public List<string> ExclusionPatterns { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ImportPaths
        /// </summary>
        [JsonPropertyName("importPaths")]
        public List<string> ImportPaths { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OwnerId
        /// </summary>
        [JsonPropertyName("ownerId")]
        public string OwnerId { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets RefreshedAt
        /// </summary>
        [JsonPropertyName("refreshedAt")]
        public DateTime? RefreshedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LibraryResponseDto {\n");
            sb.Append("  AssetCount: ").Append(AssetCount).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ExclusionPatterns: ").Append(ExclusionPatterns).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImportPaths: ").Append(ImportPaths).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  RefreshedAt: ").Append(RefreshedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="LibraryResponseDto" />
    /// </summary>
    public class LibraryResponseDtoJsonConverter : JsonConverter<LibraryResponseDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize RefreshedAt
        /// </summary>
        public static string RefreshedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="LibraryResponseDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override LibraryResponseDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> assetCount = default;
            Option<DateTime?> createdAt = default;
            Option<List<string>?> exclusionPatterns = default;
            Option<string?> id = default;
            Option<List<string>?> importPaths = default;
            Option<string?> name = default;
            Option<string?> ownerId = default;
            Option<DateTime?> updatedAt = default;
            Option<DateTime?> refreshedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "assetCount":
                            assetCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "exclusionPatterns":
                            exclusionPatterns = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "importPaths":
                            importPaths = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ownerId":
                            ownerId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "updatedAt":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "refreshedAt":
                            refreshedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!assetCount.IsSet)
                throw new ArgumentException("Property is required for class LibraryResponseDto.", nameof(assetCount));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class LibraryResponseDto.", nameof(createdAt));

            if (!exclusionPatterns.IsSet)
                throw new ArgumentException("Property is required for class LibraryResponseDto.", nameof(exclusionPatterns));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class LibraryResponseDto.", nameof(id));

            if (!importPaths.IsSet)
                throw new ArgumentException("Property is required for class LibraryResponseDto.", nameof(importPaths));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class LibraryResponseDto.", nameof(name));

            if (!ownerId.IsSet)
                throw new ArgumentException("Property is required for class LibraryResponseDto.", nameof(ownerId));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class LibraryResponseDto.", nameof(updatedAt));

            if (!refreshedAt.IsSet)
                throw new ArgumentException("Property is required for class LibraryResponseDto.", nameof(refreshedAt));

            if (assetCount.IsSet && assetCount.Value == null)
                throw new ArgumentNullException(nameof(assetCount), "Property is not nullable for class LibraryResponseDto.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class LibraryResponseDto.");

            if (exclusionPatterns.IsSet && exclusionPatterns.Value == null)
                throw new ArgumentNullException(nameof(exclusionPatterns), "Property is not nullable for class LibraryResponseDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class LibraryResponseDto.");

            if (importPaths.IsSet && importPaths.Value == null)
                throw new ArgumentNullException(nameof(importPaths), "Property is not nullable for class LibraryResponseDto.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class LibraryResponseDto.");

            if (ownerId.IsSet && ownerId.Value == null)
                throw new ArgumentNullException(nameof(ownerId), "Property is not nullable for class LibraryResponseDto.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class LibraryResponseDto.");

            return new LibraryResponseDto(assetCount.Value!.Value!, createdAt.Value!.Value!, exclusionPatterns.Value!, id.Value!, importPaths.Value!, name.Value!, ownerId.Value!, updatedAt.Value!.Value!, refreshedAt.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="LibraryResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="libraryResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, LibraryResponseDto libraryResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, libraryResponseDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="LibraryResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="libraryResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, LibraryResponseDto libraryResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (libraryResponseDto.ExclusionPatterns == null)
                throw new ArgumentNullException(nameof(libraryResponseDto.ExclusionPatterns), "Property is required for class LibraryResponseDto.");

            if (libraryResponseDto.Id == null)
                throw new ArgumentNullException(nameof(libraryResponseDto.Id), "Property is required for class LibraryResponseDto.");

            if (libraryResponseDto.ImportPaths == null)
                throw new ArgumentNullException(nameof(libraryResponseDto.ImportPaths), "Property is required for class LibraryResponseDto.");

            if (libraryResponseDto.Name == null)
                throw new ArgumentNullException(nameof(libraryResponseDto.Name), "Property is required for class LibraryResponseDto.");

            if (libraryResponseDto.OwnerId == null)
                throw new ArgumentNullException(nameof(libraryResponseDto.OwnerId), "Property is required for class LibraryResponseDto.");

            writer.WriteNumber("assetCount", libraryResponseDto.AssetCount);

            writer.WriteString("createdAt", libraryResponseDto.CreatedAt.ToString(CreatedAtFormat));

            writer.WritePropertyName("exclusionPatterns");
            JsonSerializer.Serialize(writer, libraryResponseDto.ExclusionPatterns, jsonSerializerOptions);
            writer.WriteString("id", libraryResponseDto.Id);

            writer.WritePropertyName("importPaths");
            JsonSerializer.Serialize(writer, libraryResponseDto.ImportPaths, jsonSerializerOptions);
            writer.WriteString("name", libraryResponseDto.Name);

            writer.WriteString("ownerId", libraryResponseDto.OwnerId);

            writer.WriteString("updatedAt", libraryResponseDto.UpdatedAt.ToString(UpdatedAtFormat));

            if (libraryResponseDto.RefreshedAt != null)
                writer.WriteString("refreshedAt", libraryResponseDto.RefreshedAt.Value.ToString(RefreshedAtFormat));
            else
                writer.WriteNull("refreshedAt");
        }
    }
}
