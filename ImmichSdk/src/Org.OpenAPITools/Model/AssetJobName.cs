// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines AssetJobName
    /// </summary>
    public enum AssetJobName
    {
        /// <summary>
        /// Enum RefreshFaces for value: refresh-faces
        /// </summary>
        RefreshFaces = 1,

        /// <summary>
        /// Enum RefreshMetadata for value: refresh-metadata
        /// </summary>
        RefreshMetadata = 2,

        /// <summary>
        /// Enum RegenerateThumbnail for value: regenerate-thumbnail
        /// </summary>
        RegenerateThumbnail = 3,

        /// <summary>
        /// Enum TranscodeVideo for value: transcode-video
        /// </summary>
        TranscodeVideo = 4
    }

    /// <summary>
    /// Converts <see cref="AssetJobName"/> to and from the JSON value
    /// </summary>
    public static class AssetJobNameValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="AssetJobName"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AssetJobName FromString(string value)
        {
            if (value.Equals("refresh-faces"))
                return AssetJobName.RefreshFaces;

            if (value.Equals("refresh-metadata"))
                return AssetJobName.RefreshMetadata;

            if (value.Equals("regenerate-thumbnail"))
                return AssetJobName.RegenerateThumbnail;

            if (value.Equals("transcode-video"))
                return AssetJobName.TranscodeVideo;

            throw new NotImplementedException($"Could not convert value to type AssetJobName: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="AssetJobName"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AssetJobName? FromStringOrDefault(string value)
        {
            if (value.Equals("refresh-faces"))
                return AssetJobName.RefreshFaces;

            if (value.Equals("refresh-metadata"))
                return AssetJobName.RefreshMetadata;

            if (value.Equals("regenerate-thumbnail"))
                return AssetJobName.RegenerateThumbnail;

            if (value.Equals("transcode-video"))
                return AssetJobName.TranscodeVideo;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AssetJobName"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(AssetJobName value)
        {
            if (value == AssetJobName.RefreshFaces)
                return "refresh-faces";

            if (value == AssetJobName.RefreshMetadata)
                return "refresh-metadata";

            if (value == AssetJobName.RegenerateThumbnail)
                return "regenerate-thumbnail";

            if (value == AssetJobName.TranscodeVideo)
                return "transcode-video";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AssetJobName"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class AssetJobNameJsonConverter : JsonConverter<AssetJobName>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override AssetJobName Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            AssetJobName? result = rawValue == null
                ? null
                : AssetJobNameValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the AssetJobName to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="assetJobName"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, AssetJobName assetJobName, JsonSerializerOptions options)
        {
            writer.WriteStringValue(AssetJobNameValueConverter.ToJsonValue(assetJobName).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AssetJobName"/>
    /// </summary>
    public class AssetJobNameNullableJsonConverter : JsonConverter<AssetJobName?>
    {
        /// <summary>
        /// Returns a AssetJobName from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override AssetJobName? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            AssetJobName? result = rawValue == null
                ? null
                : AssetJobNameValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the AssetJobName to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="assetJobName"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, AssetJobName? assetJobName, JsonSerializerOptions options)
        {
            writer.WriteStringValue(assetJobName.HasValue ? AssetJobNameValueConverter.ToJsonValue(assetJobName.Value).ToString() : "null");
        }
    }
}
