// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines AssetVisibility
    /// </summary>
    public enum AssetVisibility
    {
        /// <summary>
        /// Enum Archive for value: archive
        /// </summary>
        Archive = 1,

        /// <summary>
        /// Enum Timeline for value: timeline
        /// </summary>
        Timeline = 2,

        /// <summary>
        /// Enum Hidden for value: hidden
        /// </summary>
        Hidden = 3,

        /// <summary>
        /// Enum Locked for value: locked
        /// </summary>
        Locked = 4
    }

    /// <summary>
    /// Converts <see cref="AssetVisibility"/> to and from the JSON value
    /// </summary>
    public static class AssetVisibilityValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="AssetVisibility"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AssetVisibility FromString(string value)
        {
            if (value.Equals("archive"))
                return AssetVisibility.Archive;

            if (value.Equals("timeline"))
                return AssetVisibility.Timeline;

            if (value.Equals("hidden"))
                return AssetVisibility.Hidden;

            if (value.Equals("locked"))
                return AssetVisibility.Locked;

            throw new NotImplementedException($"Could not convert value to type AssetVisibility: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="AssetVisibility"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AssetVisibility? FromStringOrDefault(string value)
        {
            if (value.Equals("archive"))
                return AssetVisibility.Archive;

            if (value.Equals("timeline"))
                return AssetVisibility.Timeline;

            if (value.Equals("hidden"))
                return AssetVisibility.Hidden;

            if (value.Equals("locked"))
                return AssetVisibility.Locked;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AssetVisibility"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(AssetVisibility value)
        {
            if (value == AssetVisibility.Archive)
                return "archive";

            if (value == AssetVisibility.Timeline)
                return "timeline";

            if (value == AssetVisibility.Hidden)
                return "hidden";

            if (value == AssetVisibility.Locked)
                return "locked";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AssetVisibility"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class AssetVisibilityJsonConverter : JsonConverter<AssetVisibility>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override AssetVisibility Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            AssetVisibility? result = rawValue == null
                ? null
                : AssetVisibilityValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the AssetVisibility to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="assetVisibility"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, AssetVisibility assetVisibility, JsonSerializerOptions options)
        {
            writer.WriteStringValue(AssetVisibilityValueConverter.ToJsonValue(assetVisibility).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AssetVisibility"/>
    /// </summary>
    public class AssetVisibilityNullableJsonConverter : JsonConverter<AssetVisibility?>
    {
        /// <summary>
        /// Returns a AssetVisibility from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override AssetVisibility? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            AssetVisibility? result = rawValue == null
                ? null
                : AssetVisibilityValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the AssetVisibility to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="assetVisibility"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, AssetVisibility? assetVisibility, JsonSerializerOptions options)
        {
            writer.WriteStringValue(assetVisibility.HasValue ? AssetVisibilityValueConverter.ToJsonValue(assetVisibility.Value).ToString() : "null");
        }
    }
}
