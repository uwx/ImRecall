// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines JobCommand
    /// </summary>
    public enum JobCommand
    {
        /// <summary>
        /// Enum Start for value: start
        /// </summary>
        Start = 1,

        /// <summary>
        /// Enum Pause for value: pause
        /// </summary>
        Pause = 2,

        /// <summary>
        /// Enum Resume for value: resume
        /// </summary>
        Resume = 3,

        /// <summary>
        /// Enum Empty for value: empty
        /// </summary>
        Empty = 4,

        /// <summary>
        /// Enum ClearFailed for value: clear-failed
        /// </summary>
        ClearFailed = 5
    }

    /// <summary>
    /// Converts <see cref="JobCommand"/> to and from the JSON value
    /// </summary>
    public static class JobCommandValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="JobCommand"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static JobCommand FromString(string value)
        {
            if (value.Equals("start"))
                return JobCommand.Start;

            if (value.Equals("pause"))
                return JobCommand.Pause;

            if (value.Equals("resume"))
                return JobCommand.Resume;

            if (value.Equals("empty"))
                return JobCommand.Empty;

            if (value.Equals("clear-failed"))
                return JobCommand.ClearFailed;

            throw new NotImplementedException($"Could not convert value to type JobCommand: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="JobCommand"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static JobCommand? FromStringOrDefault(string value)
        {
            if (value.Equals("start"))
                return JobCommand.Start;

            if (value.Equals("pause"))
                return JobCommand.Pause;

            if (value.Equals("resume"))
                return JobCommand.Resume;

            if (value.Equals("empty"))
                return JobCommand.Empty;

            if (value.Equals("clear-failed"))
                return JobCommand.ClearFailed;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="JobCommand"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(JobCommand value)
        {
            if (value == JobCommand.Start)
                return "start";

            if (value == JobCommand.Pause)
                return "pause";

            if (value == JobCommand.Resume)
                return "resume";

            if (value == JobCommand.Empty)
                return "empty";

            if (value == JobCommand.ClearFailed)
                return "clear-failed";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="JobCommand"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class JobCommandJsonConverter : JsonConverter<JobCommand>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override JobCommand Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            JobCommand? result = rawValue == null
                ? null
                : JobCommandValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the JobCommand to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="jobCommand"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, JobCommand jobCommand, JsonSerializerOptions options)
        {
            writer.WriteStringValue(JobCommandValueConverter.ToJsonValue(jobCommand).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="JobCommand"/>
    /// </summary>
    public class JobCommandNullableJsonConverter : JsonConverter<JobCommand?>
    {
        /// <summary>
        /// Returns a JobCommand from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override JobCommand? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            JobCommand? result = rawValue == null
                ? null
                : JobCommandValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the JobCommand to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="jobCommand"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, JobCommand? jobCommand, JsonSerializerOptions options)
        {
            writer.WriteStringValue(jobCommand.HasValue ? JobCommandValueConverter.ToJsonValue(jobCommand.Value).ToString() : "null");
        }
    }
}
