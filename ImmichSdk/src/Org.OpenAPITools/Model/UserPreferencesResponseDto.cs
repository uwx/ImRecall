// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// UserPreferencesResponseDto
    /// </summary>
    public partial class UserPreferencesResponseDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserPreferencesResponseDto" /> class.
        /// </summary>
        /// <param name="albums">albums</param>
        /// <param name="cast">cast</param>
        /// <param name="download">download</param>
        /// <param name="emailNotifications">emailNotifications</param>
        /// <param name="folders">folders</param>
        /// <param name="memories">memories</param>
        /// <param name="people">people</param>
        /// <param name="purchase">purchase</param>
        /// <param name="ratings">ratings</param>
        /// <param name="sharedLinks">sharedLinks</param>
        /// <param name="tags">tags</param>
        [JsonConstructor]
        public UserPreferencesResponseDto(AlbumsResponse albums, CastResponse cast, DownloadResponse download, EmailNotificationsResponse emailNotifications, FoldersResponse folders, MemoriesResponse memories, PeopleResponse people, PurchaseResponse purchase, RatingsResponse ratings, SharedLinksResponse sharedLinks, TagsResponse tags)
        {
            Albums = albums;
            Cast = cast;
            Download = download;
            EmailNotifications = emailNotifications;
            Folders = folders;
            Memories = memories;
            People = people;
            Purchase = purchase;
            Ratings = ratings;
            SharedLinks = sharedLinks;
            Tags = tags;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Albums
        /// </summary>
        [JsonPropertyName("albums")]
        public AlbumsResponse Albums { get; set; }

        /// <summary>
        /// Gets or Sets Cast
        /// </summary>
        [JsonPropertyName("cast")]
        public CastResponse Cast { get; set; }

        /// <summary>
        /// Gets or Sets Download
        /// </summary>
        [JsonPropertyName("download")]
        public DownloadResponse Download { get; set; }

        /// <summary>
        /// Gets or Sets EmailNotifications
        /// </summary>
        [JsonPropertyName("emailNotifications")]
        public EmailNotificationsResponse EmailNotifications { get; set; }

        /// <summary>
        /// Gets or Sets Folders
        /// </summary>
        [JsonPropertyName("folders")]
        public FoldersResponse Folders { get; set; }

        /// <summary>
        /// Gets or Sets Memories
        /// </summary>
        [JsonPropertyName("memories")]
        public MemoriesResponse Memories { get; set; }

        /// <summary>
        /// Gets or Sets People
        /// </summary>
        [JsonPropertyName("people")]
        public PeopleResponse People { get; set; }

        /// <summary>
        /// Gets or Sets Purchase
        /// </summary>
        [JsonPropertyName("purchase")]
        public PurchaseResponse Purchase { get; set; }

        /// <summary>
        /// Gets or Sets Ratings
        /// </summary>
        [JsonPropertyName("ratings")]
        public RatingsResponse Ratings { get; set; }

        /// <summary>
        /// Gets or Sets SharedLinks
        /// </summary>
        [JsonPropertyName("sharedLinks")]
        public SharedLinksResponse SharedLinks { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [JsonPropertyName("tags")]
        public TagsResponse Tags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserPreferencesResponseDto {\n");
            sb.Append("  Albums: ").Append(Albums).Append("\n");
            sb.Append("  Cast: ").Append(Cast).Append("\n");
            sb.Append("  Download: ").Append(Download).Append("\n");
            sb.Append("  EmailNotifications: ").Append(EmailNotifications).Append("\n");
            sb.Append("  Folders: ").Append(Folders).Append("\n");
            sb.Append("  Memories: ").Append(Memories).Append("\n");
            sb.Append("  People: ").Append(People).Append("\n");
            sb.Append("  Purchase: ").Append(Purchase).Append("\n");
            sb.Append("  Ratings: ").Append(Ratings).Append("\n");
            sb.Append("  SharedLinks: ").Append(SharedLinks).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserPreferencesResponseDto" />
    /// </summary>
    public class UserPreferencesResponseDtoJsonConverter : JsonConverter<UserPreferencesResponseDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="UserPreferencesResponseDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UserPreferencesResponseDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<AlbumsResponse?> albums = default;
            Option<CastResponse?> cast = default;
            Option<DownloadResponse?> download = default;
            Option<EmailNotificationsResponse?> emailNotifications = default;
            Option<FoldersResponse?> folders = default;
            Option<MemoriesResponse?> memories = default;
            Option<PeopleResponse?> people = default;
            Option<PurchaseResponse?> purchase = default;
            Option<RatingsResponse?> ratings = default;
            Option<SharedLinksResponse?> sharedLinks = default;
            Option<TagsResponse?> tags = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "albums":
                            albums = new Option<AlbumsResponse?>(JsonSerializer.Deserialize<AlbumsResponse>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "cast":
                            cast = new Option<CastResponse?>(JsonSerializer.Deserialize<CastResponse>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "download":
                            download = new Option<DownloadResponse?>(JsonSerializer.Deserialize<DownloadResponse>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "emailNotifications":
                            emailNotifications = new Option<EmailNotificationsResponse?>(JsonSerializer.Deserialize<EmailNotificationsResponse>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "folders":
                            folders = new Option<FoldersResponse?>(JsonSerializer.Deserialize<FoldersResponse>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "memories":
                            memories = new Option<MemoriesResponse?>(JsonSerializer.Deserialize<MemoriesResponse>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "people":
                            people = new Option<PeopleResponse?>(JsonSerializer.Deserialize<PeopleResponse>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "purchase":
                            purchase = new Option<PurchaseResponse?>(JsonSerializer.Deserialize<PurchaseResponse>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "ratings":
                            ratings = new Option<RatingsResponse?>(JsonSerializer.Deserialize<RatingsResponse>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "sharedLinks":
                            sharedLinks = new Option<SharedLinksResponse?>(JsonSerializer.Deserialize<SharedLinksResponse>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "tags":
                            tags = new Option<TagsResponse?>(JsonSerializer.Deserialize<TagsResponse>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!albums.IsSet)
                throw new ArgumentException("Property is required for class UserPreferencesResponseDto.", nameof(albums));

            if (!cast.IsSet)
                throw new ArgumentException("Property is required for class UserPreferencesResponseDto.", nameof(cast));

            if (!download.IsSet)
                throw new ArgumentException("Property is required for class UserPreferencesResponseDto.", nameof(download));

            if (!emailNotifications.IsSet)
                throw new ArgumentException("Property is required for class UserPreferencesResponseDto.", nameof(emailNotifications));

            if (!folders.IsSet)
                throw new ArgumentException("Property is required for class UserPreferencesResponseDto.", nameof(folders));

            if (!memories.IsSet)
                throw new ArgumentException("Property is required for class UserPreferencesResponseDto.", nameof(memories));

            if (!people.IsSet)
                throw new ArgumentException("Property is required for class UserPreferencesResponseDto.", nameof(people));

            if (!purchase.IsSet)
                throw new ArgumentException("Property is required for class UserPreferencesResponseDto.", nameof(purchase));

            if (!ratings.IsSet)
                throw new ArgumentException("Property is required for class UserPreferencesResponseDto.", nameof(ratings));

            if (!sharedLinks.IsSet)
                throw new ArgumentException("Property is required for class UserPreferencesResponseDto.", nameof(sharedLinks));

            if (!tags.IsSet)
                throw new ArgumentException("Property is required for class UserPreferencesResponseDto.", nameof(tags));

            if (albums.IsSet && albums.Value == null)
                throw new ArgumentNullException(nameof(albums), "Property is not nullable for class UserPreferencesResponseDto.");

            if (cast.IsSet && cast.Value == null)
                throw new ArgumentNullException(nameof(cast), "Property is not nullable for class UserPreferencesResponseDto.");

            if (download.IsSet && download.Value == null)
                throw new ArgumentNullException(nameof(download), "Property is not nullable for class UserPreferencesResponseDto.");

            if (emailNotifications.IsSet && emailNotifications.Value == null)
                throw new ArgumentNullException(nameof(emailNotifications), "Property is not nullable for class UserPreferencesResponseDto.");

            if (folders.IsSet && folders.Value == null)
                throw new ArgumentNullException(nameof(folders), "Property is not nullable for class UserPreferencesResponseDto.");

            if (memories.IsSet && memories.Value == null)
                throw new ArgumentNullException(nameof(memories), "Property is not nullable for class UserPreferencesResponseDto.");

            if (people.IsSet && people.Value == null)
                throw new ArgumentNullException(nameof(people), "Property is not nullable for class UserPreferencesResponseDto.");

            if (purchase.IsSet && purchase.Value == null)
                throw new ArgumentNullException(nameof(purchase), "Property is not nullable for class UserPreferencesResponseDto.");

            if (ratings.IsSet && ratings.Value == null)
                throw new ArgumentNullException(nameof(ratings), "Property is not nullable for class UserPreferencesResponseDto.");

            if (sharedLinks.IsSet && sharedLinks.Value == null)
                throw new ArgumentNullException(nameof(sharedLinks), "Property is not nullable for class UserPreferencesResponseDto.");

            if (tags.IsSet && tags.Value == null)
                throw new ArgumentNullException(nameof(tags), "Property is not nullable for class UserPreferencesResponseDto.");

            return new UserPreferencesResponseDto(albums.Value!, cast.Value!, download.Value!, emailNotifications.Value!, folders.Value!, memories.Value!, people.Value!, purchase.Value!, ratings.Value!, sharedLinks.Value!, tags.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="UserPreferencesResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userPreferencesResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UserPreferencesResponseDto userPreferencesResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, userPreferencesResponseDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UserPreferencesResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userPreferencesResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UserPreferencesResponseDto userPreferencesResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (userPreferencesResponseDto.Albums == null)
                throw new ArgumentNullException(nameof(userPreferencesResponseDto.Albums), "Property is required for class UserPreferencesResponseDto.");

            if (userPreferencesResponseDto.Cast == null)
                throw new ArgumentNullException(nameof(userPreferencesResponseDto.Cast), "Property is required for class UserPreferencesResponseDto.");

            if (userPreferencesResponseDto.Download == null)
                throw new ArgumentNullException(nameof(userPreferencesResponseDto.Download), "Property is required for class UserPreferencesResponseDto.");

            if (userPreferencesResponseDto.EmailNotifications == null)
                throw new ArgumentNullException(nameof(userPreferencesResponseDto.EmailNotifications), "Property is required for class UserPreferencesResponseDto.");

            if (userPreferencesResponseDto.Folders == null)
                throw new ArgumentNullException(nameof(userPreferencesResponseDto.Folders), "Property is required for class UserPreferencesResponseDto.");

            if (userPreferencesResponseDto.Memories == null)
                throw new ArgumentNullException(nameof(userPreferencesResponseDto.Memories), "Property is required for class UserPreferencesResponseDto.");

            if (userPreferencesResponseDto.People == null)
                throw new ArgumentNullException(nameof(userPreferencesResponseDto.People), "Property is required for class UserPreferencesResponseDto.");

            if (userPreferencesResponseDto.Purchase == null)
                throw new ArgumentNullException(nameof(userPreferencesResponseDto.Purchase), "Property is required for class UserPreferencesResponseDto.");

            if (userPreferencesResponseDto.Ratings == null)
                throw new ArgumentNullException(nameof(userPreferencesResponseDto.Ratings), "Property is required for class UserPreferencesResponseDto.");

            if (userPreferencesResponseDto.SharedLinks == null)
                throw new ArgumentNullException(nameof(userPreferencesResponseDto.SharedLinks), "Property is required for class UserPreferencesResponseDto.");

            if (userPreferencesResponseDto.Tags == null)
                throw new ArgumentNullException(nameof(userPreferencesResponseDto.Tags), "Property is required for class UserPreferencesResponseDto.");

            writer.WritePropertyName("albums");
            JsonSerializer.Serialize(writer, userPreferencesResponseDto.Albums, jsonSerializerOptions);
            writer.WritePropertyName("cast");
            JsonSerializer.Serialize(writer, userPreferencesResponseDto.Cast, jsonSerializerOptions);
            writer.WritePropertyName("download");
            JsonSerializer.Serialize(writer, userPreferencesResponseDto.Download, jsonSerializerOptions);
            writer.WritePropertyName("emailNotifications");
            JsonSerializer.Serialize(writer, userPreferencesResponseDto.EmailNotifications, jsonSerializerOptions);
            writer.WritePropertyName("folders");
            JsonSerializer.Serialize(writer, userPreferencesResponseDto.Folders, jsonSerializerOptions);
            writer.WritePropertyName("memories");
            JsonSerializer.Serialize(writer, userPreferencesResponseDto.Memories, jsonSerializerOptions);
            writer.WritePropertyName("people");
            JsonSerializer.Serialize(writer, userPreferencesResponseDto.People, jsonSerializerOptions);
            writer.WritePropertyName("purchase");
            JsonSerializer.Serialize(writer, userPreferencesResponseDto.Purchase, jsonSerializerOptions);
            writer.WritePropertyName("ratings");
            JsonSerializer.Serialize(writer, userPreferencesResponseDto.Ratings, jsonSerializerOptions);
            writer.WritePropertyName("sharedLinks");
            JsonSerializer.Serialize(writer, userPreferencesResponseDto.SharedLinks, jsonSerializerOptions);
            writer.WritePropertyName("tags");
            JsonSerializer.Serialize(writer, userPreferencesResponseDto.Tags, jsonSerializerOptions);
        }
    }
}
