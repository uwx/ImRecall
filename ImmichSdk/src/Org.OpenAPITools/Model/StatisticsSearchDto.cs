// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// StatisticsSearchDto
    /// </summary>
    public partial class StatisticsSearchDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsSearchDto" /> class.
        /// </summary>
        /// <param name="albumIds">albumIds</param>
        /// <param name="city">city</param>
        /// <param name="country">country</param>
        /// <param name="createdAfter">createdAfter</param>
        /// <param name="createdBefore">createdBefore</param>
        /// <param name="description">description</param>
        /// <param name="deviceId">deviceId</param>
        /// <param name="isEncoded">isEncoded</param>
        /// <param name="isFavorite">isFavorite</param>
        /// <param name="isMotion">isMotion</param>
        /// <param name="isNotInAlbum">isNotInAlbum</param>
        /// <param name="isOffline">isOffline</param>
        /// <param name="lensModel">lensModel</param>
        /// <param name="libraryId">libraryId</param>
        /// <param name="make">make</param>
        /// <param name="model">model</param>
        /// <param name="personIds">personIds</param>
        /// <param name="rating">rating</param>
        /// <param name="state">state</param>
        /// <param name="tagIds">tagIds</param>
        /// <param name="takenAfter">takenAfter</param>
        /// <param name="takenBefore">takenBefore</param>
        /// <param name="trashedAfter">trashedAfter</param>
        /// <param name="trashedBefore">trashedBefore</param>
        /// <param name="type">type</param>
        /// <param name="updatedAfter">updatedAfter</param>
        /// <param name="updatedBefore">updatedBefore</param>
        /// <param name="visibility">visibility</param>
        [JsonConstructor]
        public StatisticsSearchDto(Option<List<Guid>?> albumIds = default, Option<string?> city = default, Option<string?> country = default, Option<DateTime?> createdAfter = default, Option<DateTime?> createdBefore = default, Option<string?> description = default, Option<string?> deviceId = default, Option<bool?> isEncoded = default, Option<bool?> isFavorite = default, Option<bool?> isMotion = default, Option<bool?> isNotInAlbum = default, Option<bool?> isOffline = default, Option<string?> lensModel = default, Option<Guid?> libraryId = default, Option<string?> make = default, Option<string?> model = default, Option<List<Guid>?> personIds = default, Option<decimal?> rating = default, Option<string?> state = default, Option<List<Guid>?> tagIds = default, Option<DateTime?> takenAfter = default, Option<DateTime?> takenBefore = default, Option<DateTime?> trashedAfter = default, Option<DateTime?> trashedBefore = default, Option<AssetTypeEnum?> type = default, Option<DateTime?> updatedAfter = default, Option<DateTime?> updatedBefore = default, Option<AssetVisibility?> visibility = default)
        {
            AlbumIdsOption = albumIds;
            CityOption = city;
            CountryOption = country;
            CreatedAfterOption = createdAfter;
            CreatedBeforeOption = createdBefore;
            DescriptionOption = description;
            DeviceIdOption = deviceId;
            IsEncodedOption = isEncoded;
            IsFavoriteOption = isFavorite;
            IsMotionOption = isMotion;
            IsNotInAlbumOption = isNotInAlbum;
            IsOfflineOption = isOffline;
            LensModelOption = lensModel;
            LibraryIdOption = libraryId;
            MakeOption = make;
            ModelOption = model;
            PersonIdsOption = personIds;
            RatingOption = rating;
            StateOption = state;
            TagIdsOption = tagIds;
            TakenAfterOption = takenAfter;
            TakenBeforeOption = takenBefore;
            TrashedAfterOption = trashedAfter;
            TrashedBeforeOption = trashedBefore;
            TypeOption = type;
            UpdatedAfterOption = updatedAfter;
            UpdatedBeforeOption = updatedBefore;
            VisibilityOption = visibility;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AssetTypeEnum?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public AssetTypeEnum? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Visibility
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AssetVisibility?> VisibilityOption { get; private set; }

        /// <summary>
        /// Gets or Sets Visibility
        /// </summary>
        [JsonPropertyName("visibility")]
        public AssetVisibility? Visibility { get { return this.VisibilityOption; } set { this.VisibilityOption = new(value); } }

        /// <summary>
        /// Used to track the state of AlbumIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Guid>?> AlbumIdsOption { get; private set; }

        /// <summary>
        /// Gets or Sets AlbumIds
        /// </summary>
        [JsonPropertyName("albumIds")]
        public List<Guid>? AlbumIds { get { return this.AlbumIdsOption; } set { this.AlbumIdsOption = new(value); } }

        /// <summary>
        /// Used to track the state of City
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CityOption { get; private set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [JsonPropertyName("city")]
        public string? City { get { return this.CityOption; } set { this.CityOption = new(value); } }

        /// <summary>
        /// Used to track the state of Country
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CountryOption { get; private set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [JsonPropertyName("country")]
        public string? Country { get { return this.CountryOption; } set { this.CountryOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedAfter
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedAfterOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAfter
        /// </summary>
        [JsonPropertyName("createdAfter")]
        public DateTime? CreatedAfter { get { return this.CreatedAfterOption; } set { this.CreatedAfterOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedBefore
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedBeforeOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedBefore
        /// </summary>
        [JsonPropertyName("createdBefore")]
        public DateTime? CreatedBefore { get { return this.CreatedBeforeOption; } set { this.CreatedBeforeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of DeviceId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DeviceIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets DeviceId
        /// </summary>
        [JsonPropertyName("deviceId")]
        public string? DeviceId { get { return this.DeviceIdOption; } set { this.DeviceIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsEncoded
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsEncodedOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsEncoded
        /// </summary>
        [JsonPropertyName("isEncoded")]
        public bool? IsEncoded { get { return this.IsEncodedOption; } set { this.IsEncodedOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsFavorite
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsFavoriteOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsFavorite
        /// </summary>
        [JsonPropertyName("isFavorite")]
        public bool? IsFavorite { get { return this.IsFavoriteOption; } set { this.IsFavoriteOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsMotion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsMotionOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsMotion
        /// </summary>
        [JsonPropertyName("isMotion")]
        public bool? IsMotion { get { return this.IsMotionOption; } set { this.IsMotionOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsNotInAlbum
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsNotInAlbumOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsNotInAlbum
        /// </summary>
        [JsonPropertyName("isNotInAlbum")]
        public bool? IsNotInAlbum { get { return this.IsNotInAlbumOption; } set { this.IsNotInAlbumOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsOffline
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsOfflineOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsOffline
        /// </summary>
        [JsonPropertyName("isOffline")]
        public bool? IsOffline { get { return this.IsOfflineOption; } set { this.IsOfflineOption = new(value); } }

        /// <summary>
        /// Used to track the state of LensModel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LensModelOption { get; private set; }

        /// <summary>
        /// Gets or Sets LensModel
        /// </summary>
        [JsonPropertyName("lensModel")]
        public string? LensModel { get { return this.LensModelOption; } set { this.LensModelOption = new(value); } }

        /// <summary>
        /// Used to track the state of LibraryId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> LibraryIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets LibraryId
        /// </summary>
        [JsonPropertyName("libraryId")]
        public Guid? LibraryId { get { return this.LibraryIdOption; } set { this.LibraryIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Make
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MakeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Make
        /// </summary>
        [JsonPropertyName("make")]
        public string? Make { get { return this.MakeOption; } set { this.MakeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Model
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ModelOption { get; private set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [JsonPropertyName("model")]
        public string? Model { get { return this.ModelOption; } set { this.ModelOption = new(value); } }

        /// <summary>
        /// Used to track the state of PersonIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Guid>?> PersonIdsOption { get; private set; }

        /// <summary>
        /// Gets or Sets PersonIds
        /// </summary>
        [JsonPropertyName("personIds")]
        public List<Guid>? PersonIds { get { return this.PersonIdsOption; } set { this.PersonIdsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Rating
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> RatingOption { get; private set; }

        /// <summary>
        /// Gets or Sets Rating
        /// </summary>
        [JsonPropertyName("rating")]
        public decimal? Rating { get { return this.RatingOption; } set { this.RatingOption = new(value); } }

        /// <summary>
        /// Used to track the state of State
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StateOption { get; private set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonPropertyName("state")]
        public string? State { get { return this.StateOption; } set { this.StateOption = new(value); } }

        /// <summary>
        /// Used to track the state of TagIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Guid>?> TagIdsOption { get; private set; }

        /// <summary>
        /// Gets or Sets TagIds
        /// </summary>
        [JsonPropertyName("tagIds")]
        public List<Guid>? TagIds { get { return this.TagIdsOption; } set { this.TagIdsOption = new(value); } }

        /// <summary>
        /// Used to track the state of TakenAfter
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> TakenAfterOption { get; private set; }

        /// <summary>
        /// Gets or Sets TakenAfter
        /// </summary>
        [JsonPropertyName("takenAfter")]
        public DateTime? TakenAfter { get { return this.TakenAfterOption; } set { this.TakenAfterOption = new(value); } }

        /// <summary>
        /// Used to track the state of TakenBefore
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> TakenBeforeOption { get; private set; }

        /// <summary>
        /// Gets or Sets TakenBefore
        /// </summary>
        [JsonPropertyName("takenBefore")]
        public DateTime? TakenBefore { get { return this.TakenBeforeOption; } set { this.TakenBeforeOption = new(value); } }

        /// <summary>
        /// Used to track the state of TrashedAfter
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> TrashedAfterOption { get; private set; }

        /// <summary>
        /// Gets or Sets TrashedAfter
        /// </summary>
        [JsonPropertyName("trashedAfter")]
        public DateTime? TrashedAfter { get { return this.TrashedAfterOption; } set { this.TrashedAfterOption = new(value); } }

        /// <summary>
        /// Used to track the state of TrashedBefore
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> TrashedBeforeOption { get; private set; }

        /// <summary>
        /// Gets or Sets TrashedBefore
        /// </summary>
        [JsonPropertyName("trashedBefore")]
        public DateTime? TrashedBefore { get { return this.TrashedBeforeOption; } set { this.TrashedBeforeOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAfter
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> UpdatedAfterOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedAfter
        /// </summary>
        [JsonPropertyName("updatedAfter")]
        public DateTime? UpdatedAfter { get { return this.UpdatedAfterOption; } set { this.UpdatedAfterOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpdatedBefore
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> UpdatedBeforeOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedBefore
        /// </summary>
        [JsonPropertyName("updatedBefore")]
        public DateTime? UpdatedBefore { get { return this.UpdatedBeforeOption; } set { this.UpdatedBeforeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StatisticsSearchDto {\n");
            sb.Append("  AlbumIds: ").Append(AlbumIds).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  CreatedAfter: ").Append(CreatedAfter).Append("\n");
            sb.Append("  CreatedBefore: ").Append(CreatedBefore).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("  IsEncoded: ").Append(IsEncoded).Append("\n");
            sb.Append("  IsFavorite: ").Append(IsFavorite).Append("\n");
            sb.Append("  IsMotion: ").Append(IsMotion).Append("\n");
            sb.Append("  IsNotInAlbum: ").Append(IsNotInAlbum).Append("\n");
            sb.Append("  IsOffline: ").Append(IsOffline).Append("\n");
            sb.Append("  LensModel: ").Append(LensModel).Append("\n");
            sb.Append("  LibraryId: ").Append(LibraryId).Append("\n");
            sb.Append("  Make: ").Append(Make).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  PersonIds: ").Append(PersonIds).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  TagIds: ").Append(TagIds).Append("\n");
            sb.Append("  TakenAfter: ").Append(TakenAfter).Append("\n");
            sb.Append("  TakenBefore: ").Append(TakenBefore).Append("\n");
            sb.Append("  TrashedAfter: ").Append(TrashedAfter).Append("\n");
            sb.Append("  TrashedBefore: ").Append(TrashedBefore).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UpdatedAfter: ").Append(UpdatedAfter).Append("\n");
            sb.Append("  UpdatedBefore: ").Append(UpdatedBefore).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Rating (decimal) maximum
            if (this.RatingOption.IsSet && this.RatingOption.Value > (decimal)5)
            {
                yield return new ValidationResult("Invalid value for Rating, must be a value less than or equal to 5.", new [] { "Rating" });
            }

            // Rating (decimal) minimum
            if (this.RatingOption.IsSet && this.RatingOption.Value < (decimal)-1)
            {
                yield return new ValidationResult("Invalid value for Rating, must be a value greater than or equal to -1.", new [] { "Rating" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="StatisticsSearchDto" />
    /// </summary>
    public class StatisticsSearchDtoJsonConverter : JsonConverter<StatisticsSearchDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedAfter
        /// </summary>
        public static string CreatedAfterFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize CreatedBefore
        /// </summary>
        public static string CreatedBeforeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize TakenAfter
        /// </summary>
        public static string TakenAfterFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize TakenBefore
        /// </summary>
        public static string TakenBeforeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize TrashedAfter
        /// </summary>
        public static string TrashedAfterFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize TrashedBefore
        /// </summary>
        public static string TrashedBeforeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAfter
        /// </summary>
        public static string UpdatedAfterFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedBefore
        /// </summary>
        public static string UpdatedBeforeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="StatisticsSearchDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override StatisticsSearchDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<Guid>?> albumIds = default;
            Option<string?> city = default;
            Option<string?> country = default;
            Option<DateTime?> createdAfter = default;
            Option<DateTime?> createdBefore = default;
            Option<string?> description = default;
            Option<string?> deviceId = default;
            Option<bool?> isEncoded = default;
            Option<bool?> isFavorite = default;
            Option<bool?> isMotion = default;
            Option<bool?> isNotInAlbum = default;
            Option<bool?> isOffline = default;
            Option<string?> lensModel = default;
            Option<Guid?> libraryId = default;
            Option<string?> make = default;
            Option<string?> model = default;
            Option<List<Guid>?> personIds = default;
            Option<decimal?> rating = default;
            Option<string?> state = default;
            Option<List<Guid>?> tagIds = default;
            Option<DateTime?> takenAfter = default;
            Option<DateTime?> takenBefore = default;
            Option<DateTime?> trashedAfter = default;
            Option<DateTime?> trashedBefore = default;
            Option<AssetTypeEnum?> type = default;
            Option<DateTime?> updatedAfter = default;
            Option<DateTime?> updatedBefore = default;
            Option<AssetVisibility?> visibility = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "albumIds":
                            albumIds = new Option<List<Guid>?>(JsonSerializer.Deserialize<List<Guid>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "city":
                            city = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "country":
                            country = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "createdAfter":
                            createdAfter = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "createdBefore":
                            createdBefore = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "deviceId":
                            deviceId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "isEncoded":
                            isEncoded = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "isFavorite":
                            isFavorite = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "isMotion":
                            isMotion = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "isNotInAlbum":
                            isNotInAlbum = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "isOffline":
                            isOffline = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "lensModel":
                            lensModel = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "libraryId":
                            libraryId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "make":
                            make = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "model":
                            model = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "personIds":
                            personIds = new Option<List<Guid>?>(JsonSerializer.Deserialize<List<Guid>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "rating":
                            rating = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "state":
                            state = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "tagIds":
                            tagIds = new Option<List<Guid>?>(JsonSerializer.Deserialize<List<Guid>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "takenAfter":
                            takenAfter = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "takenBefore":
                            takenBefore = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "trashedAfter":
                            trashedAfter = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "trashedBefore":
                            trashedBefore = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<AssetTypeEnum?>(AssetTypeEnumValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "updatedAfter":
                            updatedAfter = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updatedBefore":
                            updatedBefore = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "visibility":
                            string? visibilityRawValue = utf8JsonReader.GetString();
                            if (visibilityRawValue != null)
                                visibility = new Option<AssetVisibility?>(AssetVisibilityValueConverter.FromStringOrDefault(visibilityRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (albumIds.IsSet && albumIds.Value == null)
                throw new ArgumentNullException(nameof(albumIds), "Property is not nullable for class StatisticsSearchDto.");

            if (createdAfter.IsSet && createdAfter.Value == null)
                throw new ArgumentNullException(nameof(createdAfter), "Property is not nullable for class StatisticsSearchDto.");

            if (createdBefore.IsSet && createdBefore.Value == null)
                throw new ArgumentNullException(nameof(createdBefore), "Property is not nullable for class StatisticsSearchDto.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class StatisticsSearchDto.");

            if (deviceId.IsSet && deviceId.Value == null)
                throw new ArgumentNullException(nameof(deviceId), "Property is not nullable for class StatisticsSearchDto.");

            if (isEncoded.IsSet && isEncoded.Value == null)
                throw new ArgumentNullException(nameof(isEncoded), "Property is not nullable for class StatisticsSearchDto.");

            if (isFavorite.IsSet && isFavorite.Value == null)
                throw new ArgumentNullException(nameof(isFavorite), "Property is not nullable for class StatisticsSearchDto.");

            if (isMotion.IsSet && isMotion.Value == null)
                throw new ArgumentNullException(nameof(isMotion), "Property is not nullable for class StatisticsSearchDto.");

            if (isNotInAlbum.IsSet && isNotInAlbum.Value == null)
                throw new ArgumentNullException(nameof(isNotInAlbum), "Property is not nullable for class StatisticsSearchDto.");

            if (isOffline.IsSet && isOffline.Value == null)
                throw new ArgumentNullException(nameof(isOffline), "Property is not nullable for class StatisticsSearchDto.");

            if (make.IsSet && make.Value == null)
                throw new ArgumentNullException(nameof(make), "Property is not nullable for class StatisticsSearchDto.");

            if (personIds.IsSet && personIds.Value == null)
                throw new ArgumentNullException(nameof(personIds), "Property is not nullable for class StatisticsSearchDto.");

            if (rating.IsSet && rating.Value == null)
                throw new ArgumentNullException(nameof(rating), "Property is not nullable for class StatisticsSearchDto.");

            if (takenAfter.IsSet && takenAfter.Value == null)
                throw new ArgumentNullException(nameof(takenAfter), "Property is not nullable for class StatisticsSearchDto.");

            if (takenBefore.IsSet && takenBefore.Value == null)
                throw new ArgumentNullException(nameof(takenBefore), "Property is not nullable for class StatisticsSearchDto.");

            if (trashedAfter.IsSet && trashedAfter.Value == null)
                throw new ArgumentNullException(nameof(trashedAfter), "Property is not nullable for class StatisticsSearchDto.");

            if (trashedBefore.IsSet && trashedBefore.Value == null)
                throw new ArgumentNullException(nameof(trashedBefore), "Property is not nullable for class StatisticsSearchDto.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class StatisticsSearchDto.");

            if (updatedAfter.IsSet && updatedAfter.Value == null)
                throw new ArgumentNullException(nameof(updatedAfter), "Property is not nullable for class StatisticsSearchDto.");

            if (updatedBefore.IsSet && updatedBefore.Value == null)
                throw new ArgumentNullException(nameof(updatedBefore), "Property is not nullable for class StatisticsSearchDto.");

            if (visibility.IsSet && visibility.Value == null)
                throw new ArgumentNullException(nameof(visibility), "Property is not nullable for class StatisticsSearchDto.");

            return new StatisticsSearchDto(albumIds, city, country, createdAfter, createdBefore, description, deviceId, isEncoded, isFavorite, isMotion, isNotInAlbum, isOffline, lensModel, libraryId, make, model, personIds, rating, state, tagIds, takenAfter, takenBefore, trashedAfter, trashedBefore, type, updatedAfter, updatedBefore, visibility);
        }

        /// <summary>
        /// Serializes a <see cref="StatisticsSearchDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="statisticsSearchDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, StatisticsSearchDto statisticsSearchDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, statisticsSearchDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="StatisticsSearchDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="statisticsSearchDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, StatisticsSearchDto statisticsSearchDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (statisticsSearchDto.AlbumIdsOption.IsSet && statisticsSearchDto.AlbumIds == null)
                throw new ArgumentNullException(nameof(statisticsSearchDto.AlbumIds), "Property is required for class StatisticsSearchDto.");

            if (statisticsSearchDto.DescriptionOption.IsSet && statisticsSearchDto.Description == null)
                throw new ArgumentNullException(nameof(statisticsSearchDto.Description), "Property is required for class StatisticsSearchDto.");

            if (statisticsSearchDto.DeviceIdOption.IsSet && statisticsSearchDto.DeviceId == null)
                throw new ArgumentNullException(nameof(statisticsSearchDto.DeviceId), "Property is required for class StatisticsSearchDto.");

            if (statisticsSearchDto.MakeOption.IsSet && statisticsSearchDto.Make == null)
                throw new ArgumentNullException(nameof(statisticsSearchDto.Make), "Property is required for class StatisticsSearchDto.");

            if (statisticsSearchDto.PersonIdsOption.IsSet && statisticsSearchDto.PersonIds == null)
                throw new ArgumentNullException(nameof(statisticsSearchDto.PersonIds), "Property is required for class StatisticsSearchDto.");

            if (statisticsSearchDto.AlbumIdsOption.IsSet)
            {
                writer.WritePropertyName("albumIds");
                JsonSerializer.Serialize(writer, statisticsSearchDto.AlbumIds, jsonSerializerOptions);
            }
            if (statisticsSearchDto.CityOption.IsSet)
                if (statisticsSearchDto.CityOption.Value != null)
                    writer.WriteString("city", statisticsSearchDto.City);
                else
                    writer.WriteNull("city");

            if (statisticsSearchDto.CountryOption.IsSet)
                if (statisticsSearchDto.CountryOption.Value != null)
                    writer.WriteString("country", statisticsSearchDto.Country);
                else
                    writer.WriteNull("country");

            if (statisticsSearchDto.CreatedAfterOption.IsSet)
                writer.WriteString("createdAfter", statisticsSearchDto.CreatedAfterOption.Value!.Value.ToString(CreatedAfterFormat));

            if (statisticsSearchDto.CreatedBeforeOption.IsSet)
                writer.WriteString("createdBefore", statisticsSearchDto.CreatedBeforeOption.Value!.Value.ToString(CreatedBeforeFormat));

            if (statisticsSearchDto.DescriptionOption.IsSet)
                writer.WriteString("description", statisticsSearchDto.Description);

            if (statisticsSearchDto.DeviceIdOption.IsSet)
                writer.WriteString("deviceId", statisticsSearchDto.DeviceId);

            if (statisticsSearchDto.IsEncodedOption.IsSet)
                writer.WriteBoolean("isEncoded", statisticsSearchDto.IsEncodedOption.Value!.Value);

            if (statisticsSearchDto.IsFavoriteOption.IsSet)
                writer.WriteBoolean("isFavorite", statisticsSearchDto.IsFavoriteOption.Value!.Value);

            if (statisticsSearchDto.IsMotionOption.IsSet)
                writer.WriteBoolean("isMotion", statisticsSearchDto.IsMotionOption.Value!.Value);

            if (statisticsSearchDto.IsNotInAlbumOption.IsSet)
                writer.WriteBoolean("isNotInAlbum", statisticsSearchDto.IsNotInAlbumOption.Value!.Value);

            if (statisticsSearchDto.IsOfflineOption.IsSet)
                writer.WriteBoolean("isOffline", statisticsSearchDto.IsOfflineOption.Value!.Value);

            if (statisticsSearchDto.LensModelOption.IsSet)
                if (statisticsSearchDto.LensModelOption.Value != null)
                    writer.WriteString("lensModel", statisticsSearchDto.LensModel);
                else
                    writer.WriteNull("lensModel");

            if (statisticsSearchDto.LibraryIdOption.IsSet)
                if (statisticsSearchDto.LibraryIdOption.Value != null)
                    writer.WriteString("libraryId", statisticsSearchDto.LibraryIdOption.Value!.Value);
                else
                    writer.WriteNull("libraryId");

            if (statisticsSearchDto.MakeOption.IsSet)
                writer.WriteString("make", statisticsSearchDto.Make);

            if (statisticsSearchDto.ModelOption.IsSet)
                if (statisticsSearchDto.ModelOption.Value != null)
                    writer.WriteString("model", statisticsSearchDto.Model);
                else
                    writer.WriteNull("model");

            if (statisticsSearchDto.PersonIdsOption.IsSet)
            {
                writer.WritePropertyName("personIds");
                JsonSerializer.Serialize(writer, statisticsSearchDto.PersonIds, jsonSerializerOptions);
            }
            if (statisticsSearchDto.RatingOption.IsSet)
                writer.WriteNumber("rating", statisticsSearchDto.RatingOption.Value!.Value);

            if (statisticsSearchDto.StateOption.IsSet)
                if (statisticsSearchDto.StateOption.Value != null)
                    writer.WriteString("state", statisticsSearchDto.State);
                else
                    writer.WriteNull("state");

            if (statisticsSearchDto.TagIdsOption.IsSet)
                if (statisticsSearchDto.TagIdsOption.Value != null)
                {
                    writer.WritePropertyName("tagIds");
                    JsonSerializer.Serialize(writer, statisticsSearchDto.TagIds, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("tagIds");
            if (statisticsSearchDto.TakenAfterOption.IsSet)
                writer.WriteString("takenAfter", statisticsSearchDto.TakenAfterOption.Value!.Value.ToString(TakenAfterFormat));

            if (statisticsSearchDto.TakenBeforeOption.IsSet)
                writer.WriteString("takenBefore", statisticsSearchDto.TakenBeforeOption.Value!.Value.ToString(TakenBeforeFormat));

            if (statisticsSearchDto.TrashedAfterOption.IsSet)
                writer.WriteString("trashedAfter", statisticsSearchDto.TrashedAfterOption.Value!.Value.ToString(TrashedAfterFormat));

            if (statisticsSearchDto.TrashedBeforeOption.IsSet)
                writer.WriteString("trashedBefore", statisticsSearchDto.TrashedBeforeOption.Value!.Value.ToString(TrashedBeforeFormat));

            if (statisticsSearchDto.TypeOption.IsSet)
            {
                var typeRawValue = AssetTypeEnumValueConverter.ToJsonValue(statisticsSearchDto.Type!.Value);
                writer.WriteString("type", typeRawValue);
            }
            if (statisticsSearchDto.UpdatedAfterOption.IsSet)
                writer.WriteString("updatedAfter", statisticsSearchDto.UpdatedAfterOption.Value!.Value.ToString(UpdatedAfterFormat));

            if (statisticsSearchDto.UpdatedBeforeOption.IsSet)
                writer.WriteString("updatedBefore", statisticsSearchDto.UpdatedBeforeOption.Value!.Value.ToString(UpdatedBeforeFormat));

            if (statisticsSearchDto.VisibilityOption.IsSet)
            {
                var visibilityRawValue = AssetVisibilityValueConverter.ToJsonValue(statisticsSearchDto.Visibility!.Value);
                writer.WriteString("visibility", visibilityRawValue);
            }
        }
    }
}
