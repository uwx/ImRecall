// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines TranscodePolicy
    /// </summary>
    public enum TranscodePolicy
    {
        /// <summary>
        /// Enum All for value: all
        /// </summary>
        All = 1,

        /// <summary>
        /// Enum Optimal for value: optimal
        /// </summary>
        Optimal = 2,

        /// <summary>
        /// Enum Bitrate for value: bitrate
        /// </summary>
        Bitrate = 3,

        /// <summary>
        /// Enum Required for value: required
        /// </summary>
        Required = 4,

        /// <summary>
        /// Enum Disabled for value: disabled
        /// </summary>
        Disabled = 5
    }

    /// <summary>
    /// Converts <see cref="TranscodePolicy"/> to and from the JSON value
    /// </summary>
    public static class TranscodePolicyValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="TranscodePolicy"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TranscodePolicy FromString(string value)
        {
            if (value.Equals("all"))
                return TranscodePolicy.All;

            if (value.Equals("optimal"))
                return TranscodePolicy.Optimal;

            if (value.Equals("bitrate"))
                return TranscodePolicy.Bitrate;

            if (value.Equals("required"))
                return TranscodePolicy.Required;

            if (value.Equals("disabled"))
                return TranscodePolicy.Disabled;

            throw new NotImplementedException($"Could not convert value to type TranscodePolicy: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="TranscodePolicy"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TranscodePolicy? FromStringOrDefault(string value)
        {
            if (value.Equals("all"))
                return TranscodePolicy.All;

            if (value.Equals("optimal"))
                return TranscodePolicy.Optimal;

            if (value.Equals("bitrate"))
                return TranscodePolicy.Bitrate;

            if (value.Equals("required"))
                return TranscodePolicy.Required;

            if (value.Equals("disabled"))
                return TranscodePolicy.Disabled;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TranscodePolicy"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(TranscodePolicy value)
        {
            if (value == TranscodePolicy.All)
                return "all";

            if (value == TranscodePolicy.Optimal)
                return "optimal";

            if (value == TranscodePolicy.Bitrate)
                return "bitrate";

            if (value == TranscodePolicy.Required)
                return "required";

            if (value == TranscodePolicy.Disabled)
                return "disabled";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TranscodePolicy"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class TranscodePolicyJsonConverter : JsonConverter<TranscodePolicy>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override TranscodePolicy Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            TranscodePolicy? result = rawValue == null
                ? null
                : TranscodePolicyValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the TranscodePolicy to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transcodePolicy"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, TranscodePolicy transcodePolicy, JsonSerializerOptions options)
        {
            writer.WriteStringValue(TranscodePolicyValueConverter.ToJsonValue(transcodePolicy).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TranscodePolicy"/>
    /// </summary>
    public class TranscodePolicyNullableJsonConverter : JsonConverter<TranscodePolicy?>
    {
        /// <summary>
        /// Returns a TranscodePolicy from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override TranscodePolicy? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            TranscodePolicy? result = rawValue == null
                ? null
                : TranscodePolicyValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the TranscodePolicy to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transcodePolicy"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, TranscodePolicy? transcodePolicy, JsonSerializerOptions options)
        {
            writer.WriteStringValue(transcodePolicy.HasValue ? TranscodePolicyValueConverter.ToJsonValue(transcodePolicy.Value).ToString() : "null");
        }
    }
}
