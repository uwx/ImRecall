// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AssetMetadataUpsertItemDto
    /// </summary>
    public partial class AssetMetadataUpsertItemDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetMetadataUpsertItemDto" /> class.
        /// </summary>
        /// <param name="key">key</param>
        /// <param name="value">value</param>
        [JsonConstructor]
        public AssetMetadataUpsertItemDto(AssetMetadataKey key, Object value)
        {
            Key = key;
            Value = value;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [JsonPropertyName("key")]
        public AssetMetadataKey Key { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [JsonPropertyName("value")]
        public Object Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AssetMetadataUpsertItemDto {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AssetMetadataUpsertItemDto" />
    /// </summary>
    public class AssetMetadataUpsertItemDtoJsonConverter : JsonConverter<AssetMetadataUpsertItemDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="AssetMetadataUpsertItemDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AssetMetadataUpsertItemDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<AssetMetadataKey?> key = default;
            Option<Object?> value = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "key":
                            string? keyRawValue = utf8JsonReader.GetString();
                            if (keyRawValue != null)
                                key = new Option<AssetMetadataKey?>(AssetMetadataKeyValueConverter.FromStringOrDefault(keyRawValue));
                            break;
                        case "value":
                            value = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!key.IsSet)
                throw new ArgumentException("Property is required for class AssetMetadataUpsertItemDto.", nameof(key));

            if (!value.IsSet)
                throw new ArgumentException("Property is required for class AssetMetadataUpsertItemDto.", nameof(value));

            if (key.IsSet && key.Value == null)
                throw new ArgumentNullException(nameof(key), "Property is not nullable for class AssetMetadataUpsertItemDto.");

            if (value.IsSet && value.Value == null)
                throw new ArgumentNullException(nameof(value), "Property is not nullable for class AssetMetadataUpsertItemDto.");

            return new AssetMetadataUpsertItemDto(key.Value!.Value!, value.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="AssetMetadataUpsertItemDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="assetMetadataUpsertItemDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AssetMetadataUpsertItemDto assetMetadataUpsertItemDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, assetMetadataUpsertItemDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AssetMetadataUpsertItemDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="assetMetadataUpsertItemDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AssetMetadataUpsertItemDto assetMetadataUpsertItemDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (assetMetadataUpsertItemDto.Value == null)
                throw new ArgumentNullException(nameof(assetMetadataUpsertItemDto.Value), "Property is required for class AssetMetadataUpsertItemDto.");

            var keyRawValue = AssetMetadataKeyValueConverter.ToJsonValue(assetMetadataUpsertItemDto.Key);
            writer.WriteString("key", keyRawValue);

            writer.WritePropertyName("value");
            JsonSerializer.Serialize(writer, assetMetadataUpsertItemDto.Value, jsonSerializerOptions);
        }
    }
}
