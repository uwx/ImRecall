// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// UserResponseDto
    /// </summary>
    public partial class UserResponseDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserResponseDto" /> class.
        /// </summary>
        /// <param name="avatarColor">avatarColor</param>
        /// <param name="email">email</param>
        /// <param name="id">id</param>
        /// <param name="name">name</param>
        /// <param name="profileChangedAt">profileChangedAt</param>
        /// <param name="profileImagePath">profileImagePath</param>
        [JsonConstructor]
        public UserResponseDto(UserAvatarColor avatarColor, string email, string id, string name, DateTime profileChangedAt, string profileImagePath)
        {
            AvatarColor = avatarColor;
            Email = email;
            Id = id;
            Name = name;
            ProfileChangedAt = profileChangedAt;
            ProfileImagePath = profileImagePath;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets AvatarColor
        /// </summary>
        [JsonPropertyName("avatarColor")]
        public UserAvatarColor AvatarColor { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [JsonPropertyName("email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ProfileChangedAt
        /// </summary>
        [JsonPropertyName("profileChangedAt")]
        public DateTime ProfileChangedAt { get; set; }

        /// <summary>
        /// Gets or Sets ProfileImagePath
        /// </summary>
        [JsonPropertyName("profileImagePath")]
        public string ProfileImagePath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserResponseDto {\n");
            sb.Append("  AvatarColor: ").Append(AvatarColor).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ProfileChangedAt: ").Append(ProfileChangedAt).Append("\n");
            sb.Append("  ProfileImagePath: ").Append(ProfileImagePath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserResponseDto" />
    /// </summary>
    public class UserResponseDtoJsonConverter : JsonConverter<UserResponseDto>
    {
        /// <summary>
        /// The format to use to serialize ProfileChangedAt
        /// </summary>
        public static string ProfileChangedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="UserResponseDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UserResponseDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<UserAvatarColor?> avatarColor = default;
            Option<string?> email = default;
            Option<string?> id = default;
            Option<string?> name = default;
            Option<DateTime?> profileChangedAt = default;
            Option<string?> profileImagePath = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "avatarColor":
                            string? avatarColorRawValue = utf8JsonReader.GetString();
                            if (avatarColorRawValue != null)
                                avatarColor = new Option<UserAvatarColor?>(UserAvatarColorValueConverter.FromStringOrDefault(avatarColorRawValue));
                            break;
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "profileChangedAt":
                            profileChangedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "profileImagePath":
                            profileImagePath = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!avatarColor.IsSet)
                throw new ArgumentException("Property is required for class UserResponseDto.", nameof(avatarColor));

            if (!email.IsSet)
                throw new ArgumentException("Property is required for class UserResponseDto.", nameof(email));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class UserResponseDto.", nameof(id));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class UserResponseDto.", nameof(name));

            if (!profileChangedAt.IsSet)
                throw new ArgumentException("Property is required for class UserResponseDto.", nameof(profileChangedAt));

            if (!profileImagePath.IsSet)
                throw new ArgumentException("Property is required for class UserResponseDto.", nameof(profileImagePath));

            if (avatarColor.IsSet && avatarColor.Value == null)
                throw new ArgumentNullException(nameof(avatarColor), "Property is not nullable for class UserResponseDto.");

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class UserResponseDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class UserResponseDto.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class UserResponseDto.");

            if (profileChangedAt.IsSet && profileChangedAt.Value == null)
                throw new ArgumentNullException(nameof(profileChangedAt), "Property is not nullable for class UserResponseDto.");

            if (profileImagePath.IsSet && profileImagePath.Value == null)
                throw new ArgumentNullException(nameof(profileImagePath), "Property is not nullable for class UserResponseDto.");

            return new UserResponseDto(avatarColor.Value!.Value!, email.Value!, id.Value!, name.Value!, profileChangedAt.Value!.Value!, profileImagePath.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="UserResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UserResponseDto userResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, userResponseDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UserResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UserResponseDto userResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (userResponseDto.Email == null)
                throw new ArgumentNullException(nameof(userResponseDto.Email), "Property is required for class UserResponseDto.");

            if (userResponseDto.Id == null)
                throw new ArgumentNullException(nameof(userResponseDto.Id), "Property is required for class UserResponseDto.");

            if (userResponseDto.Name == null)
                throw new ArgumentNullException(nameof(userResponseDto.Name), "Property is required for class UserResponseDto.");

            if (userResponseDto.ProfileImagePath == null)
                throw new ArgumentNullException(nameof(userResponseDto.ProfileImagePath), "Property is required for class UserResponseDto.");

            var avatarColorRawValue = UserAvatarColorValueConverter.ToJsonValue(userResponseDto.AvatarColor);
            writer.WriteString("avatarColor", avatarColorRawValue);

            writer.WriteString("email", userResponseDto.Email);

            writer.WriteString("id", userResponseDto.Id);

            writer.WriteString("name", userResponseDto.Name);

            writer.WriteString("profileChangedAt", userResponseDto.ProfileChangedAt.ToString(ProfileChangedAtFormat));

            writer.WriteString("profileImagePath", userResponseDto.ProfileImagePath);
        }
    }
}
