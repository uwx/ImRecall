// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines Colorspace
    /// </summary>
    public enum Colorspace
    {
        /// <summary>
        /// Enum Srgb for value: srgb
        /// </summary>
        Srgb = 1,

        /// <summary>
        /// Enum P3 for value: p3
        /// </summary>
        P3 = 2
    }

    /// <summary>
    /// Converts <see cref="Colorspace"/> to and from the JSON value
    /// </summary>
    public static class ColorspaceValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="Colorspace"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Colorspace FromString(string value)
        {
            if (value.Equals("srgb"))
                return Colorspace.Srgb;

            if (value.Equals("p3"))
                return Colorspace.P3;

            throw new NotImplementedException($"Could not convert value to type Colorspace: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="Colorspace"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Colorspace? FromStringOrDefault(string value)
        {
            if (value.Equals("srgb"))
                return Colorspace.Srgb;

            if (value.Equals("p3"))
                return Colorspace.P3;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="Colorspace"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(Colorspace value)
        {
            if (value == Colorspace.Srgb)
                return "srgb";

            if (value == Colorspace.P3)
                return "p3";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Colorspace"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ColorspaceJsonConverter : JsonConverter<Colorspace>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Colorspace Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Colorspace? result = rawValue == null
                ? null
                : ColorspaceValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the Colorspace to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="colorspace"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Colorspace colorspace, JsonSerializerOptions options)
        {
            writer.WriteStringValue(ColorspaceValueConverter.ToJsonValue(colorspace).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Colorspace"/>
    /// </summary>
    public class ColorspaceNullableJsonConverter : JsonConverter<Colorspace?>
    {
        /// <summary>
        /// Returns a Colorspace from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Colorspace? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Colorspace? result = rawValue == null
                ? null
                : ColorspaceValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the Colorspace to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="colorspace"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Colorspace? colorspace, JsonSerializerOptions options)
        {
            writer.WriteStringValue(colorspace.HasValue ? ColorspaceValueConverter.ToJsonValue(colorspace.Value).ToString() : "null");
        }
    }
}
