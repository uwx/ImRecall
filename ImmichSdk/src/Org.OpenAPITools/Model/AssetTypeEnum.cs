// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines AssetTypeEnum
    /// </summary>
    public enum AssetTypeEnum
    {
        /// <summary>
        /// Enum IMAGE for value: IMAGE
        /// </summary>
        IMAGE = 1,

        /// <summary>
        /// Enum VIDEO for value: VIDEO
        /// </summary>
        VIDEO = 2,

        /// <summary>
        /// Enum AUDIO for value: AUDIO
        /// </summary>
        AUDIO = 3,

        /// <summary>
        /// Enum OTHER for value: OTHER
        /// </summary>
        OTHER = 4
    }

    /// <summary>
    /// Converts <see cref="AssetTypeEnum"/> to and from the JSON value
    /// </summary>
    public static class AssetTypeEnumValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="AssetTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AssetTypeEnum FromString(string value)
        {
            if (value.Equals("IMAGE"))
                return AssetTypeEnum.IMAGE;

            if (value.Equals("VIDEO"))
                return AssetTypeEnum.VIDEO;

            if (value.Equals("AUDIO"))
                return AssetTypeEnum.AUDIO;

            if (value.Equals("OTHER"))
                return AssetTypeEnum.OTHER;

            throw new NotImplementedException($"Could not convert value to type AssetTypeEnum: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="AssetTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AssetTypeEnum? FromStringOrDefault(string value)
        {
            if (value.Equals("IMAGE"))
                return AssetTypeEnum.IMAGE;

            if (value.Equals("VIDEO"))
                return AssetTypeEnum.VIDEO;

            if (value.Equals("AUDIO"))
                return AssetTypeEnum.AUDIO;

            if (value.Equals("OTHER"))
                return AssetTypeEnum.OTHER;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AssetTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(AssetTypeEnum value)
        {
            if (value == AssetTypeEnum.IMAGE)
                return "IMAGE";

            if (value == AssetTypeEnum.VIDEO)
                return "VIDEO";

            if (value == AssetTypeEnum.AUDIO)
                return "AUDIO";

            if (value == AssetTypeEnum.OTHER)
                return "OTHER";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AssetTypeEnum"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class AssetTypeEnumJsonConverter : JsonConverter<AssetTypeEnum>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override AssetTypeEnum Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            AssetTypeEnum? result = rawValue == null
                ? null
                : AssetTypeEnumValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the AssetTypeEnum to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="assetTypeEnum"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, AssetTypeEnum assetTypeEnum, JsonSerializerOptions options)
        {
            writer.WriteStringValue(AssetTypeEnumValueConverter.ToJsonValue(assetTypeEnum).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AssetTypeEnum"/>
    /// </summary>
    public class AssetTypeEnumNullableJsonConverter : JsonConverter<AssetTypeEnum?>
    {
        /// <summary>
        /// Returns a AssetTypeEnum from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override AssetTypeEnum? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            AssetTypeEnum? result = rawValue == null
                ? null
                : AssetTypeEnumValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the AssetTypeEnum to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="assetTypeEnum"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, AssetTypeEnum? assetTypeEnum, JsonSerializerOptions options)
        {
            writer.WriteStringValue(assetTypeEnum.HasValue ? AssetTypeEnumValueConverter.ToJsonValue(assetTypeEnum.Value).ToString() : "null");
        }
    }
}
