// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ServerAboutResponseDto
    /// </summary>
    public partial class ServerAboutResponseDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerAboutResponseDto" /> class.
        /// </summary>
        /// <param name="licensed">licensed</param>
        /// <param name="varVersion">varVersion</param>
        /// <param name="versionUrl">versionUrl</param>
        /// <param name="build">build</param>
        /// <param name="buildImage">buildImage</param>
        /// <param name="buildImageUrl">buildImageUrl</param>
        /// <param name="buildUrl">buildUrl</param>
        /// <param name="exiftool">exiftool</param>
        /// <param name="ffmpeg">ffmpeg</param>
        /// <param name="imagemagick">imagemagick</param>
        /// <param name="libvips">libvips</param>
        /// <param name="nodejs">nodejs</param>
        /// <param name="repository">repository</param>
        /// <param name="repositoryUrl">repositoryUrl</param>
        /// <param name="sourceCommit">sourceCommit</param>
        /// <param name="sourceRef">sourceRef</param>
        /// <param name="sourceUrl">sourceUrl</param>
        /// <param name="thirdPartyBugFeatureUrl">thirdPartyBugFeatureUrl</param>
        /// <param name="thirdPartyDocumentationUrl">thirdPartyDocumentationUrl</param>
        /// <param name="thirdPartySourceUrl">thirdPartySourceUrl</param>
        /// <param name="thirdPartySupportUrl">thirdPartySupportUrl</param>
        [JsonConstructor]
        public ServerAboutResponseDto(bool licensed, string varVersion, string versionUrl, Option<string?> build = default, Option<string?> buildImage = default, Option<string?> buildImageUrl = default, Option<string?> buildUrl = default, Option<string?> exiftool = default, Option<string?> ffmpeg = default, Option<string?> imagemagick = default, Option<string?> libvips = default, Option<string?> nodejs = default, Option<string?> repository = default, Option<string?> repositoryUrl = default, Option<string?> sourceCommit = default, Option<string?> sourceRef = default, Option<string?> sourceUrl = default, Option<string?> thirdPartyBugFeatureUrl = default, Option<string?> thirdPartyDocumentationUrl = default, Option<string?> thirdPartySourceUrl = default, Option<string?> thirdPartySupportUrl = default)
        {
            Licensed = licensed;
            VarVersion = varVersion;
            VersionUrl = versionUrl;
            BuildOption = build;
            BuildImageOption = buildImage;
            BuildImageUrlOption = buildImageUrl;
            BuildUrlOption = buildUrl;
            ExiftoolOption = exiftool;
            FfmpegOption = ffmpeg;
            ImagemagickOption = imagemagick;
            LibvipsOption = libvips;
            NodejsOption = nodejs;
            RepositoryOption = repository;
            RepositoryUrlOption = repositoryUrl;
            SourceCommitOption = sourceCommit;
            SourceRefOption = sourceRef;
            SourceUrlOption = sourceUrl;
            ThirdPartyBugFeatureUrlOption = thirdPartyBugFeatureUrl;
            ThirdPartyDocumentationUrlOption = thirdPartyDocumentationUrl;
            ThirdPartySourceUrlOption = thirdPartySourceUrl;
            ThirdPartySupportUrlOption = thirdPartySupportUrl;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Licensed
        /// </summary>
        [JsonPropertyName("licensed")]
        public bool Licensed { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [JsonPropertyName("version")]
        public string VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets VersionUrl
        /// </summary>
        [JsonPropertyName("versionUrl")]
        public string VersionUrl { get; set; }

        /// <summary>
        /// Used to track the state of Build
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BuildOption { get; private set; }

        /// <summary>
        /// Gets or Sets Build
        /// </summary>
        [JsonPropertyName("build")]
        public string? Build { get { return this.BuildOption; } set { this.BuildOption = new(value); } }

        /// <summary>
        /// Used to track the state of BuildImage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BuildImageOption { get; private set; }

        /// <summary>
        /// Gets or Sets BuildImage
        /// </summary>
        [JsonPropertyName("buildImage")]
        public string? BuildImage { get { return this.BuildImageOption; } set { this.BuildImageOption = new(value); } }

        /// <summary>
        /// Used to track the state of BuildImageUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BuildImageUrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets BuildImageUrl
        /// </summary>
        [JsonPropertyName("buildImageUrl")]
        public string? BuildImageUrl { get { return this.BuildImageUrlOption; } set { this.BuildImageUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of BuildUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BuildUrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets BuildUrl
        /// </summary>
        [JsonPropertyName("buildUrl")]
        public string? BuildUrl { get { return this.BuildUrlOption; } set { this.BuildUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of Exiftool
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExiftoolOption { get; private set; }

        /// <summary>
        /// Gets or Sets Exiftool
        /// </summary>
        [JsonPropertyName("exiftool")]
        public string? Exiftool { get { return this.ExiftoolOption; } set { this.ExiftoolOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ffmpeg
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FfmpegOption { get; private set; }

        /// <summary>
        /// Gets or Sets Ffmpeg
        /// </summary>
        [JsonPropertyName("ffmpeg")]
        public string? Ffmpeg { get { return this.FfmpegOption; } set { this.FfmpegOption = new(value); } }

        /// <summary>
        /// Used to track the state of Imagemagick
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ImagemagickOption { get; private set; }

        /// <summary>
        /// Gets or Sets Imagemagick
        /// </summary>
        [JsonPropertyName("imagemagick")]
        public string? Imagemagick { get { return this.ImagemagickOption; } set { this.ImagemagickOption = new(value); } }

        /// <summary>
        /// Used to track the state of Libvips
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LibvipsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Libvips
        /// </summary>
        [JsonPropertyName("libvips")]
        public string? Libvips { get { return this.LibvipsOption; } set { this.LibvipsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Nodejs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NodejsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Nodejs
        /// </summary>
        [JsonPropertyName("nodejs")]
        public string? Nodejs { get { return this.NodejsOption; } set { this.NodejsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Repository
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RepositoryOption { get; private set; }

        /// <summary>
        /// Gets or Sets Repository
        /// </summary>
        [JsonPropertyName("repository")]
        public string? Repository { get { return this.RepositoryOption; } set { this.RepositoryOption = new(value); } }

        /// <summary>
        /// Used to track the state of RepositoryUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RepositoryUrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets RepositoryUrl
        /// </summary>
        [JsonPropertyName("repositoryUrl")]
        public string? RepositoryUrl { get { return this.RepositoryUrlOption; } set { this.RepositoryUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of SourceCommit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SourceCommitOption { get; private set; }

        /// <summary>
        /// Gets or Sets SourceCommit
        /// </summary>
        [JsonPropertyName("sourceCommit")]
        public string? SourceCommit { get { return this.SourceCommitOption; } set { this.SourceCommitOption = new(value); } }

        /// <summary>
        /// Used to track the state of SourceRef
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SourceRefOption { get; private set; }

        /// <summary>
        /// Gets or Sets SourceRef
        /// </summary>
        [JsonPropertyName("sourceRef")]
        public string? SourceRef { get { return this.SourceRefOption; } set { this.SourceRefOption = new(value); } }

        /// <summary>
        /// Used to track the state of SourceUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SourceUrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets SourceUrl
        /// </summary>
        [JsonPropertyName("sourceUrl")]
        public string? SourceUrl { get { return this.SourceUrlOption; } set { this.SourceUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of ThirdPartyBugFeatureUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ThirdPartyBugFeatureUrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets ThirdPartyBugFeatureUrl
        /// </summary>
        [JsonPropertyName("thirdPartyBugFeatureUrl")]
        public string? ThirdPartyBugFeatureUrl { get { return this.ThirdPartyBugFeatureUrlOption; } set { this.ThirdPartyBugFeatureUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of ThirdPartyDocumentationUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ThirdPartyDocumentationUrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets ThirdPartyDocumentationUrl
        /// </summary>
        [JsonPropertyName("thirdPartyDocumentationUrl")]
        public string? ThirdPartyDocumentationUrl { get { return this.ThirdPartyDocumentationUrlOption; } set { this.ThirdPartyDocumentationUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of ThirdPartySourceUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ThirdPartySourceUrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets ThirdPartySourceUrl
        /// </summary>
        [JsonPropertyName("thirdPartySourceUrl")]
        public string? ThirdPartySourceUrl { get { return this.ThirdPartySourceUrlOption; } set { this.ThirdPartySourceUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of ThirdPartySupportUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ThirdPartySupportUrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets ThirdPartySupportUrl
        /// </summary>
        [JsonPropertyName("thirdPartySupportUrl")]
        public string? ThirdPartySupportUrl { get { return this.ThirdPartySupportUrlOption; } set { this.ThirdPartySupportUrlOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServerAboutResponseDto {\n");
            sb.Append("  Licensed: ").Append(Licensed).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  VersionUrl: ").Append(VersionUrl).Append("\n");
            sb.Append("  Build: ").Append(Build).Append("\n");
            sb.Append("  BuildImage: ").Append(BuildImage).Append("\n");
            sb.Append("  BuildImageUrl: ").Append(BuildImageUrl).Append("\n");
            sb.Append("  BuildUrl: ").Append(BuildUrl).Append("\n");
            sb.Append("  Exiftool: ").Append(Exiftool).Append("\n");
            sb.Append("  Ffmpeg: ").Append(Ffmpeg).Append("\n");
            sb.Append("  Imagemagick: ").Append(Imagemagick).Append("\n");
            sb.Append("  Libvips: ").Append(Libvips).Append("\n");
            sb.Append("  Nodejs: ").Append(Nodejs).Append("\n");
            sb.Append("  Repository: ").Append(Repository).Append("\n");
            sb.Append("  RepositoryUrl: ").Append(RepositoryUrl).Append("\n");
            sb.Append("  SourceCommit: ").Append(SourceCommit).Append("\n");
            sb.Append("  SourceRef: ").Append(SourceRef).Append("\n");
            sb.Append("  SourceUrl: ").Append(SourceUrl).Append("\n");
            sb.Append("  ThirdPartyBugFeatureUrl: ").Append(ThirdPartyBugFeatureUrl).Append("\n");
            sb.Append("  ThirdPartyDocumentationUrl: ").Append(ThirdPartyDocumentationUrl).Append("\n");
            sb.Append("  ThirdPartySourceUrl: ").Append(ThirdPartySourceUrl).Append("\n");
            sb.Append("  ThirdPartySupportUrl: ").Append(ThirdPartySupportUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ServerAboutResponseDto" />
    /// </summary>
    public class ServerAboutResponseDtoJsonConverter : JsonConverter<ServerAboutResponseDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="ServerAboutResponseDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ServerAboutResponseDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> licensed = default;
            Option<string?> varVersion = default;
            Option<string?> versionUrl = default;
            Option<string?> build = default;
            Option<string?> buildImage = default;
            Option<string?> buildImageUrl = default;
            Option<string?> buildUrl = default;
            Option<string?> exiftool = default;
            Option<string?> ffmpeg = default;
            Option<string?> imagemagick = default;
            Option<string?> libvips = default;
            Option<string?> nodejs = default;
            Option<string?> repository = default;
            Option<string?> repositoryUrl = default;
            Option<string?> sourceCommit = default;
            Option<string?> sourceRef = default;
            Option<string?> sourceUrl = default;
            Option<string?> thirdPartyBugFeatureUrl = default;
            Option<string?> thirdPartyDocumentationUrl = default;
            Option<string?> thirdPartySourceUrl = default;
            Option<string?> thirdPartySupportUrl = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "licensed":
                            licensed = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "version":
                            varVersion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "versionUrl":
                            versionUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "build":
                            build = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "buildImage":
                            buildImage = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "buildImageUrl":
                            buildImageUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "buildUrl":
                            buildUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "exiftool":
                            exiftool = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ffmpeg":
                            ffmpeg = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "imagemagick":
                            imagemagick = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "libvips":
                            libvips = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "nodejs":
                            nodejs = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "repository":
                            repository = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "repositoryUrl":
                            repositoryUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "sourceCommit":
                            sourceCommit = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "sourceRef":
                            sourceRef = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "sourceUrl":
                            sourceUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "thirdPartyBugFeatureUrl":
                            thirdPartyBugFeatureUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "thirdPartyDocumentationUrl":
                            thirdPartyDocumentationUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "thirdPartySourceUrl":
                            thirdPartySourceUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "thirdPartySupportUrl":
                            thirdPartySupportUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!licensed.IsSet)
                throw new ArgumentException("Property is required for class ServerAboutResponseDto.", nameof(licensed));

            if (!varVersion.IsSet)
                throw new ArgumentException("Property is required for class ServerAboutResponseDto.", nameof(varVersion));

            if (!versionUrl.IsSet)
                throw new ArgumentException("Property is required for class ServerAboutResponseDto.", nameof(versionUrl));

            if (licensed.IsSet && licensed.Value == null)
                throw new ArgumentNullException(nameof(licensed), "Property is not nullable for class ServerAboutResponseDto.");

            if (varVersion.IsSet && varVersion.Value == null)
                throw new ArgumentNullException(nameof(varVersion), "Property is not nullable for class ServerAboutResponseDto.");

            if (versionUrl.IsSet && versionUrl.Value == null)
                throw new ArgumentNullException(nameof(versionUrl), "Property is not nullable for class ServerAboutResponseDto.");

            if (build.IsSet && build.Value == null)
                throw new ArgumentNullException(nameof(build), "Property is not nullable for class ServerAboutResponseDto.");

            if (buildImage.IsSet && buildImage.Value == null)
                throw new ArgumentNullException(nameof(buildImage), "Property is not nullable for class ServerAboutResponseDto.");

            if (buildImageUrl.IsSet && buildImageUrl.Value == null)
                throw new ArgumentNullException(nameof(buildImageUrl), "Property is not nullable for class ServerAboutResponseDto.");

            if (buildUrl.IsSet && buildUrl.Value == null)
                throw new ArgumentNullException(nameof(buildUrl), "Property is not nullable for class ServerAboutResponseDto.");

            if (exiftool.IsSet && exiftool.Value == null)
                throw new ArgumentNullException(nameof(exiftool), "Property is not nullable for class ServerAboutResponseDto.");

            if (ffmpeg.IsSet && ffmpeg.Value == null)
                throw new ArgumentNullException(nameof(ffmpeg), "Property is not nullable for class ServerAboutResponseDto.");

            if (imagemagick.IsSet && imagemagick.Value == null)
                throw new ArgumentNullException(nameof(imagemagick), "Property is not nullable for class ServerAboutResponseDto.");

            if (libvips.IsSet && libvips.Value == null)
                throw new ArgumentNullException(nameof(libvips), "Property is not nullable for class ServerAboutResponseDto.");

            if (nodejs.IsSet && nodejs.Value == null)
                throw new ArgumentNullException(nameof(nodejs), "Property is not nullable for class ServerAboutResponseDto.");

            if (repository.IsSet && repository.Value == null)
                throw new ArgumentNullException(nameof(repository), "Property is not nullable for class ServerAboutResponseDto.");

            if (repositoryUrl.IsSet && repositoryUrl.Value == null)
                throw new ArgumentNullException(nameof(repositoryUrl), "Property is not nullable for class ServerAboutResponseDto.");

            if (sourceCommit.IsSet && sourceCommit.Value == null)
                throw new ArgumentNullException(nameof(sourceCommit), "Property is not nullable for class ServerAboutResponseDto.");

            if (sourceRef.IsSet && sourceRef.Value == null)
                throw new ArgumentNullException(nameof(sourceRef), "Property is not nullable for class ServerAboutResponseDto.");

            if (sourceUrl.IsSet && sourceUrl.Value == null)
                throw new ArgumentNullException(nameof(sourceUrl), "Property is not nullable for class ServerAboutResponseDto.");

            if (thirdPartyBugFeatureUrl.IsSet && thirdPartyBugFeatureUrl.Value == null)
                throw new ArgumentNullException(nameof(thirdPartyBugFeatureUrl), "Property is not nullable for class ServerAboutResponseDto.");

            if (thirdPartyDocumentationUrl.IsSet && thirdPartyDocumentationUrl.Value == null)
                throw new ArgumentNullException(nameof(thirdPartyDocumentationUrl), "Property is not nullable for class ServerAboutResponseDto.");

            if (thirdPartySourceUrl.IsSet && thirdPartySourceUrl.Value == null)
                throw new ArgumentNullException(nameof(thirdPartySourceUrl), "Property is not nullable for class ServerAboutResponseDto.");

            if (thirdPartySupportUrl.IsSet && thirdPartySupportUrl.Value == null)
                throw new ArgumentNullException(nameof(thirdPartySupportUrl), "Property is not nullable for class ServerAboutResponseDto.");

            return new ServerAboutResponseDto(licensed.Value!.Value!, varVersion.Value!, versionUrl.Value!, build, buildImage, buildImageUrl, buildUrl, exiftool, ffmpeg, imagemagick, libvips, nodejs, repository, repositoryUrl, sourceCommit, sourceRef, sourceUrl, thirdPartyBugFeatureUrl, thirdPartyDocumentationUrl, thirdPartySourceUrl, thirdPartySupportUrl);
        }

        /// <summary>
        /// Serializes a <see cref="ServerAboutResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="serverAboutResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ServerAboutResponseDto serverAboutResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, serverAboutResponseDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ServerAboutResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="serverAboutResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ServerAboutResponseDto serverAboutResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (serverAboutResponseDto.VarVersion == null)
                throw new ArgumentNullException(nameof(serverAboutResponseDto.VarVersion), "Property is required for class ServerAboutResponseDto.");

            if (serverAboutResponseDto.VersionUrl == null)
                throw new ArgumentNullException(nameof(serverAboutResponseDto.VersionUrl), "Property is required for class ServerAboutResponseDto.");

            if (serverAboutResponseDto.BuildOption.IsSet && serverAboutResponseDto.Build == null)
                throw new ArgumentNullException(nameof(serverAboutResponseDto.Build), "Property is required for class ServerAboutResponseDto.");

            if (serverAboutResponseDto.BuildImageOption.IsSet && serverAboutResponseDto.BuildImage == null)
                throw new ArgumentNullException(nameof(serverAboutResponseDto.BuildImage), "Property is required for class ServerAboutResponseDto.");

            if (serverAboutResponseDto.BuildImageUrlOption.IsSet && serverAboutResponseDto.BuildImageUrl == null)
                throw new ArgumentNullException(nameof(serverAboutResponseDto.BuildImageUrl), "Property is required for class ServerAboutResponseDto.");

            if (serverAboutResponseDto.BuildUrlOption.IsSet && serverAboutResponseDto.BuildUrl == null)
                throw new ArgumentNullException(nameof(serverAboutResponseDto.BuildUrl), "Property is required for class ServerAboutResponseDto.");

            if (serverAboutResponseDto.ExiftoolOption.IsSet && serverAboutResponseDto.Exiftool == null)
                throw new ArgumentNullException(nameof(serverAboutResponseDto.Exiftool), "Property is required for class ServerAboutResponseDto.");

            if (serverAboutResponseDto.FfmpegOption.IsSet && serverAboutResponseDto.Ffmpeg == null)
                throw new ArgumentNullException(nameof(serverAboutResponseDto.Ffmpeg), "Property is required for class ServerAboutResponseDto.");

            if (serverAboutResponseDto.ImagemagickOption.IsSet && serverAboutResponseDto.Imagemagick == null)
                throw new ArgumentNullException(nameof(serverAboutResponseDto.Imagemagick), "Property is required for class ServerAboutResponseDto.");

            if (serverAboutResponseDto.LibvipsOption.IsSet && serverAboutResponseDto.Libvips == null)
                throw new ArgumentNullException(nameof(serverAboutResponseDto.Libvips), "Property is required for class ServerAboutResponseDto.");

            if (serverAboutResponseDto.NodejsOption.IsSet && serverAboutResponseDto.Nodejs == null)
                throw new ArgumentNullException(nameof(serverAboutResponseDto.Nodejs), "Property is required for class ServerAboutResponseDto.");

            if (serverAboutResponseDto.RepositoryOption.IsSet && serverAboutResponseDto.Repository == null)
                throw new ArgumentNullException(nameof(serverAboutResponseDto.Repository), "Property is required for class ServerAboutResponseDto.");

            if (serverAboutResponseDto.RepositoryUrlOption.IsSet && serverAboutResponseDto.RepositoryUrl == null)
                throw new ArgumentNullException(nameof(serverAboutResponseDto.RepositoryUrl), "Property is required for class ServerAboutResponseDto.");

            if (serverAboutResponseDto.SourceCommitOption.IsSet && serverAboutResponseDto.SourceCommit == null)
                throw new ArgumentNullException(nameof(serverAboutResponseDto.SourceCommit), "Property is required for class ServerAboutResponseDto.");

            if (serverAboutResponseDto.SourceRefOption.IsSet && serverAboutResponseDto.SourceRef == null)
                throw new ArgumentNullException(nameof(serverAboutResponseDto.SourceRef), "Property is required for class ServerAboutResponseDto.");

            if (serverAboutResponseDto.SourceUrlOption.IsSet && serverAboutResponseDto.SourceUrl == null)
                throw new ArgumentNullException(nameof(serverAboutResponseDto.SourceUrl), "Property is required for class ServerAboutResponseDto.");

            if (serverAboutResponseDto.ThirdPartyBugFeatureUrlOption.IsSet && serverAboutResponseDto.ThirdPartyBugFeatureUrl == null)
                throw new ArgumentNullException(nameof(serverAboutResponseDto.ThirdPartyBugFeatureUrl), "Property is required for class ServerAboutResponseDto.");

            if (serverAboutResponseDto.ThirdPartyDocumentationUrlOption.IsSet && serverAboutResponseDto.ThirdPartyDocumentationUrl == null)
                throw new ArgumentNullException(nameof(serverAboutResponseDto.ThirdPartyDocumentationUrl), "Property is required for class ServerAboutResponseDto.");

            if (serverAboutResponseDto.ThirdPartySourceUrlOption.IsSet && serverAboutResponseDto.ThirdPartySourceUrl == null)
                throw new ArgumentNullException(nameof(serverAboutResponseDto.ThirdPartySourceUrl), "Property is required for class ServerAboutResponseDto.");

            if (serverAboutResponseDto.ThirdPartySupportUrlOption.IsSet && serverAboutResponseDto.ThirdPartySupportUrl == null)
                throw new ArgumentNullException(nameof(serverAboutResponseDto.ThirdPartySupportUrl), "Property is required for class ServerAboutResponseDto.");

            writer.WriteBoolean("licensed", serverAboutResponseDto.Licensed);

            writer.WriteString("version", serverAboutResponseDto.VarVersion);

            writer.WriteString("versionUrl", serverAboutResponseDto.VersionUrl);

            if (serverAboutResponseDto.BuildOption.IsSet)
                writer.WriteString("build", serverAboutResponseDto.Build);

            if (serverAboutResponseDto.BuildImageOption.IsSet)
                writer.WriteString("buildImage", serverAboutResponseDto.BuildImage);

            if (serverAboutResponseDto.BuildImageUrlOption.IsSet)
                writer.WriteString("buildImageUrl", serverAboutResponseDto.BuildImageUrl);

            if (serverAboutResponseDto.BuildUrlOption.IsSet)
                writer.WriteString("buildUrl", serverAboutResponseDto.BuildUrl);

            if (serverAboutResponseDto.ExiftoolOption.IsSet)
                writer.WriteString("exiftool", serverAboutResponseDto.Exiftool);

            if (serverAboutResponseDto.FfmpegOption.IsSet)
                writer.WriteString("ffmpeg", serverAboutResponseDto.Ffmpeg);

            if (serverAboutResponseDto.ImagemagickOption.IsSet)
                writer.WriteString("imagemagick", serverAboutResponseDto.Imagemagick);

            if (serverAboutResponseDto.LibvipsOption.IsSet)
                writer.WriteString("libvips", serverAboutResponseDto.Libvips);

            if (serverAboutResponseDto.NodejsOption.IsSet)
                writer.WriteString("nodejs", serverAboutResponseDto.Nodejs);

            if (serverAboutResponseDto.RepositoryOption.IsSet)
                writer.WriteString("repository", serverAboutResponseDto.Repository);

            if (serverAboutResponseDto.RepositoryUrlOption.IsSet)
                writer.WriteString("repositoryUrl", serverAboutResponseDto.RepositoryUrl);

            if (serverAboutResponseDto.SourceCommitOption.IsSet)
                writer.WriteString("sourceCommit", serverAboutResponseDto.SourceCommit);

            if (serverAboutResponseDto.SourceRefOption.IsSet)
                writer.WriteString("sourceRef", serverAboutResponseDto.SourceRef);

            if (serverAboutResponseDto.SourceUrlOption.IsSet)
                writer.WriteString("sourceUrl", serverAboutResponseDto.SourceUrl);

            if (serverAboutResponseDto.ThirdPartyBugFeatureUrlOption.IsSet)
                writer.WriteString("thirdPartyBugFeatureUrl", serverAboutResponseDto.ThirdPartyBugFeatureUrl);

            if (serverAboutResponseDto.ThirdPartyDocumentationUrlOption.IsSet)
                writer.WriteString("thirdPartyDocumentationUrl", serverAboutResponseDto.ThirdPartyDocumentationUrl);

            if (serverAboutResponseDto.ThirdPartySourceUrlOption.IsSet)
                writer.WriteString("thirdPartySourceUrl", serverAboutResponseDto.ThirdPartySourceUrl);

            if (serverAboutResponseDto.ThirdPartySupportUrlOption.IsSet)
                writer.WriteString("thirdPartySupportUrl", serverAboutResponseDto.ThirdPartySupportUrl);
        }
    }
}
