// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines JobName
    /// </summary>
    public enum JobName
    {
        /// <summary>
        /// Enum ThumbnailGeneration for value: thumbnailGeneration
        /// </summary>
        ThumbnailGeneration = 1,

        /// <summary>
        /// Enum MetadataExtraction for value: metadataExtraction
        /// </summary>
        MetadataExtraction = 2,

        /// <summary>
        /// Enum VideoConversion for value: videoConversion
        /// </summary>
        VideoConversion = 3,

        /// <summary>
        /// Enum FaceDetection for value: faceDetection
        /// </summary>
        FaceDetection = 4,

        /// <summary>
        /// Enum FacialRecognition for value: facialRecognition
        /// </summary>
        FacialRecognition = 5,

        /// <summary>
        /// Enum SmartSearch for value: smartSearch
        /// </summary>
        SmartSearch = 6,

        /// <summary>
        /// Enum DuplicateDetection for value: duplicateDetection
        /// </summary>
        DuplicateDetection = 7,

        /// <summary>
        /// Enum BackgroundTask for value: backgroundTask
        /// </summary>
        BackgroundTask = 8,

        /// <summary>
        /// Enum StorageTemplateMigration for value: storageTemplateMigration
        /// </summary>
        StorageTemplateMigration = 9,

        /// <summary>
        /// Enum Migration for value: migration
        /// </summary>
        Migration = 10,

        /// <summary>
        /// Enum Search for value: search
        /// </summary>
        Search = 11,

        /// <summary>
        /// Enum Sidecar for value: sidecar
        /// </summary>
        Sidecar = 12,

        /// <summary>
        /// Enum Library for value: library
        /// </summary>
        Library = 13,

        /// <summary>
        /// Enum Notifications for value: notifications
        /// </summary>
        Notifications = 14,

        /// <summary>
        /// Enum BackupDatabase for value: backupDatabase
        /// </summary>
        BackupDatabase = 15
    }

    /// <summary>
    /// Converts <see cref="JobName"/> to and from the JSON value
    /// </summary>
    public static class JobNameValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="JobName"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static JobName FromString(string value)
        {
            if (value.Equals("thumbnailGeneration"))
                return JobName.ThumbnailGeneration;

            if (value.Equals("metadataExtraction"))
                return JobName.MetadataExtraction;

            if (value.Equals("videoConversion"))
                return JobName.VideoConversion;

            if (value.Equals("faceDetection"))
                return JobName.FaceDetection;

            if (value.Equals("facialRecognition"))
                return JobName.FacialRecognition;

            if (value.Equals("smartSearch"))
                return JobName.SmartSearch;

            if (value.Equals("duplicateDetection"))
                return JobName.DuplicateDetection;

            if (value.Equals("backgroundTask"))
                return JobName.BackgroundTask;

            if (value.Equals("storageTemplateMigration"))
                return JobName.StorageTemplateMigration;

            if (value.Equals("migration"))
                return JobName.Migration;

            if (value.Equals("search"))
                return JobName.Search;

            if (value.Equals("sidecar"))
                return JobName.Sidecar;

            if (value.Equals("library"))
                return JobName.Library;

            if (value.Equals("notifications"))
                return JobName.Notifications;

            if (value.Equals("backupDatabase"))
                return JobName.BackupDatabase;

            throw new NotImplementedException($"Could not convert value to type JobName: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="JobName"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static JobName? FromStringOrDefault(string value)
        {
            if (value.Equals("thumbnailGeneration"))
                return JobName.ThumbnailGeneration;

            if (value.Equals("metadataExtraction"))
                return JobName.MetadataExtraction;

            if (value.Equals("videoConversion"))
                return JobName.VideoConversion;

            if (value.Equals("faceDetection"))
                return JobName.FaceDetection;

            if (value.Equals("facialRecognition"))
                return JobName.FacialRecognition;

            if (value.Equals("smartSearch"))
                return JobName.SmartSearch;

            if (value.Equals("duplicateDetection"))
                return JobName.DuplicateDetection;

            if (value.Equals("backgroundTask"))
                return JobName.BackgroundTask;

            if (value.Equals("storageTemplateMigration"))
                return JobName.StorageTemplateMigration;

            if (value.Equals("migration"))
                return JobName.Migration;

            if (value.Equals("search"))
                return JobName.Search;

            if (value.Equals("sidecar"))
                return JobName.Sidecar;

            if (value.Equals("library"))
                return JobName.Library;

            if (value.Equals("notifications"))
                return JobName.Notifications;

            if (value.Equals("backupDatabase"))
                return JobName.BackupDatabase;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="JobName"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(JobName value)
        {
            if (value == JobName.ThumbnailGeneration)
                return "thumbnailGeneration";

            if (value == JobName.MetadataExtraction)
                return "metadataExtraction";

            if (value == JobName.VideoConversion)
                return "videoConversion";

            if (value == JobName.FaceDetection)
                return "faceDetection";

            if (value == JobName.FacialRecognition)
                return "facialRecognition";

            if (value == JobName.SmartSearch)
                return "smartSearch";

            if (value == JobName.DuplicateDetection)
                return "duplicateDetection";

            if (value == JobName.BackgroundTask)
                return "backgroundTask";

            if (value == JobName.StorageTemplateMigration)
                return "storageTemplateMigration";

            if (value == JobName.Migration)
                return "migration";

            if (value == JobName.Search)
                return "search";

            if (value == JobName.Sidecar)
                return "sidecar";

            if (value == JobName.Library)
                return "library";

            if (value == JobName.Notifications)
                return "notifications";

            if (value == JobName.BackupDatabase)
                return "backupDatabase";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="JobName"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class JobNameJsonConverter : JsonConverter<JobName>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override JobName Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            JobName? result = rawValue == null
                ? null
                : JobNameValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the JobName to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="jobName"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, JobName jobName, JsonSerializerOptions options)
        {
            writer.WriteStringValue(JobNameValueConverter.ToJsonValue(jobName).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="JobName"/>
    /// </summary>
    public class JobNameNullableJsonConverter : JsonConverter<JobName?>
    {
        /// <summary>
        /// Returns a JobName from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override JobName? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            JobName? result = rawValue == null
                ? null
                : JobNameValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the JobName to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="jobName"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, JobName? jobName, JsonSerializerOptions options)
        {
            writer.WriteStringValue(jobName.HasValue ? JobNameValueConverter.ToJsonValue(jobName.Value).ToString() : "null");
        }
    }
}
