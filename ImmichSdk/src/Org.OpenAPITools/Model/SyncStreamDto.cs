// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SyncStreamDto
    /// </summary>
    public partial class SyncStreamDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SyncStreamDto" /> class.
        /// </summary>
        /// <param name="types">types</param>
        /// <param name="reset">reset</param>
        [JsonConstructor]
        public SyncStreamDto(List<SyncRequestType> types, Option<bool?> reset = default)
        {
            Types = types;
            ResetOption = reset;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Types
        /// </summary>
        [JsonPropertyName("types")]
        public List<SyncRequestType> Types { get; set; }

        /// <summary>
        /// Used to track the state of Reset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ResetOption { get; private set; }

        /// <summary>
        /// Gets or Sets Reset
        /// </summary>
        [JsonPropertyName("reset")]
        public bool? Reset { get { return this.ResetOption; } set { this.ResetOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SyncStreamDto {\n");
            sb.Append("  Types: ").Append(Types).Append("\n");
            sb.Append("  Reset: ").Append(Reset).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SyncStreamDto" />
    /// </summary>
    public class SyncStreamDtoJsonConverter : JsonConverter<SyncStreamDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="SyncStreamDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SyncStreamDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<SyncRequestType>?> types = default;
            Option<bool?> reset = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "types":
                            types = new Option<List<SyncRequestType>?>(JsonSerializer.Deserialize<List<SyncRequestType>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "reset":
                            reset = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!types.IsSet)
                throw new ArgumentException("Property is required for class SyncStreamDto.", nameof(types));

            if (types.IsSet && types.Value == null)
                throw new ArgumentNullException(nameof(types), "Property is not nullable for class SyncStreamDto.");

            if (reset.IsSet && reset.Value == null)
                throw new ArgumentNullException(nameof(reset), "Property is not nullable for class SyncStreamDto.");

            return new SyncStreamDto(types.Value!, reset);
        }

        /// <summary>
        /// Serializes a <see cref="SyncStreamDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="syncStreamDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SyncStreamDto syncStreamDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, syncStreamDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SyncStreamDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="syncStreamDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SyncStreamDto syncStreamDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (syncStreamDto.Types == null)
                throw new ArgumentNullException(nameof(syncStreamDto.Types), "Property is required for class SyncStreamDto.");

            writer.WritePropertyName("types");
            JsonSerializer.Serialize(writer, syncStreamDto.Types, jsonSerializerOptions);
            if (syncStreamDto.ResetOption.IsSet)
                writer.WriteBoolean("reset", syncStreamDto.ResetOption.Value!.Value);
        }
    }
}
