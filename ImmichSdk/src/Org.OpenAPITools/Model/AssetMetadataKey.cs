// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines AssetMetadataKey
    /// </summary>
    public enum AssetMetadataKey
    {
        /// <summary>
        /// Enum MobileApp for value: mobile-app
        /// </summary>
        MobileApp = 1
    }

    /// <summary>
    /// Converts <see cref="AssetMetadataKey"/> to and from the JSON value
    /// </summary>
    public static class AssetMetadataKeyValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="AssetMetadataKey"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AssetMetadataKey FromString(string value)
        {
            if (value.Equals("mobile-app"))
                return AssetMetadataKey.MobileApp;

            throw new NotImplementedException($"Could not convert value to type AssetMetadataKey: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="AssetMetadataKey"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AssetMetadataKey? FromStringOrDefault(string value)
        {
            if (value.Equals("mobile-app"))
                return AssetMetadataKey.MobileApp;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AssetMetadataKey"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(AssetMetadataKey value)
        {
            if (value == AssetMetadataKey.MobileApp)
                return "mobile-app";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AssetMetadataKey"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class AssetMetadataKeyJsonConverter : JsonConverter<AssetMetadataKey>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override AssetMetadataKey Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            AssetMetadataKey? result = rawValue == null
                ? null
                : AssetMetadataKeyValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the AssetMetadataKey to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="assetMetadataKey"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, AssetMetadataKey assetMetadataKey, JsonSerializerOptions options)
        {
            writer.WriteStringValue(AssetMetadataKeyValueConverter.ToJsonValue(assetMetadataKey).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AssetMetadataKey"/>
    /// </summary>
    public class AssetMetadataKeyNullableJsonConverter : JsonConverter<AssetMetadataKey?>
    {
        /// <summary>
        /// Returns a AssetMetadataKey from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override AssetMetadataKey? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            AssetMetadataKey? result = rawValue == null
                ? null
                : AssetMetadataKeyValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the AssetMetadataKey to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="assetMetadataKey"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, AssetMetadataKey? assetMetadataKey, JsonSerializerOptions options)
        {
            writer.WriteStringValue(assetMetadataKey.HasValue ? AssetMetadataKeyValueConverter.ToJsonValue(assetMetadataKey.Value).ToString() : "null");
        }
    }
}
