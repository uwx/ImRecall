// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AssetFullSyncDto
    /// </summary>
    public partial class AssetFullSyncDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetFullSyncDto" /> class.
        /// </summary>
        /// <param name="limit">limit</param>
        /// <param name="updatedUntil">updatedUntil</param>
        /// <param name="lastId">lastId</param>
        /// <param name="userId">userId</param>
        [JsonConstructor]
        public AssetFullSyncDto(int limit, DateTime updatedUntil, Option<Guid?> lastId = default, Option<Guid?> userId = default)
        {
            Limit = limit;
            UpdatedUntil = updatedUntil;
            LastIdOption = lastId;
            UserIdOption = userId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Limit
        /// </summary>
        [JsonPropertyName("limit")]
        public int Limit { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedUntil
        /// </summary>
        [JsonPropertyName("updatedUntil")]
        public DateTime UpdatedUntil { get; set; }

        /// <summary>
        /// Used to track the state of LastId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> LastIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastId
        /// </summary>
        [JsonPropertyName("lastId")]
        public Guid? LastId { get { return this.LastIdOption; } set { this.LastIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of UserId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> UserIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("userId")]
        public Guid? UserId { get { return this.UserIdOption; } set { this.UserIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AssetFullSyncDto {\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  UpdatedUntil: ").Append(UpdatedUntil).Append("\n");
            sb.Append("  LastId: ").Append(LastId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Limit (int) minimum
            if (this.Limit < (int)1)
            {
                yield return new ValidationResult("Invalid value for Limit, must be a value greater than or equal to 1.", new [] { "Limit" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AssetFullSyncDto" />
    /// </summary>
    public class AssetFullSyncDtoJsonConverter : JsonConverter<AssetFullSyncDto>
    {
        /// <summary>
        /// The format to use to serialize UpdatedUntil
        /// </summary>
        public static string UpdatedUntilFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="AssetFullSyncDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AssetFullSyncDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> limit = default;
            Option<DateTime?> updatedUntil = default;
            Option<Guid?> lastId = default;
            Option<Guid?> userId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "limit":
                            limit = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "updatedUntil":
                            updatedUntil = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "lastId":
                            lastId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "userId":
                            userId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!limit.IsSet)
                throw new ArgumentException("Property is required for class AssetFullSyncDto.", nameof(limit));

            if (!updatedUntil.IsSet)
                throw new ArgumentException("Property is required for class AssetFullSyncDto.", nameof(updatedUntil));

            if (limit.IsSet && limit.Value == null)
                throw new ArgumentNullException(nameof(limit), "Property is not nullable for class AssetFullSyncDto.");

            if (updatedUntil.IsSet && updatedUntil.Value == null)
                throw new ArgumentNullException(nameof(updatedUntil), "Property is not nullable for class AssetFullSyncDto.");

            if (lastId.IsSet && lastId.Value == null)
                throw new ArgumentNullException(nameof(lastId), "Property is not nullable for class AssetFullSyncDto.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class AssetFullSyncDto.");

            return new AssetFullSyncDto(limit.Value!.Value!, updatedUntil.Value!.Value!, lastId, userId);
        }

        /// <summary>
        /// Serializes a <see cref="AssetFullSyncDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="assetFullSyncDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AssetFullSyncDto assetFullSyncDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, assetFullSyncDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AssetFullSyncDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="assetFullSyncDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AssetFullSyncDto assetFullSyncDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("limit", assetFullSyncDto.Limit);

            writer.WriteString("updatedUntil", assetFullSyncDto.UpdatedUntil.ToString(UpdatedUntilFormat));

            if (assetFullSyncDto.LastIdOption.IsSet)
                writer.WriteString("lastId", assetFullSyncDto.LastIdOption.Value!.Value);

            if (assetFullSyncDto.UserIdOption.IsSet)
                writer.WriteString("userId", assetFullSyncDto.UserIdOption.Value!.Value);
        }
    }
}
