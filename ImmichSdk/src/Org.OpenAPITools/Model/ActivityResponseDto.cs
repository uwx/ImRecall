// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ActivityResponseDto
    /// </summary>
    public partial class ActivityResponseDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivityResponseDto" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt</param>
        /// <param name="id">id</param>
        /// <param name="type">type</param>
        /// <param name="user">user</param>
        /// <param name="assetId">assetId</param>
        /// <param name="comment">comment</param>
        [JsonConstructor]
        public ActivityResponseDto(DateTime createdAt, string id, ReactionType type, UserResponseDto user, string? assetId = default, Option<string?> comment = default)
        {
            CreatedAt = createdAt;
            Id = id;
            Type = type;
            User = user;
            AssetId = assetId;
            CommentOption = comment;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public ReactionType Type { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [JsonPropertyName("user")]
        public UserResponseDto User { get; set; }

        /// <summary>
        /// Gets or Sets AssetId
        /// </summary>
        [JsonPropertyName("assetId")]
        public string? AssetId { get; set; }

        /// <summary>
        /// Used to track the state of Comment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CommentOption { get; private set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [JsonPropertyName("comment")]
        public string? Comment { get { return this.CommentOption; } set { this.CommentOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ActivityResponseDto {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ActivityResponseDto" />
    /// </summary>
    public class ActivityResponseDtoJsonConverter : JsonConverter<ActivityResponseDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ActivityResponseDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ActivityResponseDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> createdAt = default;
            Option<string?> id = default;
            Option<ReactionType?> type = default;
            Option<UserResponseDto?> user = default;
            Option<string?> assetId = default;
            Option<string?> comment = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<ReactionType?>(ReactionTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "user":
                            user = new Option<UserResponseDto?>(JsonSerializer.Deserialize<UserResponseDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "assetId":
                            assetId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "comment":
                            comment = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class ActivityResponseDto.", nameof(createdAt));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class ActivityResponseDto.", nameof(id));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class ActivityResponseDto.", nameof(type));

            if (!user.IsSet)
                throw new ArgumentException("Property is required for class ActivityResponseDto.", nameof(user));

            if (!assetId.IsSet)
                throw new ArgumentException("Property is required for class ActivityResponseDto.", nameof(assetId));

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class ActivityResponseDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ActivityResponseDto.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class ActivityResponseDto.");

            if (user.IsSet && user.Value == null)
                throw new ArgumentNullException(nameof(user), "Property is not nullable for class ActivityResponseDto.");

            return new ActivityResponseDto(createdAt.Value!.Value!, id.Value!, type.Value!.Value!, user.Value!, assetId.Value!, comment);
        }

        /// <summary>
        /// Serializes a <see cref="ActivityResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="activityResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ActivityResponseDto activityResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, activityResponseDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ActivityResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="activityResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ActivityResponseDto activityResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (activityResponseDto.Id == null)
                throw new ArgumentNullException(nameof(activityResponseDto.Id), "Property is required for class ActivityResponseDto.");

            if (activityResponseDto.User == null)
                throw new ArgumentNullException(nameof(activityResponseDto.User), "Property is required for class ActivityResponseDto.");

            writer.WriteString("createdAt", activityResponseDto.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("id", activityResponseDto.Id);

            var typeRawValue = ReactionTypeValueConverter.ToJsonValue(activityResponseDto.Type);
            writer.WriteString("type", typeRawValue);

            writer.WritePropertyName("user");
            JsonSerializer.Serialize(writer, activityResponseDto.User, jsonSerializerOptions);
            if (activityResponseDto.AssetId != null)
                writer.WriteString("assetId", activityResponseDto.AssetId);
            else
                writer.WriteNull("assetId");

            if (activityResponseDto.CommentOption.IsSet)
                if (activityResponseDto.CommentOption.Value != null)
                    writer.WriteString("comment", activityResponseDto.Comment);
                else
                    writer.WriteNull("comment");
        }
    }
}
