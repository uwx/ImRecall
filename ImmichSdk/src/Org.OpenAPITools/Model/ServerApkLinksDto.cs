// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ServerApkLinksDto
    /// </summary>
    public partial class ServerApkLinksDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerApkLinksDto" /> class.
        /// </summary>
        /// <param name="arm64v8a">arm64v8a</param>
        /// <param name="armeabiv7a">armeabiv7a</param>
        /// <param name="universal">universal</param>
        /// <param name="x8664">x8664</param>
        [JsonConstructor]
        public ServerApkLinksDto(string arm64v8a, string armeabiv7a, string universal, string x8664)
        {
            Arm64v8a = arm64v8a;
            Armeabiv7a = armeabiv7a;
            Universal = universal;
            X8664 = x8664;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Arm64v8a
        /// </summary>
        [JsonPropertyName("arm64v8a")]
        public string Arm64v8a { get; set; }

        /// <summary>
        /// Gets or Sets Armeabiv7a
        /// </summary>
        [JsonPropertyName("armeabiv7a")]
        public string Armeabiv7a { get; set; }

        /// <summary>
        /// Gets or Sets Universal
        /// </summary>
        [JsonPropertyName("universal")]
        public string Universal { get; set; }

        /// <summary>
        /// Gets or Sets X8664
        /// </summary>
        [JsonPropertyName("x86_64")]
        public string X8664 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServerApkLinksDto {\n");
            sb.Append("  Arm64v8a: ").Append(Arm64v8a).Append("\n");
            sb.Append("  Armeabiv7a: ").Append(Armeabiv7a).Append("\n");
            sb.Append("  Universal: ").Append(Universal).Append("\n");
            sb.Append("  X8664: ").Append(X8664).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ServerApkLinksDto" />
    /// </summary>
    public class ServerApkLinksDtoJsonConverter : JsonConverter<ServerApkLinksDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="ServerApkLinksDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ServerApkLinksDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> arm64v8a = default;
            Option<string?> armeabiv7a = default;
            Option<string?> universal = default;
            Option<string?> x8664 = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "arm64v8a":
                            arm64v8a = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "armeabiv7a":
                            armeabiv7a = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "universal":
                            universal = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "x86_64":
                            x8664 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!arm64v8a.IsSet)
                throw new ArgumentException("Property is required for class ServerApkLinksDto.", nameof(arm64v8a));

            if (!armeabiv7a.IsSet)
                throw new ArgumentException("Property is required for class ServerApkLinksDto.", nameof(armeabiv7a));

            if (!universal.IsSet)
                throw new ArgumentException("Property is required for class ServerApkLinksDto.", nameof(universal));

            if (!x8664.IsSet)
                throw new ArgumentException("Property is required for class ServerApkLinksDto.", nameof(x8664));

            if (arm64v8a.IsSet && arm64v8a.Value == null)
                throw new ArgumentNullException(nameof(arm64v8a), "Property is not nullable for class ServerApkLinksDto.");

            if (armeabiv7a.IsSet && armeabiv7a.Value == null)
                throw new ArgumentNullException(nameof(armeabiv7a), "Property is not nullable for class ServerApkLinksDto.");

            if (universal.IsSet && universal.Value == null)
                throw new ArgumentNullException(nameof(universal), "Property is not nullable for class ServerApkLinksDto.");

            if (x8664.IsSet && x8664.Value == null)
                throw new ArgumentNullException(nameof(x8664), "Property is not nullable for class ServerApkLinksDto.");

            return new ServerApkLinksDto(arm64v8a.Value!, armeabiv7a.Value!, universal.Value!, x8664.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ServerApkLinksDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="serverApkLinksDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ServerApkLinksDto serverApkLinksDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, serverApkLinksDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ServerApkLinksDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="serverApkLinksDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ServerApkLinksDto serverApkLinksDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (serverApkLinksDto.Arm64v8a == null)
                throw new ArgumentNullException(nameof(serverApkLinksDto.Arm64v8a), "Property is required for class ServerApkLinksDto.");

            if (serverApkLinksDto.Armeabiv7a == null)
                throw new ArgumentNullException(nameof(serverApkLinksDto.Armeabiv7a), "Property is required for class ServerApkLinksDto.");

            if (serverApkLinksDto.Universal == null)
                throw new ArgumentNullException(nameof(serverApkLinksDto.Universal), "Property is required for class ServerApkLinksDto.");

            if (serverApkLinksDto.X8664 == null)
                throw new ArgumentNullException(nameof(serverApkLinksDto.X8664), "Property is required for class ServerApkLinksDto.");

            writer.WriteString("arm64v8a", serverApkLinksDto.Arm64v8a);

            writer.WriteString("armeabiv7a", serverApkLinksDto.Armeabiv7a);

            writer.WriteString("universal", serverApkLinksDto.Universal);

            writer.WriteString("x86_64", serverApkLinksDto.X8664);
        }
    }
}
