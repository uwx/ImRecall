// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines PartnerDirection
    /// </summary>
    public enum PartnerDirection
    {
        /// <summary>
        /// Enum SharedBy for value: shared-by
        /// </summary>
        SharedBy = 1,

        /// <summary>
        /// Enum SharedWith for value: shared-with
        /// </summary>
        SharedWith = 2
    }

    /// <summary>
    /// Converts <see cref="PartnerDirection"/> to and from the JSON value
    /// </summary>
    public static class PartnerDirectionValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="PartnerDirection"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PartnerDirection FromString(string value)
        {
            if (value.Equals("shared-by"))
                return PartnerDirection.SharedBy;

            if (value.Equals("shared-with"))
                return PartnerDirection.SharedWith;

            throw new NotImplementedException($"Could not convert value to type PartnerDirection: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="PartnerDirection"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PartnerDirection? FromStringOrDefault(string value)
        {
            if (value.Equals("shared-by"))
                return PartnerDirection.SharedBy;

            if (value.Equals("shared-with"))
                return PartnerDirection.SharedWith;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="PartnerDirection"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(PartnerDirection value)
        {
            if (value == PartnerDirection.SharedBy)
                return "shared-by";

            if (value == PartnerDirection.SharedWith)
                return "shared-with";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PartnerDirection"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class PartnerDirectionJsonConverter : JsonConverter<PartnerDirection>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override PartnerDirection Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            PartnerDirection? result = rawValue == null
                ? null
                : PartnerDirectionValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the PartnerDirection to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="partnerDirection"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, PartnerDirection partnerDirection, JsonSerializerOptions options)
        {
            writer.WriteStringValue(PartnerDirectionValueConverter.ToJsonValue(partnerDirection).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PartnerDirection"/>
    /// </summary>
    public class PartnerDirectionNullableJsonConverter : JsonConverter<PartnerDirection?>
    {
        /// <summary>
        /// Returns a PartnerDirection from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override PartnerDirection? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            PartnerDirection? result = rawValue == null
                ? null
                : PartnerDirectionValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the PartnerDirection to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="partnerDirection"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, PartnerDirection? partnerDirection, JsonSerializerOptions options)
        {
            writer.WriteStringValue(partnerDirection.HasValue ? PartnerDirectionValueConverter.ToJsonValue(partnerDirection.Value).ToString() : "null");
        }
    }
}
