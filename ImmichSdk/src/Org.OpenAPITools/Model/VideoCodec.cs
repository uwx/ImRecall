// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines VideoCodec
    /// </summary>
    public enum VideoCodec
    {
        /// <summary>
        /// Enum H264 for value: h264
        /// </summary>
        H264 = 1,

        /// <summary>
        /// Enum Hevc for value: hevc
        /// </summary>
        Hevc = 2,

        /// <summary>
        /// Enum Vp9 for value: vp9
        /// </summary>
        Vp9 = 3,

        /// <summary>
        /// Enum Av1 for value: av1
        /// </summary>
        Av1 = 4
    }

    /// <summary>
    /// Converts <see cref="VideoCodec"/> to and from the JSON value
    /// </summary>
    public static class VideoCodecValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="VideoCodec"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static VideoCodec FromString(string value)
        {
            if (value.Equals("h264"))
                return VideoCodec.H264;

            if (value.Equals("hevc"))
                return VideoCodec.Hevc;

            if (value.Equals("vp9"))
                return VideoCodec.Vp9;

            if (value.Equals("av1"))
                return VideoCodec.Av1;

            throw new NotImplementedException($"Could not convert value to type VideoCodec: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="VideoCodec"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static VideoCodec? FromStringOrDefault(string value)
        {
            if (value.Equals("h264"))
                return VideoCodec.H264;

            if (value.Equals("hevc"))
                return VideoCodec.Hevc;

            if (value.Equals("vp9"))
                return VideoCodec.Vp9;

            if (value.Equals("av1"))
                return VideoCodec.Av1;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="VideoCodec"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(VideoCodec value)
        {
            if (value == VideoCodec.H264)
                return "h264";

            if (value == VideoCodec.Hevc)
                return "hevc";

            if (value == VideoCodec.Vp9)
                return "vp9";

            if (value == VideoCodec.Av1)
                return "av1";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VideoCodec"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class VideoCodecJsonConverter : JsonConverter<VideoCodec>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override VideoCodec Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            VideoCodec? result = rawValue == null
                ? null
                : VideoCodecValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the VideoCodec to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="videoCodec"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, VideoCodec videoCodec, JsonSerializerOptions options)
        {
            writer.WriteStringValue(VideoCodecValueConverter.ToJsonValue(videoCodec).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VideoCodec"/>
    /// </summary>
    public class VideoCodecNullableJsonConverter : JsonConverter<VideoCodec?>
    {
        /// <summary>
        /// Returns a VideoCodec from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override VideoCodec? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            VideoCodec? result = rawValue == null
                ? null
                : VideoCodecValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the VideoCodec to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="videoCodec"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, VideoCodec? videoCodec, JsonSerializerOptions options)
        {
            writer.WriteStringValue(videoCodec.HasValue ? VideoCodecValueConverter.ToJsonValue(videoCodec.Value).ToString() : "null");
        }
    }
}
