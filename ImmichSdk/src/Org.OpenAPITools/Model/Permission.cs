// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines Permission
    /// </summary>
    public enum Permission
    {
        /// <summary>
        /// Enum All for value: all
        /// </summary>
        All = 1,

        /// <summary>
        /// Enum ActivityCreate for value: activity.create
        /// </summary>
        ActivityCreate = 2,

        /// <summary>
        /// Enum ActivityRead for value: activity.read
        /// </summary>
        ActivityRead = 3,

        /// <summary>
        /// Enum ActivityUpdate for value: activity.update
        /// </summary>
        ActivityUpdate = 4,

        /// <summary>
        /// Enum ActivityDelete for value: activity.delete
        /// </summary>
        ActivityDelete = 5,

        /// <summary>
        /// Enum ActivityStatistics for value: activity.statistics
        /// </summary>
        ActivityStatistics = 6,

        /// <summary>
        /// Enum ApiKeyCreate for value: apiKey.create
        /// </summary>
        ApiKeyCreate = 7,

        /// <summary>
        /// Enum ApiKeyRead for value: apiKey.read
        /// </summary>
        ApiKeyRead = 8,

        /// <summary>
        /// Enum ApiKeyUpdate for value: apiKey.update
        /// </summary>
        ApiKeyUpdate = 9,

        /// <summary>
        /// Enum ApiKeyDelete for value: apiKey.delete
        /// </summary>
        ApiKeyDelete = 10,

        /// <summary>
        /// Enum AssetRead for value: asset.read
        /// </summary>
        AssetRead = 11,

        /// <summary>
        /// Enum AssetUpdate for value: asset.update
        /// </summary>
        AssetUpdate = 12,

        /// <summary>
        /// Enum AssetDelete for value: asset.delete
        /// </summary>
        AssetDelete = 13,

        /// <summary>
        /// Enum AssetStatistics for value: asset.statistics
        /// </summary>
        AssetStatistics = 14,

        /// <summary>
        /// Enum AssetShare for value: asset.share
        /// </summary>
        AssetShare = 15,

        /// <summary>
        /// Enum AssetView for value: asset.view
        /// </summary>
        AssetView = 16,

        /// <summary>
        /// Enum AssetDownload for value: asset.download
        /// </summary>
        AssetDownload = 17,

        /// <summary>
        /// Enum AssetUpload for value: asset.upload
        /// </summary>
        AssetUpload = 18,

        /// <summary>
        /// Enum AssetReplace for value: asset.replace
        /// </summary>
        AssetReplace = 19,

        /// <summary>
        /// Enum AlbumCreate for value: album.create
        /// </summary>
        AlbumCreate = 20,

        /// <summary>
        /// Enum AlbumRead for value: album.read
        /// </summary>
        AlbumRead = 21,

        /// <summary>
        /// Enum AlbumUpdate for value: album.update
        /// </summary>
        AlbumUpdate = 22,

        /// <summary>
        /// Enum AlbumDelete for value: album.delete
        /// </summary>
        AlbumDelete = 23,

        /// <summary>
        /// Enum AlbumStatistics for value: album.statistics
        /// </summary>
        AlbumStatistics = 24,

        /// <summary>
        /// Enum AlbumShare for value: album.share
        /// </summary>
        AlbumShare = 25,

        /// <summary>
        /// Enum AlbumDownload for value: album.download
        /// </summary>
        AlbumDownload = 26,

        /// <summary>
        /// Enum AlbumAssetCreate for value: albumAsset.create
        /// </summary>
        AlbumAssetCreate = 27,

        /// <summary>
        /// Enum AlbumAssetDelete for value: albumAsset.delete
        /// </summary>
        AlbumAssetDelete = 28,

        /// <summary>
        /// Enum AlbumUserCreate for value: albumUser.create
        /// </summary>
        AlbumUserCreate = 29,

        /// <summary>
        /// Enum AlbumUserUpdate for value: albumUser.update
        /// </summary>
        AlbumUserUpdate = 30,

        /// <summary>
        /// Enum AlbumUserDelete for value: albumUser.delete
        /// </summary>
        AlbumUserDelete = 31,

        /// <summary>
        /// Enum AuthChangePassword for value: auth.changePassword
        /// </summary>
        AuthChangePassword = 32,

        /// <summary>
        /// Enum AuthDeviceDelete for value: authDevice.delete
        /// </summary>
        AuthDeviceDelete = 33,

        /// <summary>
        /// Enum ArchiveRead for value: archive.read
        /// </summary>
        ArchiveRead = 34,

        /// <summary>
        /// Enum DuplicateRead for value: duplicate.read
        /// </summary>
        DuplicateRead = 35,

        /// <summary>
        /// Enum DuplicateDelete for value: duplicate.delete
        /// </summary>
        DuplicateDelete = 36,

        /// <summary>
        /// Enum FaceCreate for value: face.create
        /// </summary>
        FaceCreate = 37,

        /// <summary>
        /// Enum FaceRead for value: face.read
        /// </summary>
        FaceRead = 38,

        /// <summary>
        /// Enum FaceUpdate for value: face.update
        /// </summary>
        FaceUpdate = 39,

        /// <summary>
        /// Enum FaceDelete for value: face.delete
        /// </summary>
        FaceDelete = 40,

        /// <summary>
        /// Enum JobCreate for value: job.create
        /// </summary>
        JobCreate = 41,

        /// <summary>
        /// Enum JobRead for value: job.read
        /// </summary>
        JobRead = 42,

        /// <summary>
        /// Enum LibraryCreate for value: library.create
        /// </summary>
        LibraryCreate = 43,

        /// <summary>
        /// Enum LibraryRead for value: library.read
        /// </summary>
        LibraryRead = 44,

        /// <summary>
        /// Enum LibraryUpdate for value: library.update
        /// </summary>
        LibraryUpdate = 45,

        /// <summary>
        /// Enum LibraryDelete for value: library.delete
        /// </summary>
        LibraryDelete = 46,

        /// <summary>
        /// Enum LibraryStatistics for value: library.statistics
        /// </summary>
        LibraryStatistics = 47,

        /// <summary>
        /// Enum TimelineRead for value: timeline.read
        /// </summary>
        TimelineRead = 48,

        /// <summary>
        /// Enum TimelineDownload for value: timeline.download
        /// </summary>
        TimelineDownload = 49,

        /// <summary>
        /// Enum MemoryCreate for value: memory.create
        /// </summary>
        MemoryCreate = 50,

        /// <summary>
        /// Enum MemoryRead for value: memory.read
        /// </summary>
        MemoryRead = 51,

        /// <summary>
        /// Enum MemoryUpdate for value: memory.update
        /// </summary>
        MemoryUpdate = 52,

        /// <summary>
        /// Enum MemoryDelete for value: memory.delete
        /// </summary>
        MemoryDelete = 53,

        /// <summary>
        /// Enum MemoryStatistics for value: memory.statistics
        /// </summary>
        MemoryStatistics = 54,

        /// <summary>
        /// Enum MemoryAssetCreate for value: memoryAsset.create
        /// </summary>
        MemoryAssetCreate = 55,

        /// <summary>
        /// Enum MemoryAssetDelete for value: memoryAsset.delete
        /// </summary>
        MemoryAssetDelete = 56,

        /// <summary>
        /// Enum NotificationCreate for value: notification.create
        /// </summary>
        NotificationCreate = 57,

        /// <summary>
        /// Enum NotificationRead for value: notification.read
        /// </summary>
        NotificationRead = 58,

        /// <summary>
        /// Enum NotificationUpdate for value: notification.update
        /// </summary>
        NotificationUpdate = 59,

        /// <summary>
        /// Enum NotificationDelete for value: notification.delete
        /// </summary>
        NotificationDelete = 60,

        /// <summary>
        /// Enum PartnerCreate for value: partner.create
        /// </summary>
        PartnerCreate = 61,

        /// <summary>
        /// Enum PartnerRead for value: partner.read
        /// </summary>
        PartnerRead = 62,

        /// <summary>
        /// Enum PartnerUpdate for value: partner.update
        /// </summary>
        PartnerUpdate = 63,

        /// <summary>
        /// Enum PartnerDelete for value: partner.delete
        /// </summary>
        PartnerDelete = 64,

        /// <summary>
        /// Enum PersonCreate for value: person.create
        /// </summary>
        PersonCreate = 65,

        /// <summary>
        /// Enum PersonRead for value: person.read
        /// </summary>
        PersonRead = 66,

        /// <summary>
        /// Enum PersonUpdate for value: person.update
        /// </summary>
        PersonUpdate = 67,

        /// <summary>
        /// Enum PersonDelete for value: person.delete
        /// </summary>
        PersonDelete = 68,

        /// <summary>
        /// Enum PersonStatistics for value: person.statistics
        /// </summary>
        PersonStatistics = 69,

        /// <summary>
        /// Enum PersonMerge for value: person.merge
        /// </summary>
        PersonMerge = 70,

        /// <summary>
        /// Enum PersonReassign for value: person.reassign
        /// </summary>
        PersonReassign = 71,

        /// <summary>
        /// Enum PinCodeCreate for value: pinCode.create
        /// </summary>
        PinCodeCreate = 72,

        /// <summary>
        /// Enum PinCodeUpdate for value: pinCode.update
        /// </summary>
        PinCodeUpdate = 73,

        /// <summary>
        /// Enum PinCodeDelete for value: pinCode.delete
        /// </summary>
        PinCodeDelete = 74,

        /// <summary>
        /// Enum ServerAbout for value: server.about
        /// </summary>
        ServerAbout = 75,

        /// <summary>
        /// Enum ServerApkLinks for value: server.apkLinks
        /// </summary>
        ServerApkLinks = 76,

        /// <summary>
        /// Enum ServerStorage for value: server.storage
        /// </summary>
        ServerStorage = 77,

        /// <summary>
        /// Enum ServerStatistics for value: server.statistics
        /// </summary>
        ServerStatistics = 78,

        /// <summary>
        /// Enum ServerVersionCheck for value: server.versionCheck
        /// </summary>
        ServerVersionCheck = 79,

        /// <summary>
        /// Enum ServerLicenseRead for value: serverLicense.read
        /// </summary>
        ServerLicenseRead = 80,

        /// <summary>
        /// Enum ServerLicenseUpdate for value: serverLicense.update
        /// </summary>
        ServerLicenseUpdate = 81,

        /// <summary>
        /// Enum ServerLicenseDelete for value: serverLicense.delete
        /// </summary>
        ServerLicenseDelete = 82,

        /// <summary>
        /// Enum SessionCreate for value: session.create
        /// </summary>
        SessionCreate = 83,

        /// <summary>
        /// Enum SessionRead for value: session.read
        /// </summary>
        SessionRead = 84,

        /// <summary>
        /// Enum SessionUpdate for value: session.update
        /// </summary>
        SessionUpdate = 85,

        /// <summary>
        /// Enum SessionDelete for value: session.delete
        /// </summary>
        SessionDelete = 86,

        /// <summary>
        /// Enum SessionLock for value: session.lock
        /// </summary>
        SessionLock = 87,

        /// <summary>
        /// Enum SharedLinkCreate for value: sharedLink.create
        /// </summary>
        SharedLinkCreate = 88,

        /// <summary>
        /// Enum SharedLinkRead for value: sharedLink.read
        /// </summary>
        SharedLinkRead = 89,

        /// <summary>
        /// Enum SharedLinkUpdate for value: sharedLink.update
        /// </summary>
        SharedLinkUpdate = 90,

        /// <summary>
        /// Enum SharedLinkDelete for value: sharedLink.delete
        /// </summary>
        SharedLinkDelete = 91,

        /// <summary>
        /// Enum StackCreate for value: stack.create
        /// </summary>
        StackCreate = 92,

        /// <summary>
        /// Enum StackRead for value: stack.read
        /// </summary>
        StackRead = 93,

        /// <summary>
        /// Enum StackUpdate for value: stack.update
        /// </summary>
        StackUpdate = 94,

        /// <summary>
        /// Enum StackDelete for value: stack.delete
        /// </summary>
        StackDelete = 95,

        /// <summary>
        /// Enum SyncStream for value: sync.stream
        /// </summary>
        SyncStream = 96,

        /// <summary>
        /// Enum SyncCheckpointRead for value: syncCheckpoint.read
        /// </summary>
        SyncCheckpointRead = 97,

        /// <summary>
        /// Enum SyncCheckpointUpdate for value: syncCheckpoint.update
        /// </summary>
        SyncCheckpointUpdate = 98,

        /// <summary>
        /// Enum SyncCheckpointDelete for value: syncCheckpoint.delete
        /// </summary>
        SyncCheckpointDelete = 99,

        /// <summary>
        /// Enum SystemConfigRead for value: systemConfig.read
        /// </summary>
        SystemConfigRead = 100,

        /// <summary>
        /// Enum SystemConfigUpdate for value: systemConfig.update
        /// </summary>
        SystemConfigUpdate = 101,

        /// <summary>
        /// Enum SystemMetadataRead for value: systemMetadata.read
        /// </summary>
        SystemMetadataRead = 102,

        /// <summary>
        /// Enum SystemMetadataUpdate for value: systemMetadata.update
        /// </summary>
        SystemMetadataUpdate = 103,

        /// <summary>
        /// Enum TagCreate for value: tag.create
        /// </summary>
        TagCreate = 104,

        /// <summary>
        /// Enum TagRead for value: tag.read
        /// </summary>
        TagRead = 105,

        /// <summary>
        /// Enum TagUpdate for value: tag.update
        /// </summary>
        TagUpdate = 106,

        /// <summary>
        /// Enum TagDelete for value: tag.delete
        /// </summary>
        TagDelete = 107,

        /// <summary>
        /// Enum TagAsset for value: tag.asset
        /// </summary>
        TagAsset = 108,

        /// <summary>
        /// Enum UserRead for value: user.read
        /// </summary>
        UserRead = 109,

        /// <summary>
        /// Enum UserUpdate for value: user.update
        /// </summary>
        UserUpdate = 110,

        /// <summary>
        /// Enum UserLicenseCreate for value: userLicense.create
        /// </summary>
        UserLicenseCreate = 111,

        /// <summary>
        /// Enum UserLicenseRead for value: userLicense.read
        /// </summary>
        UserLicenseRead = 112,

        /// <summary>
        /// Enum UserLicenseUpdate for value: userLicense.update
        /// </summary>
        UserLicenseUpdate = 113,

        /// <summary>
        /// Enum UserLicenseDelete for value: userLicense.delete
        /// </summary>
        UserLicenseDelete = 114,

        /// <summary>
        /// Enum UserOnboardingRead for value: userOnboarding.read
        /// </summary>
        UserOnboardingRead = 115,

        /// <summary>
        /// Enum UserOnboardingUpdate for value: userOnboarding.update
        /// </summary>
        UserOnboardingUpdate = 116,

        /// <summary>
        /// Enum UserOnboardingDelete for value: userOnboarding.delete
        /// </summary>
        UserOnboardingDelete = 117,

        /// <summary>
        /// Enum UserPreferenceRead for value: userPreference.read
        /// </summary>
        UserPreferenceRead = 118,

        /// <summary>
        /// Enum UserPreferenceUpdate for value: userPreference.update
        /// </summary>
        UserPreferenceUpdate = 119,

        /// <summary>
        /// Enum UserProfileImageCreate for value: userProfileImage.create
        /// </summary>
        UserProfileImageCreate = 120,

        /// <summary>
        /// Enum UserProfileImageRead for value: userProfileImage.read
        /// </summary>
        UserProfileImageRead = 121,

        /// <summary>
        /// Enum UserProfileImageUpdate for value: userProfileImage.update
        /// </summary>
        UserProfileImageUpdate = 122,

        /// <summary>
        /// Enum UserProfileImageDelete for value: userProfileImage.delete
        /// </summary>
        UserProfileImageDelete = 123,

        /// <summary>
        /// Enum AdminUserCreate for value: adminUser.create
        /// </summary>
        AdminUserCreate = 124,

        /// <summary>
        /// Enum AdminUserRead for value: adminUser.read
        /// </summary>
        AdminUserRead = 125,

        /// <summary>
        /// Enum AdminUserUpdate for value: adminUser.update
        /// </summary>
        AdminUserUpdate = 126,

        /// <summary>
        /// Enum AdminUserDelete for value: adminUser.delete
        /// </summary>
        AdminUserDelete = 127,

        /// <summary>
        /// Enum AdminSessionRead for value: adminSession.read
        /// </summary>
        AdminSessionRead = 128,

        /// <summary>
        /// Enum AdminAuthUnlinkAll for value: adminAuth.unlinkAll
        /// </summary>
        AdminAuthUnlinkAll = 129
    }

    /// <summary>
    /// Converts <see cref="Permission"/> to and from the JSON value
    /// </summary>
    public static class PermissionValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="Permission"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Permission FromString(string value)
        {
            if (value.Equals("all"))
                return Permission.All;

            if (value.Equals("activity.create"))
                return Permission.ActivityCreate;

            if (value.Equals("activity.read"))
                return Permission.ActivityRead;

            if (value.Equals("activity.update"))
                return Permission.ActivityUpdate;

            if (value.Equals("activity.delete"))
                return Permission.ActivityDelete;

            if (value.Equals("activity.statistics"))
                return Permission.ActivityStatistics;

            if (value.Equals("apiKey.create"))
                return Permission.ApiKeyCreate;

            if (value.Equals("apiKey.read"))
                return Permission.ApiKeyRead;

            if (value.Equals("apiKey.update"))
                return Permission.ApiKeyUpdate;

            if (value.Equals("apiKey.delete"))
                return Permission.ApiKeyDelete;

            if (value.Equals("asset.read"))
                return Permission.AssetRead;

            if (value.Equals("asset.update"))
                return Permission.AssetUpdate;

            if (value.Equals("asset.delete"))
                return Permission.AssetDelete;

            if (value.Equals("asset.statistics"))
                return Permission.AssetStatistics;

            if (value.Equals("asset.share"))
                return Permission.AssetShare;

            if (value.Equals("asset.view"))
                return Permission.AssetView;

            if (value.Equals("asset.download"))
                return Permission.AssetDownload;

            if (value.Equals("asset.upload"))
                return Permission.AssetUpload;

            if (value.Equals("asset.replace"))
                return Permission.AssetReplace;

            if (value.Equals("album.create"))
                return Permission.AlbumCreate;

            if (value.Equals("album.read"))
                return Permission.AlbumRead;

            if (value.Equals("album.update"))
                return Permission.AlbumUpdate;

            if (value.Equals("album.delete"))
                return Permission.AlbumDelete;

            if (value.Equals("album.statistics"))
                return Permission.AlbumStatistics;

            if (value.Equals("album.share"))
                return Permission.AlbumShare;

            if (value.Equals("album.download"))
                return Permission.AlbumDownload;

            if (value.Equals("albumAsset.create"))
                return Permission.AlbumAssetCreate;

            if (value.Equals("albumAsset.delete"))
                return Permission.AlbumAssetDelete;

            if (value.Equals("albumUser.create"))
                return Permission.AlbumUserCreate;

            if (value.Equals("albumUser.update"))
                return Permission.AlbumUserUpdate;

            if (value.Equals("albumUser.delete"))
                return Permission.AlbumUserDelete;

            if (value.Equals("auth.changePassword"))
                return Permission.AuthChangePassword;

            if (value.Equals("authDevice.delete"))
                return Permission.AuthDeviceDelete;

            if (value.Equals("archive.read"))
                return Permission.ArchiveRead;

            if (value.Equals("duplicate.read"))
                return Permission.DuplicateRead;

            if (value.Equals("duplicate.delete"))
                return Permission.DuplicateDelete;

            if (value.Equals("face.create"))
                return Permission.FaceCreate;

            if (value.Equals("face.read"))
                return Permission.FaceRead;

            if (value.Equals("face.update"))
                return Permission.FaceUpdate;

            if (value.Equals("face.delete"))
                return Permission.FaceDelete;

            if (value.Equals("job.create"))
                return Permission.JobCreate;

            if (value.Equals("job.read"))
                return Permission.JobRead;

            if (value.Equals("library.create"))
                return Permission.LibraryCreate;

            if (value.Equals("library.read"))
                return Permission.LibraryRead;

            if (value.Equals("library.update"))
                return Permission.LibraryUpdate;

            if (value.Equals("library.delete"))
                return Permission.LibraryDelete;

            if (value.Equals("library.statistics"))
                return Permission.LibraryStatistics;

            if (value.Equals("timeline.read"))
                return Permission.TimelineRead;

            if (value.Equals("timeline.download"))
                return Permission.TimelineDownload;

            if (value.Equals("memory.create"))
                return Permission.MemoryCreate;

            if (value.Equals("memory.read"))
                return Permission.MemoryRead;

            if (value.Equals("memory.update"))
                return Permission.MemoryUpdate;

            if (value.Equals("memory.delete"))
                return Permission.MemoryDelete;

            if (value.Equals("memory.statistics"))
                return Permission.MemoryStatistics;

            if (value.Equals("memoryAsset.create"))
                return Permission.MemoryAssetCreate;

            if (value.Equals("memoryAsset.delete"))
                return Permission.MemoryAssetDelete;

            if (value.Equals("notification.create"))
                return Permission.NotificationCreate;

            if (value.Equals("notification.read"))
                return Permission.NotificationRead;

            if (value.Equals("notification.update"))
                return Permission.NotificationUpdate;

            if (value.Equals("notification.delete"))
                return Permission.NotificationDelete;

            if (value.Equals("partner.create"))
                return Permission.PartnerCreate;

            if (value.Equals("partner.read"))
                return Permission.PartnerRead;

            if (value.Equals("partner.update"))
                return Permission.PartnerUpdate;

            if (value.Equals("partner.delete"))
                return Permission.PartnerDelete;

            if (value.Equals("person.create"))
                return Permission.PersonCreate;

            if (value.Equals("person.read"))
                return Permission.PersonRead;

            if (value.Equals("person.update"))
                return Permission.PersonUpdate;

            if (value.Equals("person.delete"))
                return Permission.PersonDelete;

            if (value.Equals("person.statistics"))
                return Permission.PersonStatistics;

            if (value.Equals("person.merge"))
                return Permission.PersonMerge;

            if (value.Equals("person.reassign"))
                return Permission.PersonReassign;

            if (value.Equals("pinCode.create"))
                return Permission.PinCodeCreate;

            if (value.Equals("pinCode.update"))
                return Permission.PinCodeUpdate;

            if (value.Equals("pinCode.delete"))
                return Permission.PinCodeDelete;

            if (value.Equals("server.about"))
                return Permission.ServerAbout;

            if (value.Equals("server.apkLinks"))
                return Permission.ServerApkLinks;

            if (value.Equals("server.storage"))
                return Permission.ServerStorage;

            if (value.Equals("server.statistics"))
                return Permission.ServerStatistics;

            if (value.Equals("server.versionCheck"))
                return Permission.ServerVersionCheck;

            if (value.Equals("serverLicense.read"))
                return Permission.ServerLicenseRead;

            if (value.Equals("serverLicense.update"))
                return Permission.ServerLicenseUpdate;

            if (value.Equals("serverLicense.delete"))
                return Permission.ServerLicenseDelete;

            if (value.Equals("session.create"))
                return Permission.SessionCreate;

            if (value.Equals("session.read"))
                return Permission.SessionRead;

            if (value.Equals("session.update"))
                return Permission.SessionUpdate;

            if (value.Equals("session.delete"))
                return Permission.SessionDelete;

            if (value.Equals("session.lock"))
                return Permission.SessionLock;

            if (value.Equals("sharedLink.create"))
                return Permission.SharedLinkCreate;

            if (value.Equals("sharedLink.read"))
                return Permission.SharedLinkRead;

            if (value.Equals("sharedLink.update"))
                return Permission.SharedLinkUpdate;

            if (value.Equals("sharedLink.delete"))
                return Permission.SharedLinkDelete;

            if (value.Equals("stack.create"))
                return Permission.StackCreate;

            if (value.Equals("stack.read"))
                return Permission.StackRead;

            if (value.Equals("stack.update"))
                return Permission.StackUpdate;

            if (value.Equals("stack.delete"))
                return Permission.StackDelete;

            if (value.Equals("sync.stream"))
                return Permission.SyncStream;

            if (value.Equals("syncCheckpoint.read"))
                return Permission.SyncCheckpointRead;

            if (value.Equals("syncCheckpoint.update"))
                return Permission.SyncCheckpointUpdate;

            if (value.Equals("syncCheckpoint.delete"))
                return Permission.SyncCheckpointDelete;

            if (value.Equals("systemConfig.read"))
                return Permission.SystemConfigRead;

            if (value.Equals("systemConfig.update"))
                return Permission.SystemConfigUpdate;

            if (value.Equals("systemMetadata.read"))
                return Permission.SystemMetadataRead;

            if (value.Equals("systemMetadata.update"))
                return Permission.SystemMetadataUpdate;

            if (value.Equals("tag.create"))
                return Permission.TagCreate;

            if (value.Equals("tag.read"))
                return Permission.TagRead;

            if (value.Equals("tag.update"))
                return Permission.TagUpdate;

            if (value.Equals("tag.delete"))
                return Permission.TagDelete;

            if (value.Equals("tag.asset"))
                return Permission.TagAsset;

            if (value.Equals("user.read"))
                return Permission.UserRead;

            if (value.Equals("user.update"))
                return Permission.UserUpdate;

            if (value.Equals("userLicense.create"))
                return Permission.UserLicenseCreate;

            if (value.Equals("userLicense.read"))
                return Permission.UserLicenseRead;

            if (value.Equals("userLicense.update"))
                return Permission.UserLicenseUpdate;

            if (value.Equals("userLicense.delete"))
                return Permission.UserLicenseDelete;

            if (value.Equals("userOnboarding.read"))
                return Permission.UserOnboardingRead;

            if (value.Equals("userOnboarding.update"))
                return Permission.UserOnboardingUpdate;

            if (value.Equals("userOnboarding.delete"))
                return Permission.UserOnboardingDelete;

            if (value.Equals("userPreference.read"))
                return Permission.UserPreferenceRead;

            if (value.Equals("userPreference.update"))
                return Permission.UserPreferenceUpdate;

            if (value.Equals("userProfileImage.create"))
                return Permission.UserProfileImageCreate;

            if (value.Equals("userProfileImage.read"))
                return Permission.UserProfileImageRead;

            if (value.Equals("userProfileImage.update"))
                return Permission.UserProfileImageUpdate;

            if (value.Equals("userProfileImage.delete"))
                return Permission.UserProfileImageDelete;

            if (value.Equals("adminUser.create"))
                return Permission.AdminUserCreate;

            if (value.Equals("adminUser.read"))
                return Permission.AdminUserRead;

            if (value.Equals("adminUser.update"))
                return Permission.AdminUserUpdate;

            if (value.Equals("adminUser.delete"))
                return Permission.AdminUserDelete;

            if (value.Equals("adminSession.read"))
                return Permission.AdminSessionRead;

            if (value.Equals("adminAuth.unlinkAll"))
                return Permission.AdminAuthUnlinkAll;

            throw new NotImplementedException($"Could not convert value to type Permission: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="Permission"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Permission? FromStringOrDefault(string value)
        {
            if (value.Equals("all"))
                return Permission.All;

            if (value.Equals("activity.create"))
                return Permission.ActivityCreate;

            if (value.Equals("activity.read"))
                return Permission.ActivityRead;

            if (value.Equals("activity.update"))
                return Permission.ActivityUpdate;

            if (value.Equals("activity.delete"))
                return Permission.ActivityDelete;

            if (value.Equals("activity.statistics"))
                return Permission.ActivityStatistics;

            if (value.Equals("apiKey.create"))
                return Permission.ApiKeyCreate;

            if (value.Equals("apiKey.read"))
                return Permission.ApiKeyRead;

            if (value.Equals("apiKey.update"))
                return Permission.ApiKeyUpdate;

            if (value.Equals("apiKey.delete"))
                return Permission.ApiKeyDelete;

            if (value.Equals("asset.read"))
                return Permission.AssetRead;

            if (value.Equals("asset.update"))
                return Permission.AssetUpdate;

            if (value.Equals("asset.delete"))
                return Permission.AssetDelete;

            if (value.Equals("asset.statistics"))
                return Permission.AssetStatistics;

            if (value.Equals("asset.share"))
                return Permission.AssetShare;

            if (value.Equals("asset.view"))
                return Permission.AssetView;

            if (value.Equals("asset.download"))
                return Permission.AssetDownload;

            if (value.Equals("asset.upload"))
                return Permission.AssetUpload;

            if (value.Equals("asset.replace"))
                return Permission.AssetReplace;

            if (value.Equals("album.create"))
                return Permission.AlbumCreate;

            if (value.Equals("album.read"))
                return Permission.AlbumRead;

            if (value.Equals("album.update"))
                return Permission.AlbumUpdate;

            if (value.Equals("album.delete"))
                return Permission.AlbumDelete;

            if (value.Equals("album.statistics"))
                return Permission.AlbumStatistics;

            if (value.Equals("album.share"))
                return Permission.AlbumShare;

            if (value.Equals("album.download"))
                return Permission.AlbumDownload;

            if (value.Equals("albumAsset.create"))
                return Permission.AlbumAssetCreate;

            if (value.Equals("albumAsset.delete"))
                return Permission.AlbumAssetDelete;

            if (value.Equals("albumUser.create"))
                return Permission.AlbumUserCreate;

            if (value.Equals("albumUser.update"))
                return Permission.AlbumUserUpdate;

            if (value.Equals("albumUser.delete"))
                return Permission.AlbumUserDelete;

            if (value.Equals("auth.changePassword"))
                return Permission.AuthChangePassword;

            if (value.Equals("authDevice.delete"))
                return Permission.AuthDeviceDelete;

            if (value.Equals("archive.read"))
                return Permission.ArchiveRead;

            if (value.Equals("duplicate.read"))
                return Permission.DuplicateRead;

            if (value.Equals("duplicate.delete"))
                return Permission.DuplicateDelete;

            if (value.Equals("face.create"))
                return Permission.FaceCreate;

            if (value.Equals("face.read"))
                return Permission.FaceRead;

            if (value.Equals("face.update"))
                return Permission.FaceUpdate;

            if (value.Equals("face.delete"))
                return Permission.FaceDelete;

            if (value.Equals("job.create"))
                return Permission.JobCreate;

            if (value.Equals("job.read"))
                return Permission.JobRead;

            if (value.Equals("library.create"))
                return Permission.LibraryCreate;

            if (value.Equals("library.read"))
                return Permission.LibraryRead;

            if (value.Equals("library.update"))
                return Permission.LibraryUpdate;

            if (value.Equals("library.delete"))
                return Permission.LibraryDelete;

            if (value.Equals("library.statistics"))
                return Permission.LibraryStatistics;

            if (value.Equals("timeline.read"))
                return Permission.TimelineRead;

            if (value.Equals("timeline.download"))
                return Permission.TimelineDownload;

            if (value.Equals("memory.create"))
                return Permission.MemoryCreate;

            if (value.Equals("memory.read"))
                return Permission.MemoryRead;

            if (value.Equals("memory.update"))
                return Permission.MemoryUpdate;

            if (value.Equals("memory.delete"))
                return Permission.MemoryDelete;

            if (value.Equals("memory.statistics"))
                return Permission.MemoryStatistics;

            if (value.Equals("memoryAsset.create"))
                return Permission.MemoryAssetCreate;

            if (value.Equals("memoryAsset.delete"))
                return Permission.MemoryAssetDelete;

            if (value.Equals("notification.create"))
                return Permission.NotificationCreate;

            if (value.Equals("notification.read"))
                return Permission.NotificationRead;

            if (value.Equals("notification.update"))
                return Permission.NotificationUpdate;

            if (value.Equals("notification.delete"))
                return Permission.NotificationDelete;

            if (value.Equals("partner.create"))
                return Permission.PartnerCreate;

            if (value.Equals("partner.read"))
                return Permission.PartnerRead;

            if (value.Equals("partner.update"))
                return Permission.PartnerUpdate;

            if (value.Equals("partner.delete"))
                return Permission.PartnerDelete;

            if (value.Equals("person.create"))
                return Permission.PersonCreate;

            if (value.Equals("person.read"))
                return Permission.PersonRead;

            if (value.Equals("person.update"))
                return Permission.PersonUpdate;

            if (value.Equals("person.delete"))
                return Permission.PersonDelete;

            if (value.Equals("person.statistics"))
                return Permission.PersonStatistics;

            if (value.Equals("person.merge"))
                return Permission.PersonMerge;

            if (value.Equals("person.reassign"))
                return Permission.PersonReassign;

            if (value.Equals("pinCode.create"))
                return Permission.PinCodeCreate;

            if (value.Equals("pinCode.update"))
                return Permission.PinCodeUpdate;

            if (value.Equals("pinCode.delete"))
                return Permission.PinCodeDelete;

            if (value.Equals("server.about"))
                return Permission.ServerAbout;

            if (value.Equals("server.apkLinks"))
                return Permission.ServerApkLinks;

            if (value.Equals("server.storage"))
                return Permission.ServerStorage;

            if (value.Equals("server.statistics"))
                return Permission.ServerStatistics;

            if (value.Equals("server.versionCheck"))
                return Permission.ServerVersionCheck;

            if (value.Equals("serverLicense.read"))
                return Permission.ServerLicenseRead;

            if (value.Equals("serverLicense.update"))
                return Permission.ServerLicenseUpdate;

            if (value.Equals("serverLicense.delete"))
                return Permission.ServerLicenseDelete;

            if (value.Equals("session.create"))
                return Permission.SessionCreate;

            if (value.Equals("session.read"))
                return Permission.SessionRead;

            if (value.Equals("session.update"))
                return Permission.SessionUpdate;

            if (value.Equals("session.delete"))
                return Permission.SessionDelete;

            if (value.Equals("session.lock"))
                return Permission.SessionLock;

            if (value.Equals("sharedLink.create"))
                return Permission.SharedLinkCreate;

            if (value.Equals("sharedLink.read"))
                return Permission.SharedLinkRead;

            if (value.Equals("sharedLink.update"))
                return Permission.SharedLinkUpdate;

            if (value.Equals("sharedLink.delete"))
                return Permission.SharedLinkDelete;

            if (value.Equals("stack.create"))
                return Permission.StackCreate;

            if (value.Equals("stack.read"))
                return Permission.StackRead;

            if (value.Equals("stack.update"))
                return Permission.StackUpdate;

            if (value.Equals("stack.delete"))
                return Permission.StackDelete;

            if (value.Equals("sync.stream"))
                return Permission.SyncStream;

            if (value.Equals("syncCheckpoint.read"))
                return Permission.SyncCheckpointRead;

            if (value.Equals("syncCheckpoint.update"))
                return Permission.SyncCheckpointUpdate;

            if (value.Equals("syncCheckpoint.delete"))
                return Permission.SyncCheckpointDelete;

            if (value.Equals("systemConfig.read"))
                return Permission.SystemConfigRead;

            if (value.Equals("systemConfig.update"))
                return Permission.SystemConfigUpdate;

            if (value.Equals("systemMetadata.read"))
                return Permission.SystemMetadataRead;

            if (value.Equals("systemMetadata.update"))
                return Permission.SystemMetadataUpdate;

            if (value.Equals("tag.create"))
                return Permission.TagCreate;

            if (value.Equals("tag.read"))
                return Permission.TagRead;

            if (value.Equals("tag.update"))
                return Permission.TagUpdate;

            if (value.Equals("tag.delete"))
                return Permission.TagDelete;

            if (value.Equals("tag.asset"))
                return Permission.TagAsset;

            if (value.Equals("user.read"))
                return Permission.UserRead;

            if (value.Equals("user.update"))
                return Permission.UserUpdate;

            if (value.Equals("userLicense.create"))
                return Permission.UserLicenseCreate;

            if (value.Equals("userLicense.read"))
                return Permission.UserLicenseRead;

            if (value.Equals("userLicense.update"))
                return Permission.UserLicenseUpdate;

            if (value.Equals("userLicense.delete"))
                return Permission.UserLicenseDelete;

            if (value.Equals("userOnboarding.read"))
                return Permission.UserOnboardingRead;

            if (value.Equals("userOnboarding.update"))
                return Permission.UserOnboardingUpdate;

            if (value.Equals("userOnboarding.delete"))
                return Permission.UserOnboardingDelete;

            if (value.Equals("userPreference.read"))
                return Permission.UserPreferenceRead;

            if (value.Equals("userPreference.update"))
                return Permission.UserPreferenceUpdate;

            if (value.Equals("userProfileImage.create"))
                return Permission.UserProfileImageCreate;

            if (value.Equals("userProfileImage.read"))
                return Permission.UserProfileImageRead;

            if (value.Equals("userProfileImage.update"))
                return Permission.UserProfileImageUpdate;

            if (value.Equals("userProfileImage.delete"))
                return Permission.UserProfileImageDelete;

            if (value.Equals("adminUser.create"))
                return Permission.AdminUserCreate;

            if (value.Equals("adminUser.read"))
                return Permission.AdminUserRead;

            if (value.Equals("adminUser.update"))
                return Permission.AdminUserUpdate;

            if (value.Equals("adminUser.delete"))
                return Permission.AdminUserDelete;

            if (value.Equals("adminSession.read"))
                return Permission.AdminSessionRead;

            if (value.Equals("adminAuth.unlinkAll"))
                return Permission.AdminAuthUnlinkAll;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="Permission"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(Permission value)
        {
            if (value == Permission.All)
                return "all";

            if (value == Permission.ActivityCreate)
                return "activity.create";

            if (value == Permission.ActivityRead)
                return "activity.read";

            if (value == Permission.ActivityUpdate)
                return "activity.update";

            if (value == Permission.ActivityDelete)
                return "activity.delete";

            if (value == Permission.ActivityStatistics)
                return "activity.statistics";

            if (value == Permission.ApiKeyCreate)
                return "apiKey.create";

            if (value == Permission.ApiKeyRead)
                return "apiKey.read";

            if (value == Permission.ApiKeyUpdate)
                return "apiKey.update";

            if (value == Permission.ApiKeyDelete)
                return "apiKey.delete";

            if (value == Permission.AssetRead)
                return "asset.read";

            if (value == Permission.AssetUpdate)
                return "asset.update";

            if (value == Permission.AssetDelete)
                return "asset.delete";

            if (value == Permission.AssetStatistics)
                return "asset.statistics";

            if (value == Permission.AssetShare)
                return "asset.share";

            if (value == Permission.AssetView)
                return "asset.view";

            if (value == Permission.AssetDownload)
                return "asset.download";

            if (value == Permission.AssetUpload)
                return "asset.upload";

            if (value == Permission.AssetReplace)
                return "asset.replace";

            if (value == Permission.AlbumCreate)
                return "album.create";

            if (value == Permission.AlbumRead)
                return "album.read";

            if (value == Permission.AlbumUpdate)
                return "album.update";

            if (value == Permission.AlbumDelete)
                return "album.delete";

            if (value == Permission.AlbumStatistics)
                return "album.statistics";

            if (value == Permission.AlbumShare)
                return "album.share";

            if (value == Permission.AlbumDownload)
                return "album.download";

            if (value == Permission.AlbumAssetCreate)
                return "albumAsset.create";

            if (value == Permission.AlbumAssetDelete)
                return "albumAsset.delete";

            if (value == Permission.AlbumUserCreate)
                return "albumUser.create";

            if (value == Permission.AlbumUserUpdate)
                return "albumUser.update";

            if (value == Permission.AlbumUserDelete)
                return "albumUser.delete";

            if (value == Permission.AuthChangePassword)
                return "auth.changePassword";

            if (value == Permission.AuthDeviceDelete)
                return "authDevice.delete";

            if (value == Permission.ArchiveRead)
                return "archive.read";

            if (value == Permission.DuplicateRead)
                return "duplicate.read";

            if (value == Permission.DuplicateDelete)
                return "duplicate.delete";

            if (value == Permission.FaceCreate)
                return "face.create";

            if (value == Permission.FaceRead)
                return "face.read";

            if (value == Permission.FaceUpdate)
                return "face.update";

            if (value == Permission.FaceDelete)
                return "face.delete";

            if (value == Permission.JobCreate)
                return "job.create";

            if (value == Permission.JobRead)
                return "job.read";

            if (value == Permission.LibraryCreate)
                return "library.create";

            if (value == Permission.LibraryRead)
                return "library.read";

            if (value == Permission.LibraryUpdate)
                return "library.update";

            if (value == Permission.LibraryDelete)
                return "library.delete";

            if (value == Permission.LibraryStatistics)
                return "library.statistics";

            if (value == Permission.TimelineRead)
                return "timeline.read";

            if (value == Permission.TimelineDownload)
                return "timeline.download";

            if (value == Permission.MemoryCreate)
                return "memory.create";

            if (value == Permission.MemoryRead)
                return "memory.read";

            if (value == Permission.MemoryUpdate)
                return "memory.update";

            if (value == Permission.MemoryDelete)
                return "memory.delete";

            if (value == Permission.MemoryStatistics)
                return "memory.statistics";

            if (value == Permission.MemoryAssetCreate)
                return "memoryAsset.create";

            if (value == Permission.MemoryAssetDelete)
                return "memoryAsset.delete";

            if (value == Permission.NotificationCreate)
                return "notification.create";

            if (value == Permission.NotificationRead)
                return "notification.read";

            if (value == Permission.NotificationUpdate)
                return "notification.update";

            if (value == Permission.NotificationDelete)
                return "notification.delete";

            if (value == Permission.PartnerCreate)
                return "partner.create";

            if (value == Permission.PartnerRead)
                return "partner.read";

            if (value == Permission.PartnerUpdate)
                return "partner.update";

            if (value == Permission.PartnerDelete)
                return "partner.delete";

            if (value == Permission.PersonCreate)
                return "person.create";

            if (value == Permission.PersonRead)
                return "person.read";

            if (value == Permission.PersonUpdate)
                return "person.update";

            if (value == Permission.PersonDelete)
                return "person.delete";

            if (value == Permission.PersonStatistics)
                return "person.statistics";

            if (value == Permission.PersonMerge)
                return "person.merge";

            if (value == Permission.PersonReassign)
                return "person.reassign";

            if (value == Permission.PinCodeCreate)
                return "pinCode.create";

            if (value == Permission.PinCodeUpdate)
                return "pinCode.update";

            if (value == Permission.PinCodeDelete)
                return "pinCode.delete";

            if (value == Permission.ServerAbout)
                return "server.about";

            if (value == Permission.ServerApkLinks)
                return "server.apkLinks";

            if (value == Permission.ServerStorage)
                return "server.storage";

            if (value == Permission.ServerStatistics)
                return "server.statistics";

            if (value == Permission.ServerVersionCheck)
                return "server.versionCheck";

            if (value == Permission.ServerLicenseRead)
                return "serverLicense.read";

            if (value == Permission.ServerLicenseUpdate)
                return "serverLicense.update";

            if (value == Permission.ServerLicenseDelete)
                return "serverLicense.delete";

            if (value == Permission.SessionCreate)
                return "session.create";

            if (value == Permission.SessionRead)
                return "session.read";

            if (value == Permission.SessionUpdate)
                return "session.update";

            if (value == Permission.SessionDelete)
                return "session.delete";

            if (value == Permission.SessionLock)
                return "session.lock";

            if (value == Permission.SharedLinkCreate)
                return "sharedLink.create";

            if (value == Permission.SharedLinkRead)
                return "sharedLink.read";

            if (value == Permission.SharedLinkUpdate)
                return "sharedLink.update";

            if (value == Permission.SharedLinkDelete)
                return "sharedLink.delete";

            if (value == Permission.StackCreate)
                return "stack.create";

            if (value == Permission.StackRead)
                return "stack.read";

            if (value == Permission.StackUpdate)
                return "stack.update";

            if (value == Permission.StackDelete)
                return "stack.delete";

            if (value == Permission.SyncStream)
                return "sync.stream";

            if (value == Permission.SyncCheckpointRead)
                return "syncCheckpoint.read";

            if (value == Permission.SyncCheckpointUpdate)
                return "syncCheckpoint.update";

            if (value == Permission.SyncCheckpointDelete)
                return "syncCheckpoint.delete";

            if (value == Permission.SystemConfigRead)
                return "systemConfig.read";

            if (value == Permission.SystemConfigUpdate)
                return "systemConfig.update";

            if (value == Permission.SystemMetadataRead)
                return "systemMetadata.read";

            if (value == Permission.SystemMetadataUpdate)
                return "systemMetadata.update";

            if (value == Permission.TagCreate)
                return "tag.create";

            if (value == Permission.TagRead)
                return "tag.read";

            if (value == Permission.TagUpdate)
                return "tag.update";

            if (value == Permission.TagDelete)
                return "tag.delete";

            if (value == Permission.TagAsset)
                return "tag.asset";

            if (value == Permission.UserRead)
                return "user.read";

            if (value == Permission.UserUpdate)
                return "user.update";

            if (value == Permission.UserLicenseCreate)
                return "userLicense.create";

            if (value == Permission.UserLicenseRead)
                return "userLicense.read";

            if (value == Permission.UserLicenseUpdate)
                return "userLicense.update";

            if (value == Permission.UserLicenseDelete)
                return "userLicense.delete";

            if (value == Permission.UserOnboardingRead)
                return "userOnboarding.read";

            if (value == Permission.UserOnboardingUpdate)
                return "userOnboarding.update";

            if (value == Permission.UserOnboardingDelete)
                return "userOnboarding.delete";

            if (value == Permission.UserPreferenceRead)
                return "userPreference.read";

            if (value == Permission.UserPreferenceUpdate)
                return "userPreference.update";

            if (value == Permission.UserProfileImageCreate)
                return "userProfileImage.create";

            if (value == Permission.UserProfileImageRead)
                return "userProfileImage.read";

            if (value == Permission.UserProfileImageUpdate)
                return "userProfileImage.update";

            if (value == Permission.UserProfileImageDelete)
                return "userProfileImage.delete";

            if (value == Permission.AdminUserCreate)
                return "adminUser.create";

            if (value == Permission.AdminUserRead)
                return "adminUser.read";

            if (value == Permission.AdminUserUpdate)
                return "adminUser.update";

            if (value == Permission.AdminUserDelete)
                return "adminUser.delete";

            if (value == Permission.AdminSessionRead)
                return "adminSession.read";

            if (value == Permission.AdminAuthUnlinkAll)
                return "adminAuth.unlinkAll";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Permission"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class PermissionJsonConverter : JsonConverter<Permission>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Permission Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Permission? result = rawValue == null
                ? null
                : PermissionValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the Permission to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="permission"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Permission permission, JsonSerializerOptions options)
        {
            writer.WriteStringValue(PermissionValueConverter.ToJsonValue(permission).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Permission"/>
    /// </summary>
    public class PermissionNullableJsonConverter : JsonConverter<Permission?>
    {
        /// <summary>
        /// Returns a Permission from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Permission? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Permission? result = rawValue == null
                ? null
                : PermissionValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the Permission to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="permission"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Permission? permission, JsonSerializerOptions options)
        {
            writer.WriteStringValue(permission.HasValue ? PermissionValueConverter.ToJsonValue(permission.Value).ToString() : "null");
        }
    }
}
