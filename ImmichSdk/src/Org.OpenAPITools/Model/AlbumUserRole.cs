// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines AlbumUserRole
    /// </summary>
    public enum AlbumUserRole
    {
        /// <summary>
        /// Enum Editor for value: editor
        /// </summary>
        Editor = 1,

        /// <summary>
        /// Enum Viewer for value: viewer
        /// </summary>
        Viewer = 2
    }

    /// <summary>
    /// Converts <see cref="AlbumUserRole"/> to and from the JSON value
    /// </summary>
    public static class AlbumUserRoleValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="AlbumUserRole"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AlbumUserRole FromString(string value)
        {
            if (value.Equals("editor"))
                return AlbumUserRole.Editor;

            if (value.Equals("viewer"))
                return AlbumUserRole.Viewer;

            throw new NotImplementedException($"Could not convert value to type AlbumUserRole: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="AlbumUserRole"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AlbumUserRole? FromStringOrDefault(string value)
        {
            if (value.Equals("editor"))
                return AlbumUserRole.Editor;

            if (value.Equals("viewer"))
                return AlbumUserRole.Viewer;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AlbumUserRole"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(AlbumUserRole value)
        {
            if (value == AlbumUserRole.Editor)
                return "editor";

            if (value == AlbumUserRole.Viewer)
                return "viewer";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AlbumUserRole"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class AlbumUserRoleJsonConverter : JsonConverter<AlbumUserRole>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override AlbumUserRole Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            AlbumUserRole? result = rawValue == null
                ? null
                : AlbumUserRoleValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the AlbumUserRole to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="albumUserRole"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, AlbumUserRole albumUserRole, JsonSerializerOptions options)
        {
            writer.WriteStringValue(AlbumUserRoleValueConverter.ToJsonValue(albumUserRole).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AlbumUserRole"/>
    /// </summary>
    public class AlbumUserRoleNullableJsonConverter : JsonConverter<AlbumUserRole?>
    {
        /// <summary>
        /// Returns a AlbumUserRole from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override AlbumUserRole? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            AlbumUserRole? result = rawValue == null
                ? null
                : AlbumUserRoleValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the AlbumUserRole to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="albumUserRole"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, AlbumUserRole? albumUserRole, JsonSerializerOptions options)
        {
            writer.WriteStringValue(albumUserRole.HasValue ? AlbumUserRoleValueConverter.ToJsonValue(albumUserRole.Value).ToString() : "null");
        }
    }
}
