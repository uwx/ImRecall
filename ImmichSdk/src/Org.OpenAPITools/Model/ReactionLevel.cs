// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines ReactionLevel
    /// </summary>
    public enum ReactionLevel
    {
        /// <summary>
        /// Enum Album for value: album
        /// </summary>
        Album = 1,

        /// <summary>
        /// Enum Asset for value: asset
        /// </summary>
        Asset = 2
    }

    /// <summary>
    /// Converts <see cref="ReactionLevel"/> to and from the JSON value
    /// </summary>
    public static class ReactionLevelValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ReactionLevel"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ReactionLevel FromString(string value)
        {
            if (value.Equals("album"))
                return ReactionLevel.Album;

            if (value.Equals("asset"))
                return ReactionLevel.Asset;

            throw new NotImplementedException($"Could not convert value to type ReactionLevel: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="ReactionLevel"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ReactionLevel? FromStringOrDefault(string value)
        {
            if (value.Equals("album"))
                return ReactionLevel.Album;

            if (value.Equals("asset"))
                return ReactionLevel.Asset;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ReactionLevel"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(ReactionLevel value)
        {
            if (value == ReactionLevel.Album)
                return "album";

            if (value == ReactionLevel.Asset)
                return "asset";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ReactionLevel"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ReactionLevelJsonConverter : JsonConverter<ReactionLevel>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ReactionLevel Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ReactionLevel? result = rawValue == null
                ? null
                : ReactionLevelValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ReactionLevel to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="reactionLevel"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ReactionLevel reactionLevel, JsonSerializerOptions options)
        {
            writer.WriteStringValue(ReactionLevelValueConverter.ToJsonValue(reactionLevel).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ReactionLevel"/>
    /// </summary>
    public class ReactionLevelNullableJsonConverter : JsonConverter<ReactionLevel?>
    {
        /// <summary>
        /// Returns a ReactionLevel from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ReactionLevel? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ReactionLevel? result = rawValue == null
                ? null
                : ReactionLevelValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ReactionLevel to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="reactionLevel"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ReactionLevel? reactionLevel, JsonSerializerOptions options)
        {
            writer.WriteStringValue(reactionLevel.HasValue ? ReactionLevelValueConverter.ToJsonValue(reactionLevel.Value).ToString() : "null");
        }
    }
}
