// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ExifResponseDto
    /// </summary>
    public partial class ExifResponseDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExifResponseDto" /> class.
        /// </summary>
        /// <param name="city">city</param>
        /// <param name="country">country</param>
        /// <param name="dateTimeOriginal">dateTimeOriginal</param>
        /// <param name="description">description</param>
        /// <param name="exifImageHeight">exifImageHeight</param>
        /// <param name="exifImageWidth">exifImageWidth</param>
        /// <param name="exposureTime">exposureTime</param>
        /// <param name="fNumber">fNumber</param>
        /// <param name="fileSizeInByte">fileSizeInByte</param>
        /// <param name="focalLength">focalLength</param>
        /// <param name="iso">iso</param>
        /// <param name="latitude">latitude</param>
        /// <param name="lensModel">lensModel</param>
        /// <param name="longitude">longitude</param>
        /// <param name="make">make</param>
        /// <param name="model">model</param>
        /// <param name="modifyDate">modifyDate</param>
        /// <param name="orientation">orientation</param>
        /// <param name="projectionType">projectionType</param>
        /// <param name="rating">rating</param>
        /// <param name="state">state</param>
        /// <param name="varTimeZone">varTimeZone</param>
        [JsonConstructor]
        public ExifResponseDto(Option<string?> city = default, Option<string?> country = default, Option<DateTime?> dateTimeOriginal = default, Option<string?> description = default, Option<decimal?> exifImageHeight = default, Option<decimal?> exifImageWidth = default, Option<string?> exposureTime = default, Option<decimal?> fNumber = default, Option<long?> fileSizeInByte = default, Option<decimal?> focalLength = default, Option<decimal?> iso = default, Option<decimal?> latitude = default, Option<string?> lensModel = default, Option<decimal?> longitude = default, Option<string?> make = default, Option<string?> model = default, Option<DateTime?> modifyDate = default, Option<string?> orientation = default, Option<string?> projectionType = default, Option<decimal?> rating = default, Option<string?> state = default, Option<string?> varTimeZone = default)
        {
            CityOption = city;
            CountryOption = country;
            DateTimeOriginalOption = dateTimeOriginal;
            DescriptionOption = description;
            ExifImageHeightOption = exifImageHeight;
            ExifImageWidthOption = exifImageWidth;
            ExposureTimeOption = exposureTime;
            FNumberOption = fNumber;
            FileSizeInByteOption = fileSizeInByte;
            FocalLengthOption = focalLength;
            IsoOption = iso;
            LatitudeOption = latitude;
            LensModelOption = lensModel;
            LongitudeOption = longitude;
            MakeOption = make;
            ModelOption = model;
            ModifyDateOption = modifyDate;
            OrientationOption = orientation;
            ProjectionTypeOption = projectionType;
            RatingOption = rating;
            StateOption = state;
            VarTimeZoneOption = varTimeZone;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of City
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CityOption { get; private set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [JsonPropertyName("city")]
        public string? City { get { return this.CityOption; } set { this.CityOption = new(value); } }

        /// <summary>
        /// Used to track the state of Country
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CountryOption { get; private set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [JsonPropertyName("country")]
        public string? Country { get { return this.CountryOption; } set { this.CountryOption = new(value); } }

        /// <summary>
        /// Used to track the state of DateTimeOriginal
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DateTimeOriginalOption { get; private set; }

        /// <summary>
        /// Gets or Sets DateTimeOriginal
        /// </summary>
        [JsonPropertyName("dateTimeOriginal")]
        public DateTime? DateTimeOriginal { get { return this.DateTimeOriginalOption; } set { this.DateTimeOriginalOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExifImageHeight
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> ExifImageHeightOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExifImageHeight
        /// </summary>
        [JsonPropertyName("exifImageHeight")]
        public decimal? ExifImageHeight { get { return this.ExifImageHeightOption; } set { this.ExifImageHeightOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExifImageWidth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> ExifImageWidthOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExifImageWidth
        /// </summary>
        [JsonPropertyName("exifImageWidth")]
        public decimal? ExifImageWidth { get { return this.ExifImageWidthOption; } set { this.ExifImageWidthOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExposureTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExposureTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExposureTime
        /// </summary>
        [JsonPropertyName("exposureTime")]
        public string? ExposureTime { get { return this.ExposureTimeOption; } set { this.ExposureTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of FNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> FNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets FNumber
        /// </summary>
        [JsonPropertyName("fNumber")]
        public decimal? FNumber { get { return this.FNumberOption; } set { this.FNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of FileSizeInByte
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> FileSizeInByteOption { get; private set; }

        /// <summary>
        /// Gets or Sets FileSizeInByte
        /// </summary>
        [JsonPropertyName("fileSizeInByte")]
        public long? FileSizeInByte { get { return this.FileSizeInByteOption; } set { this.FileSizeInByteOption = new(value); } }

        /// <summary>
        /// Used to track the state of FocalLength
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> FocalLengthOption { get; private set; }

        /// <summary>
        /// Gets or Sets FocalLength
        /// </summary>
        [JsonPropertyName("focalLength")]
        public decimal? FocalLength { get { return this.FocalLengthOption; } set { this.FocalLengthOption = new(value); } }

        /// <summary>
        /// Used to track the state of Iso
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> IsoOption { get; private set; }

        /// <summary>
        /// Gets or Sets Iso
        /// </summary>
        [JsonPropertyName("iso")]
        public decimal? Iso { get { return this.IsoOption; } set { this.IsoOption = new(value); } }

        /// <summary>
        /// Used to track the state of Latitude
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> LatitudeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [JsonPropertyName("latitude")]
        public decimal? Latitude { get { return this.LatitudeOption; } set { this.LatitudeOption = new(value); } }

        /// <summary>
        /// Used to track the state of LensModel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LensModelOption { get; private set; }

        /// <summary>
        /// Gets or Sets LensModel
        /// </summary>
        [JsonPropertyName("lensModel")]
        public string? LensModel { get { return this.LensModelOption; } set { this.LensModelOption = new(value); } }

        /// <summary>
        /// Used to track the state of Longitude
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> LongitudeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Longitude
        /// </summary>
        [JsonPropertyName("longitude")]
        public decimal? Longitude { get { return this.LongitudeOption; } set { this.LongitudeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Make
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MakeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Make
        /// </summary>
        [JsonPropertyName("make")]
        public string? Make { get { return this.MakeOption; } set { this.MakeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Model
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ModelOption { get; private set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [JsonPropertyName("model")]
        public string? Model { get { return this.ModelOption; } set { this.ModelOption = new(value); } }

        /// <summary>
        /// Used to track the state of ModifyDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> ModifyDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets ModifyDate
        /// </summary>
        [JsonPropertyName("modifyDate")]
        public DateTime? ModifyDate { get { return this.ModifyDateOption; } set { this.ModifyDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Orientation
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OrientationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Orientation
        /// </summary>
        [JsonPropertyName("orientation")]
        public string? Orientation { get { return this.OrientationOption; } set { this.OrientationOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProjectionType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProjectionTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ProjectionType
        /// </summary>
        [JsonPropertyName("projectionType")]
        public string? ProjectionType { get { return this.ProjectionTypeOption; } set { this.ProjectionTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Rating
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> RatingOption { get; private set; }

        /// <summary>
        /// Gets or Sets Rating
        /// </summary>
        [JsonPropertyName("rating")]
        public decimal? Rating { get { return this.RatingOption; } set { this.RatingOption = new(value); } }

        /// <summary>
        /// Used to track the state of State
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StateOption { get; private set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonPropertyName("state")]
        public string? State { get { return this.StateOption; } set { this.StateOption = new(value); } }

        /// <summary>
        /// Used to track the state of VarTimeZone
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VarTimeZoneOption { get; private set; }

        /// <summary>
        /// Gets or Sets VarTimeZone
        /// </summary>
        [JsonPropertyName("timeZone")]
        public string? VarTimeZone { get { return this.VarTimeZoneOption; } set { this.VarTimeZoneOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExifResponseDto {\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  DateTimeOriginal: ").Append(DateTimeOriginal).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExifImageHeight: ").Append(ExifImageHeight).Append("\n");
            sb.Append("  ExifImageWidth: ").Append(ExifImageWidth).Append("\n");
            sb.Append("  ExposureTime: ").Append(ExposureTime).Append("\n");
            sb.Append("  FNumber: ").Append(FNumber).Append("\n");
            sb.Append("  FileSizeInByte: ").Append(FileSizeInByte).Append("\n");
            sb.Append("  FocalLength: ").Append(FocalLength).Append("\n");
            sb.Append("  Iso: ").Append(Iso).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  LensModel: ").Append(LensModel).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Make: ").Append(Make).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  ModifyDate: ").Append(ModifyDate).Append("\n");
            sb.Append("  Orientation: ").Append(Orientation).Append("\n");
            sb.Append("  ProjectionType: ").Append(ProjectionType).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  VarTimeZone: ").Append(VarTimeZone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ExifResponseDto" />
    /// </summary>
    public class ExifResponseDtoJsonConverter : JsonConverter<ExifResponseDto>
    {
        /// <summary>
        /// The format to use to serialize DateTimeOriginal
        /// </summary>
        public static string DateTimeOriginalFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ModifyDate
        /// </summary>
        public static string ModifyDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ExifResponseDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ExifResponseDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> city = default;
            Option<string?> country = default;
            Option<DateTime?> dateTimeOriginal = default;
            Option<string?> description = default;
            Option<decimal?> exifImageHeight = default;
            Option<decimal?> exifImageWidth = default;
            Option<string?> exposureTime = default;
            Option<decimal?> fNumber = default;
            Option<long?> fileSizeInByte = default;
            Option<decimal?> focalLength = default;
            Option<decimal?> iso = default;
            Option<decimal?> latitude = default;
            Option<string?> lensModel = default;
            Option<decimal?> longitude = default;
            Option<string?> make = default;
            Option<string?> model = default;
            Option<DateTime?> modifyDate = default;
            Option<string?> orientation = default;
            Option<string?> projectionType = default;
            Option<decimal?> rating = default;
            Option<string?> state = default;
            Option<string?> varTimeZone = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "city":
                            city = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "country":
                            country = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "dateTimeOriginal":
                            dateTimeOriginal = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "exifImageHeight":
                            exifImageHeight = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "exifImageWidth":
                            exifImageWidth = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "exposureTime":
                            exposureTime = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "fNumber":
                            fNumber = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "fileSizeInByte":
                            fileSizeInByte = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "focalLength":
                            focalLength = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "iso":
                            iso = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "latitude":
                            latitude = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "lensModel":
                            lensModel = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "longitude":
                            longitude = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "make":
                            make = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "model":
                            model = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "modifyDate":
                            modifyDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "orientation":
                            orientation = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "projectionType":
                            projectionType = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "rating":
                            rating = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "state":
                            state = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "timeZone":
                            varTimeZone = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new ExifResponseDto(city, country, dateTimeOriginal, description, exifImageHeight, exifImageWidth, exposureTime, fNumber, fileSizeInByte, focalLength, iso, latitude, lensModel, longitude, make, model, modifyDate, orientation, projectionType, rating, state, varTimeZone);
        }

        /// <summary>
        /// Serializes a <see cref="ExifResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="exifResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ExifResponseDto exifResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, exifResponseDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ExifResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="exifResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ExifResponseDto exifResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (exifResponseDto.CityOption.IsSet)
                if (exifResponseDto.CityOption.Value != null)
                    writer.WriteString("city", exifResponseDto.City);
                else
                    writer.WriteNull("city");

            if (exifResponseDto.CountryOption.IsSet)
                if (exifResponseDto.CountryOption.Value != null)
                    writer.WriteString("country", exifResponseDto.Country);
                else
                    writer.WriteNull("country");

            if (exifResponseDto.DateTimeOriginalOption.IsSet)
                if (exifResponseDto.DateTimeOriginalOption.Value != null)
                    writer.WriteString("dateTimeOriginal", exifResponseDto.DateTimeOriginalOption.Value!.Value.ToString(DateTimeOriginalFormat));
                else
                    writer.WriteNull("dateTimeOriginal");

            if (exifResponseDto.DescriptionOption.IsSet)
                if (exifResponseDto.DescriptionOption.Value != null)
                    writer.WriteString("description", exifResponseDto.Description);
                else
                    writer.WriteNull("description");

            if (exifResponseDto.ExifImageHeightOption.IsSet)
                if (exifResponseDto.ExifImageHeightOption.Value != null)
                    writer.WriteNumber("exifImageHeight", exifResponseDto.ExifImageHeightOption.Value!.Value);
                else
                    writer.WriteNull("exifImageHeight");

            if (exifResponseDto.ExifImageWidthOption.IsSet)
                if (exifResponseDto.ExifImageWidthOption.Value != null)
                    writer.WriteNumber("exifImageWidth", exifResponseDto.ExifImageWidthOption.Value!.Value);
                else
                    writer.WriteNull("exifImageWidth");

            if (exifResponseDto.ExposureTimeOption.IsSet)
                if (exifResponseDto.ExposureTimeOption.Value != null)
                    writer.WriteString("exposureTime", exifResponseDto.ExposureTime);
                else
                    writer.WriteNull("exposureTime");

            if (exifResponseDto.FNumberOption.IsSet)
                if (exifResponseDto.FNumberOption.Value != null)
                    writer.WriteNumber("fNumber", exifResponseDto.FNumberOption.Value!.Value);
                else
                    writer.WriteNull("fNumber");

            if (exifResponseDto.FileSizeInByteOption.IsSet)
                if (exifResponseDto.FileSizeInByteOption.Value != null)
                    writer.WriteNumber("fileSizeInByte", exifResponseDto.FileSizeInByteOption.Value!.Value);
                else
                    writer.WriteNull("fileSizeInByte");

            if (exifResponseDto.FocalLengthOption.IsSet)
                if (exifResponseDto.FocalLengthOption.Value != null)
                    writer.WriteNumber("focalLength", exifResponseDto.FocalLengthOption.Value!.Value);
                else
                    writer.WriteNull("focalLength");

            if (exifResponseDto.IsoOption.IsSet)
                if (exifResponseDto.IsoOption.Value != null)
                    writer.WriteNumber("iso", exifResponseDto.IsoOption.Value!.Value);
                else
                    writer.WriteNull("iso");

            if (exifResponseDto.LatitudeOption.IsSet)
                if (exifResponseDto.LatitudeOption.Value != null)
                    writer.WriteNumber("latitude", exifResponseDto.LatitudeOption.Value!.Value);
                else
                    writer.WriteNull("latitude");

            if (exifResponseDto.LensModelOption.IsSet)
                if (exifResponseDto.LensModelOption.Value != null)
                    writer.WriteString("lensModel", exifResponseDto.LensModel);
                else
                    writer.WriteNull("lensModel");

            if (exifResponseDto.LongitudeOption.IsSet)
                if (exifResponseDto.LongitudeOption.Value != null)
                    writer.WriteNumber("longitude", exifResponseDto.LongitudeOption.Value!.Value);
                else
                    writer.WriteNull("longitude");

            if (exifResponseDto.MakeOption.IsSet)
                if (exifResponseDto.MakeOption.Value != null)
                    writer.WriteString("make", exifResponseDto.Make);
                else
                    writer.WriteNull("make");

            if (exifResponseDto.ModelOption.IsSet)
                if (exifResponseDto.ModelOption.Value != null)
                    writer.WriteString("model", exifResponseDto.Model);
                else
                    writer.WriteNull("model");

            if (exifResponseDto.ModifyDateOption.IsSet)
                if (exifResponseDto.ModifyDateOption.Value != null)
                    writer.WriteString("modifyDate", exifResponseDto.ModifyDateOption.Value!.Value.ToString(ModifyDateFormat));
                else
                    writer.WriteNull("modifyDate");

            if (exifResponseDto.OrientationOption.IsSet)
                if (exifResponseDto.OrientationOption.Value != null)
                    writer.WriteString("orientation", exifResponseDto.Orientation);
                else
                    writer.WriteNull("orientation");

            if (exifResponseDto.ProjectionTypeOption.IsSet)
                if (exifResponseDto.ProjectionTypeOption.Value != null)
                    writer.WriteString("projectionType", exifResponseDto.ProjectionType);
                else
                    writer.WriteNull("projectionType");

            if (exifResponseDto.RatingOption.IsSet)
                if (exifResponseDto.RatingOption.Value != null)
                    writer.WriteNumber("rating", exifResponseDto.RatingOption.Value!.Value);
                else
                    writer.WriteNull("rating");

            if (exifResponseDto.StateOption.IsSet)
                if (exifResponseDto.StateOption.Value != null)
                    writer.WriteString("state", exifResponseDto.State);
                else
                    writer.WriteNull("state");

            if (exifResponseDto.VarTimeZoneOption.IsSet)
                if (exifResponseDto.VarTimeZoneOption.Value != null)
                    writer.WriteString("timeZone", exifResponseDto.VarTimeZone);
                else
                    writer.WriteNull("timeZone");
        }
    }
}
