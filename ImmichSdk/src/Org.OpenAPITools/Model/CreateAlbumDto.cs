// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CreateAlbumDto
    /// </summary>
    public partial class CreateAlbumDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAlbumDto" /> class.
        /// </summary>
        /// <param name="albumName">albumName</param>
        /// <param name="albumUsers">albumUsers</param>
        /// <param name="assetIds">assetIds</param>
        /// <param name="description">description</param>
        [JsonConstructor]
        public CreateAlbumDto(string albumName, Option<List<AlbumUserCreateDto>?> albumUsers = default, Option<List<Guid>?> assetIds = default, Option<string?> description = default)
        {
            AlbumName = albumName;
            AlbumUsersOption = albumUsers;
            AssetIdsOption = assetIds;
            DescriptionOption = description;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets AlbumName
        /// </summary>
        [JsonPropertyName("albumName")]
        public string AlbumName { get; set; }

        /// <summary>
        /// Used to track the state of AlbumUsers
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<AlbumUserCreateDto>?> AlbumUsersOption { get; private set; }

        /// <summary>
        /// Gets or Sets AlbumUsers
        /// </summary>
        [JsonPropertyName("albumUsers")]
        public List<AlbumUserCreateDto>? AlbumUsers { get { return this.AlbumUsersOption; } set { this.AlbumUsersOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssetIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Guid>?> AssetIdsOption { get; private set; }

        /// <summary>
        /// Gets or Sets AssetIds
        /// </summary>
        [JsonPropertyName("assetIds")]
        public List<Guid>? AssetIds { get { return this.AssetIdsOption; } set { this.AssetIdsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateAlbumDto {\n");
            sb.Append("  AlbumName: ").Append(AlbumName).Append("\n");
            sb.Append("  AlbumUsers: ").Append(AlbumUsers).Append("\n");
            sb.Append("  AssetIds: ").Append(AssetIds).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateAlbumDto" />
    /// </summary>
    public class CreateAlbumDtoJsonConverter : JsonConverter<CreateAlbumDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateAlbumDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateAlbumDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> albumName = default;
            Option<List<AlbumUserCreateDto>?> albumUsers = default;
            Option<List<Guid>?> assetIds = default;
            Option<string?> description = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "albumName":
                            albumName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "albumUsers":
                            albumUsers = new Option<List<AlbumUserCreateDto>?>(JsonSerializer.Deserialize<List<AlbumUserCreateDto>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "assetIds":
                            assetIds = new Option<List<Guid>?>(JsonSerializer.Deserialize<List<Guid>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!albumName.IsSet)
                throw new ArgumentException("Property is required for class CreateAlbumDto.", nameof(albumName));

            if (albumName.IsSet && albumName.Value == null)
                throw new ArgumentNullException(nameof(albumName), "Property is not nullable for class CreateAlbumDto.");

            if (albumUsers.IsSet && albumUsers.Value == null)
                throw new ArgumentNullException(nameof(albumUsers), "Property is not nullable for class CreateAlbumDto.");

            if (assetIds.IsSet && assetIds.Value == null)
                throw new ArgumentNullException(nameof(assetIds), "Property is not nullable for class CreateAlbumDto.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class CreateAlbumDto.");

            return new CreateAlbumDto(albumName.Value!, albumUsers, assetIds, description);
        }

        /// <summary>
        /// Serializes a <see cref="CreateAlbumDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createAlbumDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateAlbumDto createAlbumDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createAlbumDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateAlbumDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createAlbumDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateAlbumDto createAlbumDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createAlbumDto.AlbumName == null)
                throw new ArgumentNullException(nameof(createAlbumDto.AlbumName), "Property is required for class CreateAlbumDto.");

            if (createAlbumDto.AlbumUsersOption.IsSet && createAlbumDto.AlbumUsers == null)
                throw new ArgumentNullException(nameof(createAlbumDto.AlbumUsers), "Property is required for class CreateAlbumDto.");

            if (createAlbumDto.AssetIdsOption.IsSet && createAlbumDto.AssetIds == null)
                throw new ArgumentNullException(nameof(createAlbumDto.AssetIds), "Property is required for class CreateAlbumDto.");

            if (createAlbumDto.DescriptionOption.IsSet && createAlbumDto.Description == null)
                throw new ArgumentNullException(nameof(createAlbumDto.Description), "Property is required for class CreateAlbumDto.");

            writer.WriteString("albumName", createAlbumDto.AlbumName);

            if (createAlbumDto.AlbumUsersOption.IsSet)
            {
                writer.WritePropertyName("albumUsers");
                JsonSerializer.Serialize(writer, createAlbumDto.AlbumUsers, jsonSerializerOptions);
            }
            if (createAlbumDto.AssetIdsOption.IsSet)
            {
                writer.WritePropertyName("assetIds");
                JsonSerializer.Serialize(writer, createAlbumDto.AssetIds, jsonSerializerOptions);
            }
            if (createAlbumDto.DescriptionOption.IsSet)
                writer.WriteString("description", createAlbumDto.Description);
        }
    }
}
