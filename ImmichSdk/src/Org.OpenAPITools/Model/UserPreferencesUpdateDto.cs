// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// UserPreferencesUpdateDto
    /// </summary>
    public partial class UserPreferencesUpdateDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserPreferencesUpdateDto" /> class.
        /// </summary>
        /// <param name="albums">albums</param>
        /// <param name="avatar">avatar</param>
        /// <param name="cast">cast</param>
        /// <param name="download">download</param>
        /// <param name="emailNotifications">emailNotifications</param>
        /// <param name="folders">folders</param>
        /// <param name="memories">memories</param>
        /// <param name="people">people</param>
        /// <param name="purchase">purchase</param>
        /// <param name="ratings">ratings</param>
        /// <param name="sharedLinks">sharedLinks</param>
        /// <param name="tags">tags</param>
        [JsonConstructor]
        public UserPreferencesUpdateDto(Option<AlbumsUpdate?> albums = default, Option<AvatarUpdate?> avatar = default, Option<CastUpdate?> cast = default, Option<DownloadUpdate?> download = default, Option<EmailNotificationsUpdate?> emailNotifications = default, Option<FoldersUpdate?> folders = default, Option<MemoriesUpdate?> memories = default, Option<PeopleUpdate?> people = default, Option<PurchaseUpdate?> purchase = default, Option<RatingsUpdate?> ratings = default, Option<SharedLinksUpdate?> sharedLinks = default, Option<TagsUpdate?> tags = default)
        {
            AlbumsOption = albums;
            AvatarOption = avatar;
            CastOption = cast;
            DownloadOption = download;
            EmailNotificationsOption = emailNotifications;
            FoldersOption = folders;
            MemoriesOption = memories;
            PeopleOption = people;
            PurchaseOption = purchase;
            RatingsOption = ratings;
            SharedLinksOption = sharedLinks;
            TagsOption = tags;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Albums
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AlbumsUpdate?> AlbumsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Albums
        /// </summary>
        [JsonPropertyName("albums")]
        public AlbumsUpdate? Albums { get { return this.AlbumsOption; } set { this.AlbumsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Avatar
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AvatarUpdate?> AvatarOption { get; private set; }

        /// <summary>
        /// Gets or Sets Avatar
        /// </summary>
        [JsonPropertyName("avatar")]
        public AvatarUpdate? Avatar { get { return this.AvatarOption; } set { this.AvatarOption = new(value); } }

        /// <summary>
        /// Used to track the state of Cast
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CastUpdate?> CastOption { get; private set; }

        /// <summary>
        /// Gets or Sets Cast
        /// </summary>
        [JsonPropertyName("cast")]
        public CastUpdate? Cast { get { return this.CastOption; } set { this.CastOption = new(value); } }

        /// <summary>
        /// Used to track the state of Download
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DownloadUpdate?> DownloadOption { get; private set; }

        /// <summary>
        /// Gets or Sets Download
        /// </summary>
        [JsonPropertyName("download")]
        public DownloadUpdate? Download { get { return this.DownloadOption; } set { this.DownloadOption = new(value); } }

        /// <summary>
        /// Used to track the state of EmailNotifications
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EmailNotificationsUpdate?> EmailNotificationsOption { get; private set; }

        /// <summary>
        /// Gets or Sets EmailNotifications
        /// </summary>
        [JsonPropertyName("emailNotifications")]
        public EmailNotificationsUpdate? EmailNotifications { get { return this.EmailNotificationsOption; } set { this.EmailNotificationsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Folders
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FoldersUpdate?> FoldersOption { get; private set; }

        /// <summary>
        /// Gets or Sets Folders
        /// </summary>
        [JsonPropertyName("folders")]
        public FoldersUpdate? Folders { get { return this.FoldersOption; } set { this.FoldersOption = new(value); } }

        /// <summary>
        /// Used to track the state of Memories
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<MemoriesUpdate?> MemoriesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Memories
        /// </summary>
        [JsonPropertyName("memories")]
        public MemoriesUpdate? Memories { get { return this.MemoriesOption; } set { this.MemoriesOption = new(value); } }

        /// <summary>
        /// Used to track the state of People
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PeopleUpdate?> PeopleOption { get; private set; }

        /// <summary>
        /// Gets or Sets People
        /// </summary>
        [JsonPropertyName("people")]
        public PeopleUpdate? People { get { return this.PeopleOption; } set { this.PeopleOption = new(value); } }

        /// <summary>
        /// Used to track the state of Purchase
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PurchaseUpdate?> PurchaseOption { get; private set; }

        /// <summary>
        /// Gets or Sets Purchase
        /// </summary>
        [JsonPropertyName("purchase")]
        public PurchaseUpdate? Purchase { get { return this.PurchaseOption; } set { this.PurchaseOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ratings
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RatingsUpdate?> RatingsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Ratings
        /// </summary>
        [JsonPropertyName("ratings")]
        public RatingsUpdate? Ratings { get { return this.RatingsOption; } set { this.RatingsOption = new(value); } }

        /// <summary>
        /// Used to track the state of SharedLinks
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SharedLinksUpdate?> SharedLinksOption { get; private set; }

        /// <summary>
        /// Gets or Sets SharedLinks
        /// </summary>
        [JsonPropertyName("sharedLinks")]
        public SharedLinksUpdate? SharedLinks { get { return this.SharedLinksOption; } set { this.SharedLinksOption = new(value); } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TagsUpdate?> TagsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [JsonPropertyName("tags")]
        public TagsUpdate? Tags { get { return this.TagsOption; } set { this.TagsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserPreferencesUpdateDto {\n");
            sb.Append("  Albums: ").Append(Albums).Append("\n");
            sb.Append("  Avatar: ").Append(Avatar).Append("\n");
            sb.Append("  Cast: ").Append(Cast).Append("\n");
            sb.Append("  Download: ").Append(Download).Append("\n");
            sb.Append("  EmailNotifications: ").Append(EmailNotifications).Append("\n");
            sb.Append("  Folders: ").Append(Folders).Append("\n");
            sb.Append("  Memories: ").Append(Memories).Append("\n");
            sb.Append("  People: ").Append(People).Append("\n");
            sb.Append("  Purchase: ").Append(Purchase).Append("\n");
            sb.Append("  Ratings: ").Append(Ratings).Append("\n");
            sb.Append("  SharedLinks: ").Append(SharedLinks).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserPreferencesUpdateDto" />
    /// </summary>
    public class UserPreferencesUpdateDtoJsonConverter : JsonConverter<UserPreferencesUpdateDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="UserPreferencesUpdateDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UserPreferencesUpdateDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<AlbumsUpdate?> albums = default;
            Option<AvatarUpdate?> avatar = default;
            Option<CastUpdate?> cast = default;
            Option<DownloadUpdate?> download = default;
            Option<EmailNotificationsUpdate?> emailNotifications = default;
            Option<FoldersUpdate?> folders = default;
            Option<MemoriesUpdate?> memories = default;
            Option<PeopleUpdate?> people = default;
            Option<PurchaseUpdate?> purchase = default;
            Option<RatingsUpdate?> ratings = default;
            Option<SharedLinksUpdate?> sharedLinks = default;
            Option<TagsUpdate?> tags = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "albums":
                            albums = new Option<AlbumsUpdate?>(JsonSerializer.Deserialize<AlbumsUpdate>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "avatar":
                            avatar = new Option<AvatarUpdate?>(JsonSerializer.Deserialize<AvatarUpdate>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "cast":
                            cast = new Option<CastUpdate?>(JsonSerializer.Deserialize<CastUpdate>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "download":
                            download = new Option<DownloadUpdate?>(JsonSerializer.Deserialize<DownloadUpdate>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "emailNotifications":
                            emailNotifications = new Option<EmailNotificationsUpdate?>(JsonSerializer.Deserialize<EmailNotificationsUpdate>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "folders":
                            folders = new Option<FoldersUpdate?>(JsonSerializer.Deserialize<FoldersUpdate>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "memories":
                            memories = new Option<MemoriesUpdate?>(JsonSerializer.Deserialize<MemoriesUpdate>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "people":
                            people = new Option<PeopleUpdate?>(JsonSerializer.Deserialize<PeopleUpdate>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "purchase":
                            purchase = new Option<PurchaseUpdate?>(JsonSerializer.Deserialize<PurchaseUpdate>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "ratings":
                            ratings = new Option<RatingsUpdate?>(JsonSerializer.Deserialize<RatingsUpdate>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "sharedLinks":
                            sharedLinks = new Option<SharedLinksUpdate?>(JsonSerializer.Deserialize<SharedLinksUpdate>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "tags":
                            tags = new Option<TagsUpdate?>(JsonSerializer.Deserialize<TagsUpdate>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (albums.IsSet && albums.Value == null)
                throw new ArgumentNullException(nameof(albums), "Property is not nullable for class UserPreferencesUpdateDto.");

            if (avatar.IsSet && avatar.Value == null)
                throw new ArgumentNullException(nameof(avatar), "Property is not nullable for class UserPreferencesUpdateDto.");

            if (cast.IsSet && cast.Value == null)
                throw new ArgumentNullException(nameof(cast), "Property is not nullable for class UserPreferencesUpdateDto.");

            if (download.IsSet && download.Value == null)
                throw new ArgumentNullException(nameof(download), "Property is not nullable for class UserPreferencesUpdateDto.");

            if (emailNotifications.IsSet && emailNotifications.Value == null)
                throw new ArgumentNullException(nameof(emailNotifications), "Property is not nullable for class UserPreferencesUpdateDto.");

            if (folders.IsSet && folders.Value == null)
                throw new ArgumentNullException(nameof(folders), "Property is not nullable for class UserPreferencesUpdateDto.");

            if (memories.IsSet && memories.Value == null)
                throw new ArgumentNullException(nameof(memories), "Property is not nullable for class UserPreferencesUpdateDto.");

            if (people.IsSet && people.Value == null)
                throw new ArgumentNullException(nameof(people), "Property is not nullable for class UserPreferencesUpdateDto.");

            if (purchase.IsSet && purchase.Value == null)
                throw new ArgumentNullException(nameof(purchase), "Property is not nullable for class UserPreferencesUpdateDto.");

            if (ratings.IsSet && ratings.Value == null)
                throw new ArgumentNullException(nameof(ratings), "Property is not nullable for class UserPreferencesUpdateDto.");

            if (sharedLinks.IsSet && sharedLinks.Value == null)
                throw new ArgumentNullException(nameof(sharedLinks), "Property is not nullable for class UserPreferencesUpdateDto.");

            if (tags.IsSet && tags.Value == null)
                throw new ArgumentNullException(nameof(tags), "Property is not nullable for class UserPreferencesUpdateDto.");

            return new UserPreferencesUpdateDto(albums, avatar, cast, download, emailNotifications, folders, memories, people, purchase, ratings, sharedLinks, tags);
        }

        /// <summary>
        /// Serializes a <see cref="UserPreferencesUpdateDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userPreferencesUpdateDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UserPreferencesUpdateDto userPreferencesUpdateDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, userPreferencesUpdateDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UserPreferencesUpdateDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userPreferencesUpdateDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UserPreferencesUpdateDto userPreferencesUpdateDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (userPreferencesUpdateDto.AlbumsOption.IsSet && userPreferencesUpdateDto.Albums == null)
                throw new ArgumentNullException(nameof(userPreferencesUpdateDto.Albums), "Property is required for class UserPreferencesUpdateDto.");

            if (userPreferencesUpdateDto.AvatarOption.IsSet && userPreferencesUpdateDto.Avatar == null)
                throw new ArgumentNullException(nameof(userPreferencesUpdateDto.Avatar), "Property is required for class UserPreferencesUpdateDto.");

            if (userPreferencesUpdateDto.CastOption.IsSet && userPreferencesUpdateDto.Cast == null)
                throw new ArgumentNullException(nameof(userPreferencesUpdateDto.Cast), "Property is required for class UserPreferencesUpdateDto.");

            if (userPreferencesUpdateDto.DownloadOption.IsSet && userPreferencesUpdateDto.Download == null)
                throw new ArgumentNullException(nameof(userPreferencesUpdateDto.Download), "Property is required for class UserPreferencesUpdateDto.");

            if (userPreferencesUpdateDto.EmailNotificationsOption.IsSet && userPreferencesUpdateDto.EmailNotifications == null)
                throw new ArgumentNullException(nameof(userPreferencesUpdateDto.EmailNotifications), "Property is required for class UserPreferencesUpdateDto.");

            if (userPreferencesUpdateDto.FoldersOption.IsSet && userPreferencesUpdateDto.Folders == null)
                throw new ArgumentNullException(nameof(userPreferencesUpdateDto.Folders), "Property is required for class UserPreferencesUpdateDto.");

            if (userPreferencesUpdateDto.MemoriesOption.IsSet && userPreferencesUpdateDto.Memories == null)
                throw new ArgumentNullException(nameof(userPreferencesUpdateDto.Memories), "Property is required for class UserPreferencesUpdateDto.");

            if (userPreferencesUpdateDto.PeopleOption.IsSet && userPreferencesUpdateDto.People == null)
                throw new ArgumentNullException(nameof(userPreferencesUpdateDto.People), "Property is required for class UserPreferencesUpdateDto.");

            if (userPreferencesUpdateDto.PurchaseOption.IsSet && userPreferencesUpdateDto.Purchase == null)
                throw new ArgumentNullException(nameof(userPreferencesUpdateDto.Purchase), "Property is required for class UserPreferencesUpdateDto.");

            if (userPreferencesUpdateDto.RatingsOption.IsSet && userPreferencesUpdateDto.Ratings == null)
                throw new ArgumentNullException(nameof(userPreferencesUpdateDto.Ratings), "Property is required for class UserPreferencesUpdateDto.");

            if (userPreferencesUpdateDto.SharedLinksOption.IsSet && userPreferencesUpdateDto.SharedLinks == null)
                throw new ArgumentNullException(nameof(userPreferencesUpdateDto.SharedLinks), "Property is required for class UserPreferencesUpdateDto.");

            if (userPreferencesUpdateDto.TagsOption.IsSet && userPreferencesUpdateDto.Tags == null)
                throw new ArgumentNullException(nameof(userPreferencesUpdateDto.Tags), "Property is required for class UserPreferencesUpdateDto.");

            if (userPreferencesUpdateDto.AlbumsOption.IsSet)
            {
                writer.WritePropertyName("albums");
                JsonSerializer.Serialize(writer, userPreferencesUpdateDto.Albums, jsonSerializerOptions);
            }
            if (userPreferencesUpdateDto.AvatarOption.IsSet)
            {
                writer.WritePropertyName("avatar");
                JsonSerializer.Serialize(writer, userPreferencesUpdateDto.Avatar, jsonSerializerOptions);
            }
            if (userPreferencesUpdateDto.CastOption.IsSet)
            {
                writer.WritePropertyName("cast");
                JsonSerializer.Serialize(writer, userPreferencesUpdateDto.Cast, jsonSerializerOptions);
            }
            if (userPreferencesUpdateDto.DownloadOption.IsSet)
            {
                writer.WritePropertyName("download");
                JsonSerializer.Serialize(writer, userPreferencesUpdateDto.Download, jsonSerializerOptions);
            }
            if (userPreferencesUpdateDto.EmailNotificationsOption.IsSet)
            {
                writer.WritePropertyName("emailNotifications");
                JsonSerializer.Serialize(writer, userPreferencesUpdateDto.EmailNotifications, jsonSerializerOptions);
            }
            if (userPreferencesUpdateDto.FoldersOption.IsSet)
            {
                writer.WritePropertyName("folders");
                JsonSerializer.Serialize(writer, userPreferencesUpdateDto.Folders, jsonSerializerOptions);
            }
            if (userPreferencesUpdateDto.MemoriesOption.IsSet)
            {
                writer.WritePropertyName("memories");
                JsonSerializer.Serialize(writer, userPreferencesUpdateDto.Memories, jsonSerializerOptions);
            }
            if (userPreferencesUpdateDto.PeopleOption.IsSet)
            {
                writer.WritePropertyName("people");
                JsonSerializer.Serialize(writer, userPreferencesUpdateDto.People, jsonSerializerOptions);
            }
            if (userPreferencesUpdateDto.PurchaseOption.IsSet)
            {
                writer.WritePropertyName("purchase");
                JsonSerializer.Serialize(writer, userPreferencesUpdateDto.Purchase, jsonSerializerOptions);
            }
            if (userPreferencesUpdateDto.RatingsOption.IsSet)
            {
                writer.WritePropertyName("ratings");
                JsonSerializer.Serialize(writer, userPreferencesUpdateDto.Ratings, jsonSerializerOptions);
            }
            if (userPreferencesUpdateDto.SharedLinksOption.IsSet)
            {
                writer.WritePropertyName("sharedLinks");
                JsonSerializer.Serialize(writer, userPreferencesUpdateDto.SharedLinks, jsonSerializerOptions);
            }
            if (userPreferencesUpdateDto.TagsOption.IsSet)
            {
                writer.WritePropertyName("tags");
                JsonSerializer.Serialize(writer, userPreferencesUpdateDto.Tags, jsonSerializerOptions);
            }
        }
    }
}
