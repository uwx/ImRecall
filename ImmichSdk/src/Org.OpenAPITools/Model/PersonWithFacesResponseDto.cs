// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PersonWithFacesResponseDto
    /// </summary>
    public partial class PersonWithFacesResponseDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonWithFacesResponseDto" /> class.
        /// </summary>
        /// <param name="faces">faces</param>
        /// <param name="id">id</param>
        /// <param name="isHidden">isHidden</param>
        /// <param name="name">name</param>
        /// <param name="thumbnailPath">thumbnailPath</param>
        /// <param name="birthDate">birthDate</param>
        /// <param name="color">This property was added in v1.126.0</param>
        /// <param name="isFavorite">This property was added in v1.126.0</param>
        /// <param name="updatedAt">This property was added in v1.107.0</param>
        [JsonConstructor]
        public PersonWithFacesResponseDto(List<AssetFaceWithoutPersonResponseDto> faces, string id, bool isHidden, string name, string thumbnailPath, DateOnly? birthDate = default, Option<string?> color = default, Option<bool?> isFavorite = default, Option<DateTime?> updatedAt = default)
        {
            Faces = faces;
            Id = id;
            IsHidden = isHidden;
            Name = name;
            ThumbnailPath = thumbnailPath;
            BirthDate = birthDate;
            ColorOption = color;
            IsFavoriteOption = isFavorite;
            UpdatedAtOption = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Faces
        /// </summary>
        [JsonPropertyName("faces")]
        public List<AssetFaceWithoutPersonResponseDto> Faces { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IsHidden
        /// </summary>
        [JsonPropertyName("isHidden")]
        public bool IsHidden { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ThumbnailPath
        /// </summary>
        [JsonPropertyName("thumbnailPath")]
        public string ThumbnailPath { get; set; }

        /// <summary>
        /// Gets or Sets BirthDate
        /// </summary>
        [JsonPropertyName("birthDate")]
        public DateOnly? BirthDate { get; set; }

        /// <summary>
        /// Used to track the state of Color
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ColorOption { get; private set; }

        /// <summary>
        /// This property was added in v1.126.0
        /// </summary>
        /// <value>This property was added in v1.126.0</value>
        [JsonPropertyName("color")]
        public string? Color { get { return this.ColorOption; } set { this.ColorOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsFavorite
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsFavoriteOption { get; private set; }

        /// <summary>
        /// This property was added in v1.126.0
        /// </summary>
        /// <value>This property was added in v1.126.0</value>
        [JsonPropertyName("isFavorite")]
        public bool? IsFavorite { get { return this.IsFavoriteOption; } set { this.IsFavoriteOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// This property was added in v1.107.0
        /// </summary>
        /// <value>This property was added in v1.107.0</value>
        [JsonPropertyName("updatedAt")]
        public DateTime? UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PersonWithFacesResponseDto {\n");
            sb.Append("  Faces: ").Append(Faces).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsHidden: ").Append(IsHidden).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ThumbnailPath: ").Append(ThumbnailPath).Append("\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  IsFavorite: ").Append(IsFavorite).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PersonWithFacesResponseDto" />
    /// </summary>
    public class PersonWithFacesResponseDtoJsonConverter : JsonConverter<PersonWithFacesResponseDto>
    {
        /// <summary>
        /// The format to use to serialize BirthDate
        /// </summary>
        public static string BirthDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="PersonWithFacesResponseDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PersonWithFacesResponseDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<AssetFaceWithoutPersonResponseDto>?> faces = default;
            Option<string?> id = default;
            Option<bool?> isHidden = default;
            Option<string?> name = default;
            Option<string?> thumbnailPath = default;
            Option<DateOnly?> birthDate = default;
            Option<string?> color = default;
            Option<bool?> isFavorite = default;
            Option<DateTime?> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "faces":
                            faces = new Option<List<AssetFaceWithoutPersonResponseDto>?>(JsonSerializer.Deserialize<List<AssetFaceWithoutPersonResponseDto>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "isHidden":
                            isHidden = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "thumbnailPath":
                            thumbnailPath = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "birthDate":
                            birthDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "color":
                            color = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "isFavorite":
                            isFavorite = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "updatedAt":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!faces.IsSet)
                throw new ArgumentException("Property is required for class PersonWithFacesResponseDto.", nameof(faces));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class PersonWithFacesResponseDto.", nameof(id));

            if (!isHidden.IsSet)
                throw new ArgumentException("Property is required for class PersonWithFacesResponseDto.", nameof(isHidden));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class PersonWithFacesResponseDto.", nameof(name));

            if (!thumbnailPath.IsSet)
                throw new ArgumentException("Property is required for class PersonWithFacesResponseDto.", nameof(thumbnailPath));

            if (!birthDate.IsSet)
                throw new ArgumentException("Property is required for class PersonWithFacesResponseDto.", nameof(birthDate));

            if (faces.IsSet && faces.Value == null)
                throw new ArgumentNullException(nameof(faces), "Property is not nullable for class PersonWithFacesResponseDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class PersonWithFacesResponseDto.");

            if (isHidden.IsSet && isHidden.Value == null)
                throw new ArgumentNullException(nameof(isHidden), "Property is not nullable for class PersonWithFacesResponseDto.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class PersonWithFacesResponseDto.");

            if (thumbnailPath.IsSet && thumbnailPath.Value == null)
                throw new ArgumentNullException(nameof(thumbnailPath), "Property is not nullable for class PersonWithFacesResponseDto.");

            if (color.IsSet && color.Value == null)
                throw new ArgumentNullException(nameof(color), "Property is not nullable for class PersonWithFacesResponseDto.");

            if (isFavorite.IsSet && isFavorite.Value == null)
                throw new ArgumentNullException(nameof(isFavorite), "Property is not nullable for class PersonWithFacesResponseDto.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class PersonWithFacesResponseDto.");

            return new PersonWithFacesResponseDto(faces.Value!, id.Value!, isHidden.Value!.Value!, name.Value!, thumbnailPath.Value!, birthDate.Value!, color, isFavorite, updatedAt);
        }

        /// <summary>
        /// Serializes a <see cref="PersonWithFacesResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="personWithFacesResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PersonWithFacesResponseDto personWithFacesResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, personWithFacesResponseDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PersonWithFacesResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="personWithFacesResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PersonWithFacesResponseDto personWithFacesResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (personWithFacesResponseDto.Faces == null)
                throw new ArgumentNullException(nameof(personWithFacesResponseDto.Faces), "Property is required for class PersonWithFacesResponseDto.");

            if (personWithFacesResponseDto.Id == null)
                throw new ArgumentNullException(nameof(personWithFacesResponseDto.Id), "Property is required for class PersonWithFacesResponseDto.");

            if (personWithFacesResponseDto.Name == null)
                throw new ArgumentNullException(nameof(personWithFacesResponseDto.Name), "Property is required for class PersonWithFacesResponseDto.");

            if (personWithFacesResponseDto.ThumbnailPath == null)
                throw new ArgumentNullException(nameof(personWithFacesResponseDto.ThumbnailPath), "Property is required for class PersonWithFacesResponseDto.");

            if (personWithFacesResponseDto.ColorOption.IsSet && personWithFacesResponseDto.Color == null)
                throw new ArgumentNullException(nameof(personWithFacesResponseDto.Color), "Property is required for class PersonWithFacesResponseDto.");

            writer.WritePropertyName("faces");
            JsonSerializer.Serialize(writer, personWithFacesResponseDto.Faces, jsonSerializerOptions);
            writer.WriteString("id", personWithFacesResponseDto.Id);

            writer.WriteBoolean("isHidden", personWithFacesResponseDto.IsHidden);

            writer.WriteString("name", personWithFacesResponseDto.Name);

            writer.WriteString("thumbnailPath", personWithFacesResponseDto.ThumbnailPath);

            if (personWithFacesResponseDto.BirthDate != null)
                writer.WriteString("birthDate", personWithFacesResponseDto.BirthDate.Value.ToString(BirthDateFormat));
            else
                writer.WriteNull("birthDate");

            if (personWithFacesResponseDto.ColorOption.IsSet)
                writer.WriteString("color", personWithFacesResponseDto.Color);

            if (personWithFacesResponseDto.IsFavoriteOption.IsSet)
                writer.WriteBoolean("isFavorite", personWithFacesResponseDto.IsFavoriteOption.Value!.Value);

            if (personWithFacesResponseDto.UpdatedAtOption.IsSet)
                writer.WriteString("updatedAt", personWithFacesResponseDto.UpdatedAtOption.Value!.Value.ToString(UpdatedAtFormat));
        }
    }
}
