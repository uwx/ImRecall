// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SyncPersonV1
    /// </summary>
    public partial class SyncPersonV1 : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SyncPersonV1" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt</param>
        /// <param name="id">id</param>
        /// <param name="isFavorite">isFavorite</param>
        /// <param name="isHidden">isHidden</param>
        /// <param name="name">name</param>
        /// <param name="ownerId">ownerId</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="birthDate">birthDate</param>
        /// <param name="color">color</param>
        /// <param name="faceAssetId">faceAssetId</param>
        [JsonConstructor]
        public SyncPersonV1(DateTime createdAt, string id, bool isFavorite, bool isHidden, string name, string ownerId, DateTime updatedAt, DateTime? birthDate = default, string? color = default, string? faceAssetId = default)
        {
            CreatedAt = createdAt;
            Id = id;
            IsFavorite = isFavorite;
            IsHidden = isHidden;
            Name = name;
            OwnerId = ownerId;
            UpdatedAt = updatedAt;
            BirthDate = birthDate;
            Color = color;
            FaceAssetId = faceAssetId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IsFavorite
        /// </summary>
        [JsonPropertyName("isFavorite")]
        public bool IsFavorite { get; set; }

        /// <summary>
        /// Gets or Sets IsHidden
        /// </summary>
        [JsonPropertyName("isHidden")]
        public bool IsHidden { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OwnerId
        /// </summary>
        [JsonPropertyName("ownerId")]
        public string OwnerId { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets BirthDate
        /// </summary>
        [JsonPropertyName("birthDate")]
        public DateTime? BirthDate { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [JsonPropertyName("color")]
        public string? Color { get; set; }

        /// <summary>
        /// Gets or Sets FaceAssetId
        /// </summary>
        [JsonPropertyName("faceAssetId")]
        public string? FaceAssetId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SyncPersonV1 {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsFavorite: ").Append(IsFavorite).Append("\n");
            sb.Append("  IsHidden: ").Append(IsHidden).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  FaceAssetId: ").Append(FaceAssetId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SyncPersonV1" />
    /// </summary>
    public class SyncPersonV1JsonConverter : JsonConverter<SyncPersonV1>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize BirthDate
        /// </summary>
        public static string BirthDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="SyncPersonV1" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SyncPersonV1 Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> createdAt = default;
            Option<string?> id = default;
            Option<bool?> isFavorite = default;
            Option<bool?> isHidden = default;
            Option<string?> name = default;
            Option<string?> ownerId = default;
            Option<DateTime?> updatedAt = default;
            Option<DateTime?> birthDate = default;
            Option<string?> color = default;
            Option<string?> faceAssetId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "isFavorite":
                            isFavorite = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "isHidden":
                            isHidden = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ownerId":
                            ownerId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "updatedAt":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "birthDate":
                            birthDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "color":
                            color = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "faceAssetId":
                            faceAssetId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class SyncPersonV1.", nameof(createdAt));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class SyncPersonV1.", nameof(id));

            if (!isFavorite.IsSet)
                throw new ArgumentException("Property is required for class SyncPersonV1.", nameof(isFavorite));

            if (!isHidden.IsSet)
                throw new ArgumentException("Property is required for class SyncPersonV1.", nameof(isHidden));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class SyncPersonV1.", nameof(name));

            if (!ownerId.IsSet)
                throw new ArgumentException("Property is required for class SyncPersonV1.", nameof(ownerId));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class SyncPersonV1.", nameof(updatedAt));

            if (!birthDate.IsSet)
                throw new ArgumentException("Property is required for class SyncPersonV1.", nameof(birthDate));

            if (!color.IsSet)
                throw new ArgumentException("Property is required for class SyncPersonV1.", nameof(color));

            if (!faceAssetId.IsSet)
                throw new ArgumentException("Property is required for class SyncPersonV1.", nameof(faceAssetId));

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class SyncPersonV1.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class SyncPersonV1.");

            if (isFavorite.IsSet && isFavorite.Value == null)
                throw new ArgumentNullException(nameof(isFavorite), "Property is not nullable for class SyncPersonV1.");

            if (isHidden.IsSet && isHidden.Value == null)
                throw new ArgumentNullException(nameof(isHidden), "Property is not nullable for class SyncPersonV1.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class SyncPersonV1.");

            if (ownerId.IsSet && ownerId.Value == null)
                throw new ArgumentNullException(nameof(ownerId), "Property is not nullable for class SyncPersonV1.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class SyncPersonV1.");

            return new SyncPersonV1(createdAt.Value!.Value!, id.Value!, isFavorite.Value!.Value!, isHidden.Value!.Value!, name.Value!, ownerId.Value!, updatedAt.Value!.Value!, birthDate.Value!, color.Value!, faceAssetId.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="SyncPersonV1" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="syncPersonV1"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SyncPersonV1 syncPersonV1, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, syncPersonV1, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SyncPersonV1" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="syncPersonV1"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SyncPersonV1 syncPersonV1, JsonSerializerOptions jsonSerializerOptions)
        {
            if (syncPersonV1.Id == null)
                throw new ArgumentNullException(nameof(syncPersonV1.Id), "Property is required for class SyncPersonV1.");

            if (syncPersonV1.Name == null)
                throw new ArgumentNullException(nameof(syncPersonV1.Name), "Property is required for class SyncPersonV1.");

            if (syncPersonV1.OwnerId == null)
                throw new ArgumentNullException(nameof(syncPersonV1.OwnerId), "Property is required for class SyncPersonV1.");

            writer.WriteString("createdAt", syncPersonV1.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("id", syncPersonV1.Id);

            writer.WriteBoolean("isFavorite", syncPersonV1.IsFavorite);

            writer.WriteBoolean("isHidden", syncPersonV1.IsHidden);

            writer.WriteString("name", syncPersonV1.Name);

            writer.WriteString("ownerId", syncPersonV1.OwnerId);

            writer.WriteString("updatedAt", syncPersonV1.UpdatedAt.ToString(UpdatedAtFormat));

            if (syncPersonV1.BirthDate != null)
                writer.WriteString("birthDate", syncPersonV1.BirthDate.Value.ToString(BirthDateFormat));
            else
                writer.WriteNull("birthDate");

            if (syncPersonV1.Color != null)
                writer.WriteString("color", syncPersonV1.Color);
            else
                writer.WriteNull("color");

            if (syncPersonV1.FaceAssetId != null)
                writer.WriteString("faceAssetId", syncPersonV1.FaceAssetId);
            else
                writer.WriteNull("faceAssetId");
        }
    }
}
