// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines NotificationLevel
    /// </summary>
    public enum NotificationLevel
    {
        /// <summary>
        /// Enum Success for value: success
        /// </summary>
        Success = 1,

        /// <summary>
        /// Enum Error for value: error
        /// </summary>
        Error = 2,

        /// <summary>
        /// Enum Warning for value: warning
        /// </summary>
        Warning = 3,

        /// <summary>
        /// Enum Info for value: info
        /// </summary>
        Info = 4
    }

    /// <summary>
    /// Converts <see cref="NotificationLevel"/> to and from the JSON value
    /// </summary>
    public static class NotificationLevelValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="NotificationLevel"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static NotificationLevel FromString(string value)
        {
            if (value.Equals("success"))
                return NotificationLevel.Success;

            if (value.Equals("error"))
                return NotificationLevel.Error;

            if (value.Equals("warning"))
                return NotificationLevel.Warning;

            if (value.Equals("info"))
                return NotificationLevel.Info;

            throw new NotImplementedException($"Could not convert value to type NotificationLevel: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="NotificationLevel"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static NotificationLevel? FromStringOrDefault(string value)
        {
            if (value.Equals("success"))
                return NotificationLevel.Success;

            if (value.Equals("error"))
                return NotificationLevel.Error;

            if (value.Equals("warning"))
                return NotificationLevel.Warning;

            if (value.Equals("info"))
                return NotificationLevel.Info;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="NotificationLevel"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(NotificationLevel value)
        {
            if (value == NotificationLevel.Success)
                return "success";

            if (value == NotificationLevel.Error)
                return "error";

            if (value == NotificationLevel.Warning)
                return "warning";

            if (value == NotificationLevel.Info)
                return "info";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="NotificationLevel"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class NotificationLevelJsonConverter : JsonConverter<NotificationLevel>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override NotificationLevel Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            NotificationLevel? result = rawValue == null
                ? null
                : NotificationLevelValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the NotificationLevel to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="notificationLevel"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, NotificationLevel notificationLevel, JsonSerializerOptions options)
        {
            writer.WriteStringValue(NotificationLevelValueConverter.ToJsonValue(notificationLevel).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="NotificationLevel"/>
    /// </summary>
    public class NotificationLevelNullableJsonConverter : JsonConverter<NotificationLevel?>
    {
        /// <summary>
        /// Returns a NotificationLevel from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override NotificationLevel? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            NotificationLevel? result = rawValue == null
                ? null
                : NotificationLevelValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the NotificationLevel to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="notificationLevel"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, NotificationLevel? notificationLevel, JsonSerializerOptions options)
        {
            writer.WriteStringValue(notificationLevel.HasValue ? NotificationLevelValueConverter.ToJsonValue(notificationLevel.Value).ToString() : "null");
        }
    }
}
