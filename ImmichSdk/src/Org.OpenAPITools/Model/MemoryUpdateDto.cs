// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// MemoryUpdateDto
    /// </summary>
    public partial class MemoryUpdateDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MemoryUpdateDto" /> class.
        /// </summary>
        /// <param name="isSaved">isSaved</param>
        /// <param name="memoryAt">memoryAt</param>
        /// <param name="seenAt">seenAt</param>
        [JsonConstructor]
        public MemoryUpdateDto(Option<bool?> isSaved = default, Option<DateTime?> memoryAt = default, Option<DateTime?> seenAt = default)
        {
            IsSavedOption = isSaved;
            MemoryAtOption = memoryAt;
            SeenAtOption = seenAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of IsSaved
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsSavedOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsSaved
        /// </summary>
        [JsonPropertyName("isSaved")]
        public bool? IsSaved { get { return this.IsSavedOption; } set { this.IsSavedOption = new(value); } }

        /// <summary>
        /// Used to track the state of MemoryAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> MemoryAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets MemoryAt
        /// </summary>
        [JsonPropertyName("memoryAt")]
        public DateTime? MemoryAt { get { return this.MemoryAtOption; } set { this.MemoryAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of SeenAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> SeenAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets SeenAt
        /// </summary>
        [JsonPropertyName("seenAt")]
        public DateTime? SeenAt { get { return this.SeenAtOption; } set { this.SeenAtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MemoryUpdateDto {\n");
            sb.Append("  IsSaved: ").Append(IsSaved).Append("\n");
            sb.Append("  MemoryAt: ").Append(MemoryAt).Append("\n");
            sb.Append("  SeenAt: ").Append(SeenAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MemoryUpdateDto" />
    /// </summary>
    public class MemoryUpdateDtoJsonConverter : JsonConverter<MemoryUpdateDto>
    {
        /// <summary>
        /// The format to use to serialize MemoryAt
        /// </summary>
        public static string MemoryAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize SeenAt
        /// </summary>
        public static string SeenAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="MemoryUpdateDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MemoryUpdateDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> isSaved = default;
            Option<DateTime?> memoryAt = default;
            Option<DateTime?> seenAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "isSaved":
                            isSaved = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "memoryAt":
                            memoryAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "seenAt":
                            seenAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (isSaved.IsSet && isSaved.Value == null)
                throw new ArgumentNullException(nameof(isSaved), "Property is not nullable for class MemoryUpdateDto.");

            if (memoryAt.IsSet && memoryAt.Value == null)
                throw new ArgumentNullException(nameof(memoryAt), "Property is not nullable for class MemoryUpdateDto.");

            if (seenAt.IsSet && seenAt.Value == null)
                throw new ArgumentNullException(nameof(seenAt), "Property is not nullable for class MemoryUpdateDto.");

            return new MemoryUpdateDto(isSaved, memoryAt, seenAt);
        }

        /// <summary>
        /// Serializes a <see cref="MemoryUpdateDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="memoryUpdateDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MemoryUpdateDto memoryUpdateDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, memoryUpdateDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MemoryUpdateDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="memoryUpdateDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MemoryUpdateDto memoryUpdateDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (memoryUpdateDto.IsSavedOption.IsSet)
                writer.WriteBoolean("isSaved", memoryUpdateDto.IsSavedOption.Value!.Value);

            if (memoryUpdateDto.MemoryAtOption.IsSet)
                writer.WriteString("memoryAt", memoryUpdateDto.MemoryAtOption.Value!.Value.ToString(MemoryAtFormat));

            if (memoryUpdateDto.SeenAtOption.IsSet)
                writer.WriteString("seenAt", memoryUpdateDto.SeenAtOption.Value!.Value.ToString(SeenAtFormat));
        }
    }
}
