// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SharedLinkEditDto
    /// </summary>
    public partial class SharedLinkEditDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharedLinkEditDto" /> class.
        /// </summary>
        /// <param name="allowDownload">allowDownload</param>
        /// <param name="allowUpload">allowUpload</param>
        /// <param name="changeExpiryTime">Few clients cannot send null to set the expiryTime to never. Setting this flag and not sending expiryAt is considered as null instead. Clients that can send null values can ignore this.</param>
        /// <param name="description">description</param>
        /// <param name="expiresAt">expiresAt</param>
        /// <param name="password">password</param>
        /// <param name="showMetadata">showMetadata</param>
        /// <param name="slug">slug</param>
        [JsonConstructor]
        public SharedLinkEditDto(Option<bool?> allowDownload = default, Option<bool?> allowUpload = default, Option<bool?> changeExpiryTime = default, Option<string?> description = default, Option<DateTime?> expiresAt = default, Option<string?> password = default, Option<bool?> showMetadata = default, Option<string?> slug = default)
        {
            AllowDownloadOption = allowDownload;
            AllowUploadOption = allowUpload;
            ChangeExpiryTimeOption = changeExpiryTime;
            DescriptionOption = description;
            ExpiresAtOption = expiresAt;
            PasswordOption = password;
            ShowMetadataOption = showMetadata;
            SlugOption = slug;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AllowDownload
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AllowDownloadOption { get; private set; }

        /// <summary>
        /// Gets or Sets AllowDownload
        /// </summary>
        [JsonPropertyName("allowDownload")]
        public bool? AllowDownload { get { return this.AllowDownloadOption; } set { this.AllowDownloadOption = new(value); } }

        /// <summary>
        /// Used to track the state of AllowUpload
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AllowUploadOption { get; private set; }

        /// <summary>
        /// Gets or Sets AllowUpload
        /// </summary>
        [JsonPropertyName("allowUpload")]
        public bool? AllowUpload { get { return this.AllowUploadOption; } set { this.AllowUploadOption = new(value); } }

        /// <summary>
        /// Used to track the state of ChangeExpiryTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ChangeExpiryTimeOption { get; private set; }

        /// <summary>
        /// Few clients cannot send null to set the expiryTime to never. Setting this flag and not sending expiryAt is considered as null instead. Clients that can send null values can ignore this.
        /// </summary>
        /// <value>Few clients cannot send null to set the expiryTime to never. Setting this flag and not sending expiryAt is considered as null instead. Clients that can send null values can ignore this.</value>
        [JsonPropertyName("changeExpiryTime")]
        public bool? ChangeExpiryTime { get { return this.ChangeExpiryTimeOption; } set { this.ChangeExpiryTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExpiresAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> ExpiresAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExpiresAt
        /// </summary>
        [JsonPropertyName("expiresAt")]
        public DateTime? ExpiresAt { get { return this.ExpiresAtOption; } set { this.ExpiresAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Password
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PasswordOption { get; private set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [JsonPropertyName("password")]
        public string? Password { get { return this.PasswordOption; } set { this.PasswordOption = new(value); } }

        /// <summary>
        /// Used to track the state of ShowMetadata
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ShowMetadataOption { get; private set; }

        /// <summary>
        /// Gets or Sets ShowMetadata
        /// </summary>
        [JsonPropertyName("showMetadata")]
        public bool? ShowMetadata { get { return this.ShowMetadataOption; } set { this.ShowMetadataOption = new(value); } }

        /// <summary>
        /// Used to track the state of Slug
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SlugOption { get; private set; }

        /// <summary>
        /// Gets or Sets Slug
        /// </summary>
        [JsonPropertyName("slug")]
        public string? Slug { get { return this.SlugOption; } set { this.SlugOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SharedLinkEditDto {\n");
            sb.Append("  AllowDownload: ").Append(AllowDownload).Append("\n");
            sb.Append("  AllowUpload: ").Append(AllowUpload).Append("\n");
            sb.Append("  ChangeExpiryTime: ").Append(ChangeExpiryTime).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  ShowMetadata: ").Append(ShowMetadata).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SharedLinkEditDto" />
    /// </summary>
    public class SharedLinkEditDtoJsonConverter : JsonConverter<SharedLinkEditDto>
    {
        /// <summary>
        /// The format to use to serialize ExpiresAt
        /// </summary>
        public static string ExpiresAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="SharedLinkEditDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SharedLinkEditDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> allowDownload = default;
            Option<bool?> allowUpload = default;
            Option<bool?> changeExpiryTime = default;
            Option<string?> description = default;
            Option<DateTime?> expiresAt = default;
            Option<string?> password = default;
            Option<bool?> showMetadata = default;
            Option<string?> slug = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "allowDownload":
                            allowDownload = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "allowUpload":
                            allowUpload = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "changeExpiryTime":
                            changeExpiryTime = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "expiresAt":
                            expiresAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "password":
                            password = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "showMetadata":
                            showMetadata = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "slug":
                            slug = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (allowDownload.IsSet && allowDownload.Value == null)
                throw new ArgumentNullException(nameof(allowDownload), "Property is not nullable for class SharedLinkEditDto.");

            if (allowUpload.IsSet && allowUpload.Value == null)
                throw new ArgumentNullException(nameof(allowUpload), "Property is not nullable for class SharedLinkEditDto.");

            if (changeExpiryTime.IsSet && changeExpiryTime.Value == null)
                throw new ArgumentNullException(nameof(changeExpiryTime), "Property is not nullable for class SharedLinkEditDto.");

            if (showMetadata.IsSet && showMetadata.Value == null)
                throw new ArgumentNullException(nameof(showMetadata), "Property is not nullable for class SharedLinkEditDto.");

            return new SharedLinkEditDto(allowDownload, allowUpload, changeExpiryTime, description, expiresAt, password, showMetadata, slug);
        }

        /// <summary>
        /// Serializes a <see cref="SharedLinkEditDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sharedLinkEditDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SharedLinkEditDto sharedLinkEditDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, sharedLinkEditDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SharedLinkEditDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sharedLinkEditDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SharedLinkEditDto sharedLinkEditDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (sharedLinkEditDto.AllowDownloadOption.IsSet)
                writer.WriteBoolean("allowDownload", sharedLinkEditDto.AllowDownloadOption.Value!.Value);

            if (sharedLinkEditDto.AllowUploadOption.IsSet)
                writer.WriteBoolean("allowUpload", sharedLinkEditDto.AllowUploadOption.Value!.Value);

            if (sharedLinkEditDto.ChangeExpiryTimeOption.IsSet)
                writer.WriteBoolean("changeExpiryTime", sharedLinkEditDto.ChangeExpiryTimeOption.Value!.Value);

            if (sharedLinkEditDto.DescriptionOption.IsSet)
                if (sharedLinkEditDto.DescriptionOption.Value != null)
                    writer.WriteString("description", sharedLinkEditDto.Description);
                else
                    writer.WriteNull("description");

            if (sharedLinkEditDto.ExpiresAtOption.IsSet)
                if (sharedLinkEditDto.ExpiresAtOption.Value != null)
                    writer.WriteString("expiresAt", sharedLinkEditDto.ExpiresAtOption.Value!.Value.ToString(ExpiresAtFormat));
                else
                    writer.WriteNull("expiresAt");

            if (sharedLinkEditDto.PasswordOption.IsSet)
                if (sharedLinkEditDto.PasswordOption.Value != null)
                    writer.WriteString("password", sharedLinkEditDto.Password);
                else
                    writer.WriteNull("password");

            if (sharedLinkEditDto.ShowMetadataOption.IsSet)
                writer.WriteBoolean("showMetadata", sharedLinkEditDto.ShowMetadataOption.Value!.Value);

            if (sharedLinkEditDto.SlugOption.IsSet)
                if (sharedLinkEditDto.SlugOption.Value != null)
                    writer.WriteString("slug", sharedLinkEditDto.Slug);
                else
                    writer.WriteNull("slug");
        }
    }
}
