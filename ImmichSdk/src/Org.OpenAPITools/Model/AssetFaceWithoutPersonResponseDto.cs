// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AssetFaceWithoutPersonResponseDto
    /// </summary>
    public partial class AssetFaceWithoutPersonResponseDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetFaceWithoutPersonResponseDto" /> class.
        /// </summary>
        /// <param name="boundingBoxX1">boundingBoxX1</param>
        /// <param name="boundingBoxX2">boundingBoxX2</param>
        /// <param name="boundingBoxY1">boundingBoxY1</param>
        /// <param name="boundingBoxY2">boundingBoxY2</param>
        /// <param name="id">id</param>
        /// <param name="imageHeight">imageHeight</param>
        /// <param name="imageWidth">imageWidth</param>
        /// <param name="sourceType">sourceType</param>
        [JsonConstructor]
        public AssetFaceWithoutPersonResponseDto(int boundingBoxX1, int boundingBoxX2, int boundingBoxY1, int boundingBoxY2, Guid id, int imageHeight, int imageWidth, Option<SourceType?> sourceType = default)
        {
            BoundingBoxX1 = boundingBoxX1;
            BoundingBoxX2 = boundingBoxX2;
            BoundingBoxY1 = boundingBoxY1;
            BoundingBoxY2 = boundingBoxY2;
            Id = id;
            ImageHeight = imageHeight;
            ImageWidth = imageWidth;
            SourceTypeOption = sourceType;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of SourceType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SourceType?> SourceTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets SourceType
        /// </summary>
        [JsonPropertyName("sourceType")]
        public SourceType? SourceType { get { return this.SourceTypeOption; } set { this.SourceTypeOption = new(value); } }

        /// <summary>
        /// Gets or Sets BoundingBoxX1
        /// </summary>
        [JsonPropertyName("boundingBoxX1")]
        public int BoundingBoxX1 { get; set; }

        /// <summary>
        /// Gets or Sets BoundingBoxX2
        /// </summary>
        [JsonPropertyName("boundingBoxX2")]
        public int BoundingBoxX2 { get; set; }

        /// <summary>
        /// Gets or Sets BoundingBoxY1
        /// </summary>
        [JsonPropertyName("boundingBoxY1")]
        public int BoundingBoxY1 { get; set; }

        /// <summary>
        /// Gets or Sets BoundingBoxY2
        /// </summary>
        [JsonPropertyName("boundingBoxY2")]
        public int BoundingBoxY2 { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets ImageHeight
        /// </summary>
        [JsonPropertyName("imageHeight")]
        public int ImageHeight { get; set; }

        /// <summary>
        /// Gets or Sets ImageWidth
        /// </summary>
        [JsonPropertyName("imageWidth")]
        public int ImageWidth { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AssetFaceWithoutPersonResponseDto {\n");
            sb.Append("  BoundingBoxX1: ").Append(BoundingBoxX1).Append("\n");
            sb.Append("  BoundingBoxX2: ").Append(BoundingBoxX2).Append("\n");
            sb.Append("  BoundingBoxY1: ").Append(BoundingBoxY1).Append("\n");
            sb.Append("  BoundingBoxY2: ").Append(BoundingBoxY2).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImageHeight: ").Append(ImageHeight).Append("\n");
            sb.Append("  ImageWidth: ").Append(ImageWidth).Append("\n");
            sb.Append("  SourceType: ").Append(SourceType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AssetFaceWithoutPersonResponseDto" />
    /// </summary>
    public class AssetFaceWithoutPersonResponseDtoJsonConverter : JsonConverter<AssetFaceWithoutPersonResponseDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="AssetFaceWithoutPersonResponseDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AssetFaceWithoutPersonResponseDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> boundingBoxX1 = default;
            Option<int?> boundingBoxX2 = default;
            Option<int?> boundingBoxY1 = default;
            Option<int?> boundingBoxY2 = default;
            Option<Guid?> id = default;
            Option<int?> imageHeight = default;
            Option<int?> imageWidth = default;
            Option<SourceType?> sourceType = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "boundingBoxX1":
                            boundingBoxX1 = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "boundingBoxX2":
                            boundingBoxX2 = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "boundingBoxY1":
                            boundingBoxY1 = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "boundingBoxY2":
                            boundingBoxY2 = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "imageHeight":
                            imageHeight = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "imageWidth":
                            imageWidth = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "sourceType":
                            string? sourceTypeRawValue = utf8JsonReader.GetString();
                            if (sourceTypeRawValue != null)
                                sourceType = new Option<SourceType?>(SourceTypeValueConverter.FromStringOrDefault(sourceTypeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!boundingBoxX1.IsSet)
                throw new ArgumentException("Property is required for class AssetFaceWithoutPersonResponseDto.", nameof(boundingBoxX1));

            if (!boundingBoxX2.IsSet)
                throw new ArgumentException("Property is required for class AssetFaceWithoutPersonResponseDto.", nameof(boundingBoxX2));

            if (!boundingBoxY1.IsSet)
                throw new ArgumentException("Property is required for class AssetFaceWithoutPersonResponseDto.", nameof(boundingBoxY1));

            if (!boundingBoxY2.IsSet)
                throw new ArgumentException("Property is required for class AssetFaceWithoutPersonResponseDto.", nameof(boundingBoxY2));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class AssetFaceWithoutPersonResponseDto.", nameof(id));

            if (!imageHeight.IsSet)
                throw new ArgumentException("Property is required for class AssetFaceWithoutPersonResponseDto.", nameof(imageHeight));

            if (!imageWidth.IsSet)
                throw new ArgumentException("Property is required for class AssetFaceWithoutPersonResponseDto.", nameof(imageWidth));

            if (boundingBoxX1.IsSet && boundingBoxX1.Value == null)
                throw new ArgumentNullException(nameof(boundingBoxX1), "Property is not nullable for class AssetFaceWithoutPersonResponseDto.");

            if (boundingBoxX2.IsSet && boundingBoxX2.Value == null)
                throw new ArgumentNullException(nameof(boundingBoxX2), "Property is not nullable for class AssetFaceWithoutPersonResponseDto.");

            if (boundingBoxY1.IsSet && boundingBoxY1.Value == null)
                throw new ArgumentNullException(nameof(boundingBoxY1), "Property is not nullable for class AssetFaceWithoutPersonResponseDto.");

            if (boundingBoxY2.IsSet && boundingBoxY2.Value == null)
                throw new ArgumentNullException(nameof(boundingBoxY2), "Property is not nullable for class AssetFaceWithoutPersonResponseDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class AssetFaceWithoutPersonResponseDto.");

            if (imageHeight.IsSet && imageHeight.Value == null)
                throw new ArgumentNullException(nameof(imageHeight), "Property is not nullable for class AssetFaceWithoutPersonResponseDto.");

            if (imageWidth.IsSet && imageWidth.Value == null)
                throw new ArgumentNullException(nameof(imageWidth), "Property is not nullable for class AssetFaceWithoutPersonResponseDto.");

            if (sourceType.IsSet && sourceType.Value == null)
                throw new ArgumentNullException(nameof(sourceType), "Property is not nullable for class AssetFaceWithoutPersonResponseDto.");

            return new AssetFaceWithoutPersonResponseDto(boundingBoxX1.Value!.Value!, boundingBoxX2.Value!.Value!, boundingBoxY1.Value!.Value!, boundingBoxY2.Value!.Value!, id.Value!.Value!, imageHeight.Value!.Value!, imageWidth.Value!.Value!, sourceType);
        }

        /// <summary>
        /// Serializes a <see cref="AssetFaceWithoutPersonResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="assetFaceWithoutPersonResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AssetFaceWithoutPersonResponseDto assetFaceWithoutPersonResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, assetFaceWithoutPersonResponseDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AssetFaceWithoutPersonResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="assetFaceWithoutPersonResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AssetFaceWithoutPersonResponseDto assetFaceWithoutPersonResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("boundingBoxX1", assetFaceWithoutPersonResponseDto.BoundingBoxX1);

            writer.WriteNumber("boundingBoxX2", assetFaceWithoutPersonResponseDto.BoundingBoxX2);

            writer.WriteNumber("boundingBoxY1", assetFaceWithoutPersonResponseDto.BoundingBoxY1);

            writer.WriteNumber("boundingBoxY2", assetFaceWithoutPersonResponseDto.BoundingBoxY2);

            writer.WriteString("id", assetFaceWithoutPersonResponseDto.Id);

            writer.WriteNumber("imageHeight", assetFaceWithoutPersonResponseDto.ImageHeight);

            writer.WriteNumber("imageWidth", assetFaceWithoutPersonResponseDto.ImageWidth);

            if (assetFaceWithoutPersonResponseDto.SourceTypeOption.IsSet)
            {
                var sourceTypeRawValue = SourceTypeValueConverter.ToJsonValue(assetFaceWithoutPersonResponseDto.SourceType!.Value);
                writer.WriteString("sourceType", sourceTypeRawValue);
            }
        }
    }
}
