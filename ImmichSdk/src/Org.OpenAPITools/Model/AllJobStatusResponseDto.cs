// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AllJobStatusResponseDto
    /// </summary>
    public partial class AllJobStatusResponseDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AllJobStatusResponseDto" /> class.
        /// </summary>
        /// <param name="backgroundTask">backgroundTask</param>
        /// <param name="backupDatabase">backupDatabase</param>
        /// <param name="duplicateDetection">duplicateDetection</param>
        /// <param name="faceDetection">faceDetection</param>
        /// <param name="facialRecognition">facialRecognition</param>
        /// <param name="library">library</param>
        /// <param name="metadataExtraction">metadataExtraction</param>
        /// <param name="migration">migration</param>
        /// <param name="notifications">notifications</param>
        /// <param name="search">search</param>
        /// <param name="sidecar">sidecar</param>
        /// <param name="smartSearch">smartSearch</param>
        /// <param name="storageTemplateMigration">storageTemplateMigration</param>
        /// <param name="thumbnailGeneration">thumbnailGeneration</param>
        /// <param name="videoConversion">videoConversion</param>
        [JsonConstructor]
        public AllJobStatusResponseDto(JobStatusDto backgroundTask, JobStatusDto backupDatabase, JobStatusDto duplicateDetection, JobStatusDto faceDetection, JobStatusDto facialRecognition, JobStatusDto library, JobStatusDto metadataExtraction, JobStatusDto migration, JobStatusDto notifications, JobStatusDto search, JobStatusDto sidecar, JobStatusDto smartSearch, JobStatusDto storageTemplateMigration, JobStatusDto thumbnailGeneration, JobStatusDto videoConversion)
        {
            BackgroundTask = backgroundTask;
            BackupDatabase = backupDatabase;
            DuplicateDetection = duplicateDetection;
            FaceDetection = faceDetection;
            FacialRecognition = facialRecognition;
            Library = library;
            MetadataExtraction = metadataExtraction;
            Migration = migration;
            Notifications = notifications;
            Search = search;
            Sidecar = sidecar;
            SmartSearch = smartSearch;
            StorageTemplateMigration = storageTemplateMigration;
            ThumbnailGeneration = thumbnailGeneration;
            VideoConversion = videoConversion;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets BackgroundTask
        /// </summary>
        [JsonPropertyName("backgroundTask")]
        public JobStatusDto BackgroundTask { get; set; }

        /// <summary>
        /// Gets or Sets BackupDatabase
        /// </summary>
        [JsonPropertyName("backupDatabase")]
        public JobStatusDto BackupDatabase { get; set; }

        /// <summary>
        /// Gets or Sets DuplicateDetection
        /// </summary>
        [JsonPropertyName("duplicateDetection")]
        public JobStatusDto DuplicateDetection { get; set; }

        /// <summary>
        /// Gets or Sets FaceDetection
        /// </summary>
        [JsonPropertyName("faceDetection")]
        public JobStatusDto FaceDetection { get; set; }

        /// <summary>
        /// Gets or Sets FacialRecognition
        /// </summary>
        [JsonPropertyName("facialRecognition")]
        public JobStatusDto FacialRecognition { get; set; }

        /// <summary>
        /// Gets or Sets Library
        /// </summary>
        [JsonPropertyName("library")]
        public JobStatusDto Library { get; set; }

        /// <summary>
        /// Gets or Sets MetadataExtraction
        /// </summary>
        [JsonPropertyName("metadataExtraction")]
        public JobStatusDto MetadataExtraction { get; set; }

        /// <summary>
        /// Gets or Sets Migration
        /// </summary>
        [JsonPropertyName("migration")]
        public JobStatusDto Migration { get; set; }

        /// <summary>
        /// Gets or Sets Notifications
        /// </summary>
        [JsonPropertyName("notifications")]
        public JobStatusDto Notifications { get; set; }

        /// <summary>
        /// Gets or Sets Search
        /// </summary>
        [JsonPropertyName("search")]
        public JobStatusDto Search { get; set; }

        /// <summary>
        /// Gets or Sets Sidecar
        /// </summary>
        [JsonPropertyName("sidecar")]
        public JobStatusDto Sidecar { get; set; }

        /// <summary>
        /// Gets or Sets SmartSearch
        /// </summary>
        [JsonPropertyName("smartSearch")]
        public JobStatusDto SmartSearch { get; set; }

        /// <summary>
        /// Gets or Sets StorageTemplateMigration
        /// </summary>
        [JsonPropertyName("storageTemplateMigration")]
        public JobStatusDto StorageTemplateMigration { get; set; }

        /// <summary>
        /// Gets or Sets ThumbnailGeneration
        /// </summary>
        [JsonPropertyName("thumbnailGeneration")]
        public JobStatusDto ThumbnailGeneration { get; set; }

        /// <summary>
        /// Gets or Sets VideoConversion
        /// </summary>
        [JsonPropertyName("videoConversion")]
        public JobStatusDto VideoConversion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AllJobStatusResponseDto {\n");
            sb.Append("  BackgroundTask: ").Append(BackgroundTask).Append("\n");
            sb.Append("  BackupDatabase: ").Append(BackupDatabase).Append("\n");
            sb.Append("  DuplicateDetection: ").Append(DuplicateDetection).Append("\n");
            sb.Append("  FaceDetection: ").Append(FaceDetection).Append("\n");
            sb.Append("  FacialRecognition: ").Append(FacialRecognition).Append("\n");
            sb.Append("  Library: ").Append(Library).Append("\n");
            sb.Append("  MetadataExtraction: ").Append(MetadataExtraction).Append("\n");
            sb.Append("  Migration: ").Append(Migration).Append("\n");
            sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            sb.Append("  Search: ").Append(Search).Append("\n");
            sb.Append("  Sidecar: ").Append(Sidecar).Append("\n");
            sb.Append("  SmartSearch: ").Append(SmartSearch).Append("\n");
            sb.Append("  StorageTemplateMigration: ").Append(StorageTemplateMigration).Append("\n");
            sb.Append("  ThumbnailGeneration: ").Append(ThumbnailGeneration).Append("\n");
            sb.Append("  VideoConversion: ").Append(VideoConversion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AllJobStatusResponseDto" />
    /// </summary>
    public class AllJobStatusResponseDtoJsonConverter : JsonConverter<AllJobStatusResponseDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="AllJobStatusResponseDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AllJobStatusResponseDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<JobStatusDto?> backgroundTask = default;
            Option<JobStatusDto?> backupDatabase = default;
            Option<JobStatusDto?> duplicateDetection = default;
            Option<JobStatusDto?> faceDetection = default;
            Option<JobStatusDto?> facialRecognition = default;
            Option<JobStatusDto?> library = default;
            Option<JobStatusDto?> metadataExtraction = default;
            Option<JobStatusDto?> migration = default;
            Option<JobStatusDto?> notifications = default;
            Option<JobStatusDto?> search = default;
            Option<JobStatusDto?> sidecar = default;
            Option<JobStatusDto?> smartSearch = default;
            Option<JobStatusDto?> storageTemplateMigration = default;
            Option<JobStatusDto?> thumbnailGeneration = default;
            Option<JobStatusDto?> videoConversion = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "backgroundTask":
                            backgroundTask = new Option<JobStatusDto?>(JsonSerializer.Deserialize<JobStatusDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "backupDatabase":
                            backupDatabase = new Option<JobStatusDto?>(JsonSerializer.Deserialize<JobStatusDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "duplicateDetection":
                            duplicateDetection = new Option<JobStatusDto?>(JsonSerializer.Deserialize<JobStatusDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "faceDetection":
                            faceDetection = new Option<JobStatusDto?>(JsonSerializer.Deserialize<JobStatusDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "facialRecognition":
                            facialRecognition = new Option<JobStatusDto?>(JsonSerializer.Deserialize<JobStatusDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "library":
                            library = new Option<JobStatusDto?>(JsonSerializer.Deserialize<JobStatusDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "metadataExtraction":
                            metadataExtraction = new Option<JobStatusDto?>(JsonSerializer.Deserialize<JobStatusDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "migration":
                            migration = new Option<JobStatusDto?>(JsonSerializer.Deserialize<JobStatusDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "notifications":
                            notifications = new Option<JobStatusDto?>(JsonSerializer.Deserialize<JobStatusDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "search":
                            search = new Option<JobStatusDto?>(JsonSerializer.Deserialize<JobStatusDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "sidecar":
                            sidecar = new Option<JobStatusDto?>(JsonSerializer.Deserialize<JobStatusDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "smartSearch":
                            smartSearch = new Option<JobStatusDto?>(JsonSerializer.Deserialize<JobStatusDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "storageTemplateMigration":
                            storageTemplateMigration = new Option<JobStatusDto?>(JsonSerializer.Deserialize<JobStatusDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "thumbnailGeneration":
                            thumbnailGeneration = new Option<JobStatusDto?>(JsonSerializer.Deserialize<JobStatusDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "videoConversion":
                            videoConversion = new Option<JobStatusDto?>(JsonSerializer.Deserialize<JobStatusDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!backgroundTask.IsSet)
                throw new ArgumentException("Property is required for class AllJobStatusResponseDto.", nameof(backgroundTask));

            if (!backupDatabase.IsSet)
                throw new ArgumentException("Property is required for class AllJobStatusResponseDto.", nameof(backupDatabase));

            if (!duplicateDetection.IsSet)
                throw new ArgumentException("Property is required for class AllJobStatusResponseDto.", nameof(duplicateDetection));

            if (!faceDetection.IsSet)
                throw new ArgumentException("Property is required for class AllJobStatusResponseDto.", nameof(faceDetection));

            if (!facialRecognition.IsSet)
                throw new ArgumentException("Property is required for class AllJobStatusResponseDto.", nameof(facialRecognition));

            if (!library.IsSet)
                throw new ArgumentException("Property is required for class AllJobStatusResponseDto.", nameof(library));

            if (!metadataExtraction.IsSet)
                throw new ArgumentException("Property is required for class AllJobStatusResponseDto.", nameof(metadataExtraction));

            if (!migration.IsSet)
                throw new ArgumentException("Property is required for class AllJobStatusResponseDto.", nameof(migration));

            if (!notifications.IsSet)
                throw new ArgumentException("Property is required for class AllJobStatusResponseDto.", nameof(notifications));

            if (!search.IsSet)
                throw new ArgumentException("Property is required for class AllJobStatusResponseDto.", nameof(search));

            if (!sidecar.IsSet)
                throw new ArgumentException("Property is required for class AllJobStatusResponseDto.", nameof(sidecar));

            if (!smartSearch.IsSet)
                throw new ArgumentException("Property is required for class AllJobStatusResponseDto.", nameof(smartSearch));

            if (!storageTemplateMigration.IsSet)
                throw new ArgumentException("Property is required for class AllJobStatusResponseDto.", nameof(storageTemplateMigration));

            if (!thumbnailGeneration.IsSet)
                throw new ArgumentException("Property is required for class AllJobStatusResponseDto.", nameof(thumbnailGeneration));

            if (!videoConversion.IsSet)
                throw new ArgumentException("Property is required for class AllJobStatusResponseDto.", nameof(videoConversion));

            if (backgroundTask.IsSet && backgroundTask.Value == null)
                throw new ArgumentNullException(nameof(backgroundTask), "Property is not nullable for class AllJobStatusResponseDto.");

            if (backupDatabase.IsSet && backupDatabase.Value == null)
                throw new ArgumentNullException(nameof(backupDatabase), "Property is not nullable for class AllJobStatusResponseDto.");

            if (duplicateDetection.IsSet && duplicateDetection.Value == null)
                throw new ArgumentNullException(nameof(duplicateDetection), "Property is not nullable for class AllJobStatusResponseDto.");

            if (faceDetection.IsSet && faceDetection.Value == null)
                throw new ArgumentNullException(nameof(faceDetection), "Property is not nullable for class AllJobStatusResponseDto.");

            if (facialRecognition.IsSet && facialRecognition.Value == null)
                throw new ArgumentNullException(nameof(facialRecognition), "Property is not nullable for class AllJobStatusResponseDto.");

            if (library.IsSet && library.Value == null)
                throw new ArgumentNullException(nameof(library), "Property is not nullable for class AllJobStatusResponseDto.");

            if (metadataExtraction.IsSet && metadataExtraction.Value == null)
                throw new ArgumentNullException(nameof(metadataExtraction), "Property is not nullable for class AllJobStatusResponseDto.");

            if (migration.IsSet && migration.Value == null)
                throw new ArgumentNullException(nameof(migration), "Property is not nullable for class AllJobStatusResponseDto.");

            if (notifications.IsSet && notifications.Value == null)
                throw new ArgumentNullException(nameof(notifications), "Property is not nullable for class AllJobStatusResponseDto.");

            if (search.IsSet && search.Value == null)
                throw new ArgumentNullException(nameof(search), "Property is not nullable for class AllJobStatusResponseDto.");

            if (sidecar.IsSet && sidecar.Value == null)
                throw new ArgumentNullException(nameof(sidecar), "Property is not nullable for class AllJobStatusResponseDto.");

            if (smartSearch.IsSet && smartSearch.Value == null)
                throw new ArgumentNullException(nameof(smartSearch), "Property is not nullable for class AllJobStatusResponseDto.");

            if (storageTemplateMigration.IsSet && storageTemplateMigration.Value == null)
                throw new ArgumentNullException(nameof(storageTemplateMigration), "Property is not nullable for class AllJobStatusResponseDto.");

            if (thumbnailGeneration.IsSet && thumbnailGeneration.Value == null)
                throw new ArgumentNullException(nameof(thumbnailGeneration), "Property is not nullable for class AllJobStatusResponseDto.");

            if (videoConversion.IsSet && videoConversion.Value == null)
                throw new ArgumentNullException(nameof(videoConversion), "Property is not nullable for class AllJobStatusResponseDto.");

            return new AllJobStatusResponseDto(backgroundTask.Value!, backupDatabase.Value!, duplicateDetection.Value!, faceDetection.Value!, facialRecognition.Value!, library.Value!, metadataExtraction.Value!, migration.Value!, notifications.Value!, search.Value!, sidecar.Value!, smartSearch.Value!, storageTemplateMigration.Value!, thumbnailGeneration.Value!, videoConversion.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="AllJobStatusResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="allJobStatusResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AllJobStatusResponseDto allJobStatusResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, allJobStatusResponseDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AllJobStatusResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="allJobStatusResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AllJobStatusResponseDto allJobStatusResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (allJobStatusResponseDto.BackgroundTask == null)
                throw new ArgumentNullException(nameof(allJobStatusResponseDto.BackgroundTask), "Property is required for class AllJobStatusResponseDto.");

            if (allJobStatusResponseDto.BackupDatabase == null)
                throw new ArgumentNullException(nameof(allJobStatusResponseDto.BackupDatabase), "Property is required for class AllJobStatusResponseDto.");

            if (allJobStatusResponseDto.DuplicateDetection == null)
                throw new ArgumentNullException(nameof(allJobStatusResponseDto.DuplicateDetection), "Property is required for class AllJobStatusResponseDto.");

            if (allJobStatusResponseDto.FaceDetection == null)
                throw new ArgumentNullException(nameof(allJobStatusResponseDto.FaceDetection), "Property is required for class AllJobStatusResponseDto.");

            if (allJobStatusResponseDto.FacialRecognition == null)
                throw new ArgumentNullException(nameof(allJobStatusResponseDto.FacialRecognition), "Property is required for class AllJobStatusResponseDto.");

            if (allJobStatusResponseDto.Library == null)
                throw new ArgumentNullException(nameof(allJobStatusResponseDto.Library), "Property is required for class AllJobStatusResponseDto.");

            if (allJobStatusResponseDto.MetadataExtraction == null)
                throw new ArgumentNullException(nameof(allJobStatusResponseDto.MetadataExtraction), "Property is required for class AllJobStatusResponseDto.");

            if (allJobStatusResponseDto.Migration == null)
                throw new ArgumentNullException(nameof(allJobStatusResponseDto.Migration), "Property is required for class AllJobStatusResponseDto.");

            if (allJobStatusResponseDto.Notifications == null)
                throw new ArgumentNullException(nameof(allJobStatusResponseDto.Notifications), "Property is required for class AllJobStatusResponseDto.");

            if (allJobStatusResponseDto.Search == null)
                throw new ArgumentNullException(nameof(allJobStatusResponseDto.Search), "Property is required for class AllJobStatusResponseDto.");

            if (allJobStatusResponseDto.Sidecar == null)
                throw new ArgumentNullException(nameof(allJobStatusResponseDto.Sidecar), "Property is required for class AllJobStatusResponseDto.");

            if (allJobStatusResponseDto.SmartSearch == null)
                throw new ArgumentNullException(nameof(allJobStatusResponseDto.SmartSearch), "Property is required for class AllJobStatusResponseDto.");

            if (allJobStatusResponseDto.StorageTemplateMigration == null)
                throw new ArgumentNullException(nameof(allJobStatusResponseDto.StorageTemplateMigration), "Property is required for class AllJobStatusResponseDto.");

            if (allJobStatusResponseDto.ThumbnailGeneration == null)
                throw new ArgumentNullException(nameof(allJobStatusResponseDto.ThumbnailGeneration), "Property is required for class AllJobStatusResponseDto.");

            if (allJobStatusResponseDto.VideoConversion == null)
                throw new ArgumentNullException(nameof(allJobStatusResponseDto.VideoConversion), "Property is required for class AllJobStatusResponseDto.");

            writer.WritePropertyName("backgroundTask");
            JsonSerializer.Serialize(writer, allJobStatusResponseDto.BackgroundTask, jsonSerializerOptions);
            writer.WritePropertyName("backupDatabase");
            JsonSerializer.Serialize(writer, allJobStatusResponseDto.BackupDatabase, jsonSerializerOptions);
            writer.WritePropertyName("duplicateDetection");
            JsonSerializer.Serialize(writer, allJobStatusResponseDto.DuplicateDetection, jsonSerializerOptions);
            writer.WritePropertyName("faceDetection");
            JsonSerializer.Serialize(writer, allJobStatusResponseDto.FaceDetection, jsonSerializerOptions);
            writer.WritePropertyName("facialRecognition");
            JsonSerializer.Serialize(writer, allJobStatusResponseDto.FacialRecognition, jsonSerializerOptions);
            writer.WritePropertyName("library");
            JsonSerializer.Serialize(writer, allJobStatusResponseDto.Library, jsonSerializerOptions);
            writer.WritePropertyName("metadataExtraction");
            JsonSerializer.Serialize(writer, allJobStatusResponseDto.MetadataExtraction, jsonSerializerOptions);
            writer.WritePropertyName("migration");
            JsonSerializer.Serialize(writer, allJobStatusResponseDto.Migration, jsonSerializerOptions);
            writer.WritePropertyName("notifications");
            JsonSerializer.Serialize(writer, allJobStatusResponseDto.Notifications, jsonSerializerOptions);
            writer.WritePropertyName("search");
            JsonSerializer.Serialize(writer, allJobStatusResponseDto.Search, jsonSerializerOptions);
            writer.WritePropertyName("sidecar");
            JsonSerializer.Serialize(writer, allJobStatusResponseDto.Sidecar, jsonSerializerOptions);
            writer.WritePropertyName("smartSearch");
            JsonSerializer.Serialize(writer, allJobStatusResponseDto.SmartSearch, jsonSerializerOptions);
            writer.WritePropertyName("storageTemplateMigration");
            JsonSerializer.Serialize(writer, allJobStatusResponseDto.StorageTemplateMigration, jsonSerializerOptions);
            writer.WritePropertyName("thumbnailGeneration");
            JsonSerializer.Serialize(writer, allJobStatusResponseDto.ThumbnailGeneration, jsonSerializerOptions);
            writer.WritePropertyName("videoConversion");
            JsonSerializer.Serialize(writer, allJobStatusResponseDto.VideoConversion, jsonSerializerOptions);
        }
    }
}
