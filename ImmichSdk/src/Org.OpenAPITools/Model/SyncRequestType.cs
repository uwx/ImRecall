// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines SyncRequestType
    /// </summary>
    public enum SyncRequestType
    {
        /// <summary>
        /// Enum AlbumsV1 for value: AlbumsV1
        /// </summary>
        AlbumsV1 = 1,

        /// <summary>
        /// Enum AlbumUsersV1 for value: AlbumUsersV1
        /// </summary>
        AlbumUsersV1 = 2,

        /// <summary>
        /// Enum AlbumToAssetsV1 for value: AlbumToAssetsV1
        /// </summary>
        AlbumToAssetsV1 = 3,

        /// <summary>
        /// Enum AlbumAssetsV1 for value: AlbumAssetsV1
        /// </summary>
        AlbumAssetsV1 = 4,

        /// <summary>
        /// Enum AlbumAssetExifsV1 for value: AlbumAssetExifsV1
        /// </summary>
        AlbumAssetExifsV1 = 5,

        /// <summary>
        /// Enum AssetsV1 for value: AssetsV1
        /// </summary>
        AssetsV1 = 6,

        /// <summary>
        /// Enum AssetExifsV1 for value: AssetExifsV1
        /// </summary>
        AssetExifsV1 = 7,

        /// <summary>
        /// Enum AssetMetadataV1 for value: AssetMetadataV1
        /// </summary>
        AssetMetadataV1 = 8,

        /// <summary>
        /// Enum AuthUsersV1 for value: AuthUsersV1
        /// </summary>
        AuthUsersV1 = 9,

        /// <summary>
        /// Enum MemoriesV1 for value: MemoriesV1
        /// </summary>
        MemoriesV1 = 10,

        /// <summary>
        /// Enum MemoryToAssetsV1 for value: MemoryToAssetsV1
        /// </summary>
        MemoryToAssetsV1 = 11,

        /// <summary>
        /// Enum PartnersV1 for value: PartnersV1
        /// </summary>
        PartnersV1 = 12,

        /// <summary>
        /// Enum PartnerAssetsV1 for value: PartnerAssetsV1
        /// </summary>
        PartnerAssetsV1 = 13,

        /// <summary>
        /// Enum PartnerAssetExifsV1 for value: PartnerAssetExifsV1
        /// </summary>
        PartnerAssetExifsV1 = 14,

        /// <summary>
        /// Enum PartnerStacksV1 for value: PartnerStacksV1
        /// </summary>
        PartnerStacksV1 = 15,

        /// <summary>
        /// Enum StacksV1 for value: StacksV1
        /// </summary>
        StacksV1 = 16,

        /// <summary>
        /// Enum UsersV1 for value: UsersV1
        /// </summary>
        UsersV1 = 17,

        /// <summary>
        /// Enum PeopleV1 for value: PeopleV1
        /// </summary>
        PeopleV1 = 18,

        /// <summary>
        /// Enum AssetFacesV1 for value: AssetFacesV1
        /// </summary>
        AssetFacesV1 = 19,

        /// <summary>
        /// Enum UserMetadataV1 for value: UserMetadataV1
        /// </summary>
        UserMetadataV1 = 20
    }

    /// <summary>
    /// Converts <see cref="SyncRequestType"/> to and from the JSON value
    /// </summary>
    public static class SyncRequestTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="SyncRequestType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SyncRequestType FromString(string value)
        {
            if (value.Equals("AlbumsV1"))
                return SyncRequestType.AlbumsV1;

            if (value.Equals("AlbumUsersV1"))
                return SyncRequestType.AlbumUsersV1;

            if (value.Equals("AlbumToAssetsV1"))
                return SyncRequestType.AlbumToAssetsV1;

            if (value.Equals("AlbumAssetsV1"))
                return SyncRequestType.AlbumAssetsV1;

            if (value.Equals("AlbumAssetExifsV1"))
                return SyncRequestType.AlbumAssetExifsV1;

            if (value.Equals("AssetsV1"))
                return SyncRequestType.AssetsV1;

            if (value.Equals("AssetExifsV1"))
                return SyncRequestType.AssetExifsV1;

            if (value.Equals("AssetMetadataV1"))
                return SyncRequestType.AssetMetadataV1;

            if (value.Equals("AuthUsersV1"))
                return SyncRequestType.AuthUsersV1;

            if (value.Equals("MemoriesV1"))
                return SyncRequestType.MemoriesV1;

            if (value.Equals("MemoryToAssetsV1"))
                return SyncRequestType.MemoryToAssetsV1;

            if (value.Equals("PartnersV1"))
                return SyncRequestType.PartnersV1;

            if (value.Equals("PartnerAssetsV1"))
                return SyncRequestType.PartnerAssetsV1;

            if (value.Equals("PartnerAssetExifsV1"))
                return SyncRequestType.PartnerAssetExifsV1;

            if (value.Equals("PartnerStacksV1"))
                return SyncRequestType.PartnerStacksV1;

            if (value.Equals("StacksV1"))
                return SyncRequestType.StacksV1;

            if (value.Equals("UsersV1"))
                return SyncRequestType.UsersV1;

            if (value.Equals("PeopleV1"))
                return SyncRequestType.PeopleV1;

            if (value.Equals("AssetFacesV1"))
                return SyncRequestType.AssetFacesV1;

            if (value.Equals("UserMetadataV1"))
                return SyncRequestType.UserMetadataV1;

            throw new NotImplementedException($"Could not convert value to type SyncRequestType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="SyncRequestType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SyncRequestType? FromStringOrDefault(string value)
        {
            if (value.Equals("AlbumsV1"))
                return SyncRequestType.AlbumsV1;

            if (value.Equals("AlbumUsersV1"))
                return SyncRequestType.AlbumUsersV1;

            if (value.Equals("AlbumToAssetsV1"))
                return SyncRequestType.AlbumToAssetsV1;

            if (value.Equals("AlbumAssetsV1"))
                return SyncRequestType.AlbumAssetsV1;

            if (value.Equals("AlbumAssetExifsV1"))
                return SyncRequestType.AlbumAssetExifsV1;

            if (value.Equals("AssetsV1"))
                return SyncRequestType.AssetsV1;

            if (value.Equals("AssetExifsV1"))
                return SyncRequestType.AssetExifsV1;

            if (value.Equals("AssetMetadataV1"))
                return SyncRequestType.AssetMetadataV1;

            if (value.Equals("AuthUsersV1"))
                return SyncRequestType.AuthUsersV1;

            if (value.Equals("MemoriesV1"))
                return SyncRequestType.MemoriesV1;

            if (value.Equals("MemoryToAssetsV1"))
                return SyncRequestType.MemoryToAssetsV1;

            if (value.Equals("PartnersV1"))
                return SyncRequestType.PartnersV1;

            if (value.Equals("PartnerAssetsV1"))
                return SyncRequestType.PartnerAssetsV1;

            if (value.Equals("PartnerAssetExifsV1"))
                return SyncRequestType.PartnerAssetExifsV1;

            if (value.Equals("PartnerStacksV1"))
                return SyncRequestType.PartnerStacksV1;

            if (value.Equals("StacksV1"))
                return SyncRequestType.StacksV1;

            if (value.Equals("UsersV1"))
                return SyncRequestType.UsersV1;

            if (value.Equals("PeopleV1"))
                return SyncRequestType.PeopleV1;

            if (value.Equals("AssetFacesV1"))
                return SyncRequestType.AssetFacesV1;

            if (value.Equals("UserMetadataV1"))
                return SyncRequestType.UserMetadataV1;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SyncRequestType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(SyncRequestType value)
        {
            if (value == SyncRequestType.AlbumsV1)
                return "AlbumsV1";

            if (value == SyncRequestType.AlbumUsersV1)
                return "AlbumUsersV1";

            if (value == SyncRequestType.AlbumToAssetsV1)
                return "AlbumToAssetsV1";

            if (value == SyncRequestType.AlbumAssetsV1)
                return "AlbumAssetsV1";

            if (value == SyncRequestType.AlbumAssetExifsV1)
                return "AlbumAssetExifsV1";

            if (value == SyncRequestType.AssetsV1)
                return "AssetsV1";

            if (value == SyncRequestType.AssetExifsV1)
                return "AssetExifsV1";

            if (value == SyncRequestType.AssetMetadataV1)
                return "AssetMetadataV1";

            if (value == SyncRequestType.AuthUsersV1)
                return "AuthUsersV1";

            if (value == SyncRequestType.MemoriesV1)
                return "MemoriesV1";

            if (value == SyncRequestType.MemoryToAssetsV1)
                return "MemoryToAssetsV1";

            if (value == SyncRequestType.PartnersV1)
                return "PartnersV1";

            if (value == SyncRequestType.PartnerAssetsV1)
                return "PartnerAssetsV1";

            if (value == SyncRequestType.PartnerAssetExifsV1)
                return "PartnerAssetExifsV1";

            if (value == SyncRequestType.PartnerStacksV1)
                return "PartnerStacksV1";

            if (value == SyncRequestType.StacksV1)
                return "StacksV1";

            if (value == SyncRequestType.UsersV1)
                return "UsersV1";

            if (value == SyncRequestType.PeopleV1)
                return "PeopleV1";

            if (value == SyncRequestType.AssetFacesV1)
                return "AssetFacesV1";

            if (value == SyncRequestType.UserMetadataV1)
                return "UserMetadataV1";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SyncRequestType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class SyncRequestTypeJsonConverter : JsonConverter<SyncRequestType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override SyncRequestType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            SyncRequestType? result = rawValue == null
                ? null
                : SyncRequestTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the SyncRequestType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="syncRequestType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, SyncRequestType syncRequestType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(SyncRequestTypeValueConverter.ToJsonValue(syncRequestType).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SyncRequestType"/>
    /// </summary>
    public class SyncRequestTypeNullableJsonConverter : JsonConverter<SyncRequestType?>
    {
        /// <summary>
        /// Returns a SyncRequestType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override SyncRequestType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            SyncRequestType? result = rawValue == null
                ? null
                : SyncRequestTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the SyncRequestType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="syncRequestType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, SyncRequestType? syncRequestType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(syncRequestType.HasValue ? SyncRequestTypeValueConverter.ToJsonValue(syncRequestType.Value).ToString() : "null");
        }
    }
}
