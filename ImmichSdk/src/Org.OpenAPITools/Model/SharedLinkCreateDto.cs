// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SharedLinkCreateDto
    /// </summary>
    public partial class SharedLinkCreateDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharedLinkCreateDto" /> class.
        /// </summary>
        /// <param name="type">type</param>
        /// <param name="albumId">albumId</param>
        /// <param name="allowDownload">allowDownload (default to true)</param>
        /// <param name="allowUpload">allowUpload</param>
        /// <param name="assetIds">assetIds</param>
        /// <param name="description">description</param>
        /// <param name="expiresAt">expiresAt</param>
        /// <param name="password">password</param>
        /// <param name="showMetadata">showMetadata (default to true)</param>
        /// <param name="slug">slug</param>
        [JsonConstructor]
        public SharedLinkCreateDto(SharedLinkType type, Option<Guid?> albumId = default, Option<bool?> allowDownload = default, Option<bool?> allowUpload = default, Option<List<Guid>?> assetIds = default, Option<string?> description = default, Option<DateTime?> expiresAt = default, Option<string?> password = default, Option<bool?> showMetadata = default, Option<string?> slug = default)
        {
            Type = type;
            AlbumIdOption = albumId;
            AllowDownloadOption = allowDownload;
            AllowUploadOption = allowUpload;
            AssetIdsOption = assetIds;
            DescriptionOption = description;
            ExpiresAtOption = expiresAt;
            PasswordOption = password;
            ShowMetadataOption = showMetadata;
            SlugOption = slug;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public SharedLinkType Type { get; set; }

        /// <summary>
        /// Used to track the state of AlbumId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> AlbumIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets AlbumId
        /// </summary>
        [JsonPropertyName("albumId")]
        public Guid? AlbumId { get { return this.AlbumIdOption; } set { this.AlbumIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of AllowDownload
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AllowDownloadOption { get; private set; }

        /// <summary>
        /// Gets or Sets AllowDownload
        /// </summary>
        [JsonPropertyName("allowDownload")]
        public bool? AllowDownload { get { return this.AllowDownloadOption; } set { this.AllowDownloadOption = new(value); } }

        /// <summary>
        /// Used to track the state of AllowUpload
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AllowUploadOption { get; private set; }

        /// <summary>
        /// Gets or Sets AllowUpload
        /// </summary>
        [JsonPropertyName("allowUpload")]
        public bool? AllowUpload { get { return this.AllowUploadOption; } set { this.AllowUploadOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssetIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Guid>?> AssetIdsOption { get; private set; }

        /// <summary>
        /// Gets or Sets AssetIds
        /// </summary>
        [JsonPropertyName("assetIds")]
        public List<Guid>? AssetIds { get { return this.AssetIdsOption; } set { this.AssetIdsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExpiresAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> ExpiresAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExpiresAt
        /// </summary>
        [JsonPropertyName("expiresAt")]
        public DateTime? ExpiresAt { get { return this.ExpiresAtOption; } set { this.ExpiresAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Password
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PasswordOption { get; private set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [JsonPropertyName("password")]
        public string? Password { get { return this.PasswordOption; } set { this.PasswordOption = new(value); } }

        /// <summary>
        /// Used to track the state of ShowMetadata
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ShowMetadataOption { get; private set; }

        /// <summary>
        /// Gets or Sets ShowMetadata
        /// </summary>
        [JsonPropertyName("showMetadata")]
        public bool? ShowMetadata { get { return this.ShowMetadataOption; } set { this.ShowMetadataOption = new(value); } }

        /// <summary>
        /// Used to track the state of Slug
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SlugOption { get; private set; }

        /// <summary>
        /// Gets or Sets Slug
        /// </summary>
        [JsonPropertyName("slug")]
        public string? Slug { get { return this.SlugOption; } set { this.SlugOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SharedLinkCreateDto {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AlbumId: ").Append(AlbumId).Append("\n");
            sb.Append("  AllowDownload: ").Append(AllowDownload).Append("\n");
            sb.Append("  AllowUpload: ").Append(AllowUpload).Append("\n");
            sb.Append("  AssetIds: ").Append(AssetIds).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  ShowMetadata: ").Append(ShowMetadata).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SharedLinkCreateDto" />
    /// </summary>
    public class SharedLinkCreateDtoJsonConverter : JsonConverter<SharedLinkCreateDto>
    {
        /// <summary>
        /// The format to use to serialize ExpiresAt
        /// </summary>
        public static string ExpiresAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="SharedLinkCreateDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SharedLinkCreateDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<SharedLinkType?> type = default;
            Option<Guid?> albumId = default;
            Option<bool?> allowDownload = default;
            Option<bool?> allowUpload = default;
            Option<List<Guid>?> assetIds = default;
            Option<string?> description = default;
            Option<DateTime?> expiresAt = default;
            Option<string?> password = default;
            Option<bool?> showMetadata = default;
            Option<string?> slug = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<SharedLinkType?>(SharedLinkTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "albumId":
                            albumId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "allowDownload":
                            allowDownload = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "allowUpload":
                            allowUpload = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "assetIds":
                            assetIds = new Option<List<Guid>?>(JsonSerializer.Deserialize<List<Guid>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "expiresAt":
                            expiresAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "password":
                            password = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "showMetadata":
                            showMetadata = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "slug":
                            slug = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class SharedLinkCreateDto.", nameof(type));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class SharedLinkCreateDto.");

            if (albumId.IsSet && albumId.Value == null)
                throw new ArgumentNullException(nameof(albumId), "Property is not nullable for class SharedLinkCreateDto.");

            if (allowDownload.IsSet && allowDownload.Value == null)
                throw new ArgumentNullException(nameof(allowDownload), "Property is not nullable for class SharedLinkCreateDto.");

            if (allowUpload.IsSet && allowUpload.Value == null)
                throw new ArgumentNullException(nameof(allowUpload), "Property is not nullable for class SharedLinkCreateDto.");

            if (assetIds.IsSet && assetIds.Value == null)
                throw new ArgumentNullException(nameof(assetIds), "Property is not nullable for class SharedLinkCreateDto.");

            if (showMetadata.IsSet && showMetadata.Value == null)
                throw new ArgumentNullException(nameof(showMetadata), "Property is not nullable for class SharedLinkCreateDto.");

            return new SharedLinkCreateDto(type.Value!.Value!, albumId, allowDownload, allowUpload, assetIds, description, expiresAt, password, showMetadata, slug);
        }

        /// <summary>
        /// Serializes a <see cref="SharedLinkCreateDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sharedLinkCreateDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SharedLinkCreateDto sharedLinkCreateDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, sharedLinkCreateDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SharedLinkCreateDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sharedLinkCreateDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SharedLinkCreateDto sharedLinkCreateDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (sharedLinkCreateDto.AssetIdsOption.IsSet && sharedLinkCreateDto.AssetIds == null)
                throw new ArgumentNullException(nameof(sharedLinkCreateDto.AssetIds), "Property is required for class SharedLinkCreateDto.");

            var typeRawValue = SharedLinkTypeValueConverter.ToJsonValue(sharedLinkCreateDto.Type);
            writer.WriteString("type", typeRawValue);

            if (sharedLinkCreateDto.AlbumIdOption.IsSet)
                writer.WriteString("albumId", sharedLinkCreateDto.AlbumIdOption.Value!.Value);

            if (sharedLinkCreateDto.AllowDownloadOption.IsSet)
                writer.WriteBoolean("allowDownload", sharedLinkCreateDto.AllowDownloadOption.Value!.Value);

            if (sharedLinkCreateDto.AllowUploadOption.IsSet)
                writer.WriteBoolean("allowUpload", sharedLinkCreateDto.AllowUploadOption.Value!.Value);

            if (sharedLinkCreateDto.AssetIdsOption.IsSet)
            {
                writer.WritePropertyName("assetIds");
                JsonSerializer.Serialize(writer, sharedLinkCreateDto.AssetIds, jsonSerializerOptions);
            }
            if (sharedLinkCreateDto.DescriptionOption.IsSet)
                if (sharedLinkCreateDto.DescriptionOption.Value != null)
                    writer.WriteString("description", sharedLinkCreateDto.Description);
                else
                    writer.WriteNull("description");

            if (sharedLinkCreateDto.ExpiresAtOption.IsSet)
                if (sharedLinkCreateDto.ExpiresAtOption.Value != null)
                    writer.WriteString("expiresAt", sharedLinkCreateDto.ExpiresAtOption.Value!.Value.ToString(ExpiresAtFormat));
                else
                    writer.WriteNull("expiresAt");

            if (sharedLinkCreateDto.PasswordOption.IsSet)
                if (sharedLinkCreateDto.PasswordOption.Value != null)
                    writer.WriteString("password", sharedLinkCreateDto.Password);
                else
                    writer.WriteNull("password");

            if (sharedLinkCreateDto.ShowMetadataOption.IsSet)
                writer.WriteBoolean("showMetadata", sharedLinkCreateDto.ShowMetadataOption.Value!.Value);

            if (sharedLinkCreateDto.SlugOption.IsSet)
                if (sharedLinkCreateDto.SlugOption.Value != null)
                    writer.WriteString("slug", sharedLinkCreateDto.Slug);
                else
                    writer.WriteNull("slug");
        }
    }
}
