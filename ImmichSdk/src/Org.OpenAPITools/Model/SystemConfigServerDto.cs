// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SystemConfigServerDto
    /// </summary>
    public partial class SystemConfigServerDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigServerDto" /> class.
        /// </summary>
        /// <param name="externalDomain">externalDomain</param>
        /// <param name="loginPageMessage">loginPageMessage</param>
        /// <param name="publicUsers">publicUsers</param>
        [JsonConstructor]
        public SystemConfigServerDto(string externalDomain, string loginPageMessage, bool publicUsers)
        {
            ExternalDomain = externalDomain;
            LoginPageMessage = loginPageMessage;
            PublicUsers = publicUsers;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets ExternalDomain
        /// </summary>
        [JsonPropertyName("externalDomain")]
        public string ExternalDomain { get; set; }

        /// <summary>
        /// Gets or Sets LoginPageMessage
        /// </summary>
        [JsonPropertyName("loginPageMessage")]
        public string LoginPageMessage { get; set; }

        /// <summary>
        /// Gets or Sets PublicUsers
        /// </summary>
        [JsonPropertyName("publicUsers")]
        public bool PublicUsers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SystemConfigServerDto {\n");
            sb.Append("  ExternalDomain: ").Append(ExternalDomain).Append("\n");
            sb.Append("  LoginPageMessage: ").Append(LoginPageMessage).Append("\n");
            sb.Append("  PublicUsers: ").Append(PublicUsers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SystemConfigServerDto" />
    /// </summary>
    public class SystemConfigServerDtoJsonConverter : JsonConverter<SystemConfigServerDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="SystemConfigServerDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SystemConfigServerDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> externalDomain = default;
            Option<string?> loginPageMessage = default;
            Option<bool?> publicUsers = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "externalDomain":
                            externalDomain = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "loginPageMessage":
                            loginPageMessage = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "publicUsers":
                            publicUsers = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!externalDomain.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigServerDto.", nameof(externalDomain));

            if (!loginPageMessage.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigServerDto.", nameof(loginPageMessage));

            if (!publicUsers.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigServerDto.", nameof(publicUsers));

            if (externalDomain.IsSet && externalDomain.Value == null)
                throw new ArgumentNullException(nameof(externalDomain), "Property is not nullable for class SystemConfigServerDto.");

            if (loginPageMessage.IsSet && loginPageMessage.Value == null)
                throw new ArgumentNullException(nameof(loginPageMessage), "Property is not nullable for class SystemConfigServerDto.");

            if (publicUsers.IsSet && publicUsers.Value == null)
                throw new ArgumentNullException(nameof(publicUsers), "Property is not nullable for class SystemConfigServerDto.");

            return new SystemConfigServerDto(externalDomain.Value!, loginPageMessage.Value!, publicUsers.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="SystemConfigServerDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="systemConfigServerDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SystemConfigServerDto systemConfigServerDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, systemConfigServerDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SystemConfigServerDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="systemConfigServerDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SystemConfigServerDto systemConfigServerDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (systemConfigServerDto.ExternalDomain == null)
                throw new ArgumentNullException(nameof(systemConfigServerDto.ExternalDomain), "Property is required for class SystemConfigServerDto.");

            if (systemConfigServerDto.LoginPageMessage == null)
                throw new ArgumentNullException(nameof(systemConfigServerDto.LoginPageMessage), "Property is required for class SystemConfigServerDto.");

            writer.WriteString("externalDomain", systemConfigServerDto.ExternalDomain);

            writer.WriteString("loginPageMessage", systemConfigServerDto.LoginPageMessage);

            writer.WriteBoolean("publicUsers", systemConfigServerDto.PublicUsers);
        }
    }
}
