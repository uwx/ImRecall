// <auto-generated>
/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SystemConfigGeneratedImageDto
    /// </summary>
    public partial class SystemConfigGeneratedImageDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigGeneratedImageDto" /> class.
        /// </summary>
        /// <param name="format">format</param>
        /// <param name="quality">quality</param>
        /// <param name="size">size</param>
        [JsonConstructor]
        public SystemConfigGeneratedImageDto(ImageFormat format, int quality, int size)
        {
            Format = format;
            Quality = quality;
            Size = size;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [JsonPropertyName("format")]
        public ImageFormat Format { get; set; }

        /// <summary>
        /// Gets or Sets Quality
        /// </summary>
        [JsonPropertyName("quality")]
        public int Quality { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [JsonPropertyName("size")]
        public int Size { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SystemConfigGeneratedImageDto {\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Quality: ").Append(Quality).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Quality (int) maximum
            if (this.Quality > (int)100)
            {
                yield return new ValidationResult("Invalid value for Quality, must be a value less than or equal to 100.", new [] { "Quality" });
            }

            // Quality (int) minimum
            if (this.Quality < (int)1)
            {
                yield return new ValidationResult("Invalid value for Quality, must be a value greater than or equal to 1.", new [] { "Quality" });
            }

            // Size (int) minimum
            if (this.Size < (int)1)
            {
                yield return new ValidationResult("Invalid value for Size, must be a value greater than or equal to 1.", new [] { "Size" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SystemConfigGeneratedImageDto" />
    /// </summary>
    public class SystemConfigGeneratedImageDtoJsonConverter : JsonConverter<SystemConfigGeneratedImageDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="SystemConfigGeneratedImageDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SystemConfigGeneratedImageDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ImageFormat?> format = default;
            Option<int?> quality = default;
            Option<int?> size = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "format":
                            string? formatRawValue = utf8JsonReader.GetString();
                            if (formatRawValue != null)
                                format = new Option<ImageFormat?>(ImageFormatValueConverter.FromStringOrDefault(formatRawValue));
                            break;
                        case "quality":
                            quality = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "size":
                            size = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!format.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigGeneratedImageDto.", nameof(format));

            if (!quality.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigGeneratedImageDto.", nameof(quality));

            if (!size.IsSet)
                throw new ArgumentException("Property is required for class SystemConfigGeneratedImageDto.", nameof(size));

            if (format.IsSet && format.Value == null)
                throw new ArgumentNullException(nameof(format), "Property is not nullable for class SystemConfigGeneratedImageDto.");

            if (quality.IsSet && quality.Value == null)
                throw new ArgumentNullException(nameof(quality), "Property is not nullable for class SystemConfigGeneratedImageDto.");

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class SystemConfigGeneratedImageDto.");

            return new SystemConfigGeneratedImageDto(format.Value!.Value!, quality.Value!.Value!, size.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="SystemConfigGeneratedImageDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="systemConfigGeneratedImageDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SystemConfigGeneratedImageDto systemConfigGeneratedImageDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, systemConfigGeneratedImageDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SystemConfigGeneratedImageDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="systemConfigGeneratedImageDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SystemConfigGeneratedImageDto systemConfigGeneratedImageDto, JsonSerializerOptions jsonSerializerOptions)
        {
            var formatRawValue = ImageFormatValueConverter.ToJsonValue(systemConfigGeneratedImageDto.Format);
            writer.WriteString("format", formatRawValue);

            writer.WriteNumber("quality", systemConfigGeneratedImageDto.Quality);

            writer.WriteNumber("size", systemConfigGeneratedImageDto.Size);
        }
    }
}
