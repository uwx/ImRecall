/////////////////////////////////////////////////////////////////
//															   //
// This code is generated by a tool                            //
// https://github.com/StevenThuriot/dotnet-openapi-generator   //
//															   //
/////////////////////////////////////////////////////////////////

#nullable enable

#pragma warning disable CS8618 // Non-nullable variable must contain a non-null value when exiting constructor. Consider declaring it as nullable.

namespace Immich.Clients;

[System.CodeDom.Compiler.GeneratedCode("dotnet-openapi-generator", "8.0.0-preview.15+2dc8cfca012adb9b7e1a243f167db99da7b5cfe4")]
[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
internal struct __QueryBuilder
{
    private System.Text.StringBuilder? _builder;
    public __QueryBuilder()
    {
        _builder = __StringBuilderPool.Acquire();
    }

    public void AddParameter(string? value, string valueExpression)
    {
        if (!string.IsNullOrEmpty(value))
        {
            _ = _builder!.Append('&').Append(valueExpression).Append('=').Append(value);
        }
    }

    public override string ToString()
    {
        try
        {
            if (_builder!.Length > 0)
            {
                _builder[0] = '?';
            }

            return _builder.ToString();
        }
        finally
        {
            __StringBuilderPool.Release(_builder!);
            _builder = null; //Just making sure that we don't share an instance, worst case.
        }
    }

    public void AddParameter<T>(T? value, string valueExpression)
    {
        switch (value)
        {
            case null:
                break;

            case string stringValue:
                AddParameter(stringValue, valueExpression);
                break;

            case Immich.Models.__ICanIterate valueWithParameters:
                AddParameters(valueWithParameters);
                break;

            case System.Collections.IEnumerable values:
                AddParameter(System.Linq.Enumerable.Cast<object>(values), valueExpression);
                break;

            case System.DateTime dateTime:
                AddParameter(dateTime.ToString("o", System.Globalization.CultureInfo.InvariantCulture), valueExpression);
                break;

            default:
                AddParameter(value?.ToString(), valueExpression);
                break;
        }
    }

    public void AddParameter<T>(System.Collections.Generic.List<T>? values, string valueExpression)
    {
        if (values is null)
        {
            return;
        }

        AddParameter(System.Linq.Enumerable.AsEnumerable(values), valueExpression);
    }

    public void AddParameter<T>(System.Collections.Generic.IEnumerable<T?>? values, string valueExpression)
    {
        if (values is null)
        {
            return;
        }

        foreach (T? value in values)
        {
            AddParameter(value, valueExpression);
        }
    }

    private void AddParameters(Immich.Models.__ICanIterate values)
    {
        foreach (var (name, value) in values.IterateProperties())
        {
            AddParameter(value, name);
        }
    }
}