/////////////////////////////////////////////////////////////////
//															   //
// This code is generated by a tool                            //
// https://github.com/StevenThuriot/dotnet-openapi-generator   //
//															   //
/////////////////////////////////////////////////////////////////

#nullable enable

#pragma warning disable CS8618 // Non-nullable variable must contain a non-null value when exiting constructor. Consider declaring it as nullable.

using Immich.Models;

namespace Immich.Clients;

[System.CodeDom.Compiler.GeneratedCode("dotnet-openapi-generator", "8.0.0-preview.15+2dc8cfca012adb9b7e1a243f167db99da7b5cfe4")]
[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
public sealed class APIKeysClient
{
    private readonly System.Net.Http.HttpClient __my_http_client;
    private readonly ClientOptions __my_options;

    public APIKeysClient(System.Net.Http.HttpClient client, ClientOptions options)
    {
        __my_http_client = client;
        __my_options = options;
    }

    /// <summary>
    /// HTTP Get on /api-keys
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> getApiKeysWithHttpInfoAsync(System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Get, $"api-keys", token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// HTTP Get on /api-keys
    /// </summary>
    public async System.Threading.Tasks.Task<System.Collections.Generic.List<APIKeyResponseDto>?> getApiKeysAsync(System.Threading.CancellationToken token = default)
    {
        var __result = await getApiKeysWithHttpInfoAsync(token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<System.Collections.Generic.List<APIKeyResponseDto>?>(__result, token);
    }

    /// <summary>
    /// HTTP Post on /api-keys
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> createApiKeyWithHttpInfoAsync(APIKeyCreateDto body, System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Post, $"api-keys", body, token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// HTTP Post on /api-keys
    /// </summary>
    public async System.Threading.Tasks.Task createApiKeyAsync(APIKeyCreateDto body, System.Threading.CancellationToken token = default)
    {
        var __result = await createApiKeyWithHttpInfoAsync(body, token);
        await __my_options.InterceptResponse(__result, token);
    }

    /// <summary>
    /// HTTP Get on /api-keys/me
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> getMyApiKeyWithHttpInfoAsync(System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Get, $"api-keys/me", token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// HTTP Get on /api-keys/me
    /// </summary>
    public async System.Threading.Tasks.Task<APIKeyResponseDto?> getMyApiKeyAsync(System.Threading.CancellationToken token = default)
    {
        var __result = await getMyApiKeyWithHttpInfoAsync(token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<APIKeyResponseDto?>(__result, token);
    }

    /// <summary>
    /// HTTP Get on /api-keys/{id}
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> getApiKeyWithHttpInfoAsync(System.Guid id, System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Get, $"api-keys/{id}", token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// HTTP Get on /api-keys/{id}
    /// </summary>
    public async System.Threading.Tasks.Task<APIKeyResponseDto?> getApiKeyAsync(System.Guid id, System.Threading.CancellationToken token = default)
    {
        var __result = await getApiKeyWithHttpInfoAsync(id, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<APIKeyResponseDto?>(__result, token);
    }

    /// <summary>
    /// HTTP Put on /api-keys/{id}
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> updateApiKeyWithHttpInfoAsync(APIKeyUpdateDto body, System.Guid id, System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Put, $"api-keys/{id}", body, token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// HTTP Put on /api-keys/{id}
    /// </summary>
    public async System.Threading.Tasks.Task<APIKeyResponseDto?> updateApiKeyAsync(APIKeyUpdateDto body, System.Guid id, System.Threading.CancellationToken token = default)
    {
        var __result = await updateApiKeyWithHttpInfoAsync(body, id, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<APIKeyResponseDto?>(__result, token);
    }

    /// <summary>
    /// HTTP Delete on /api-keys/{id}
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> deleteApiKeyWithHttpInfoAsync(System.Guid id, System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Delete, $"api-keys/{id}", token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// HTTP Delete on /api-keys/{id}
    /// </summary>
    public async System.Threading.Tasks.Task deleteApiKeyAsync(System.Guid id, System.Threading.CancellationToken token = default)
    {
        var __result = await deleteApiKeyWithHttpInfoAsync(id, token);
        await __my_options.InterceptResponse(__result, token);
    }
}
