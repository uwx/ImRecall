/////////////////////////////////////////////////////////////////
//															   //
// This code is generated by a tool                            //
// https://github.com/StevenThuriot/dotnet-openapi-generator   //
//															   //
/////////////////////////////////////////////////////////////////

#nullable enable

#pragma warning disable CS8618 // Non-nullable variable must contain a non-null value when exiting constructor. Consider declaring it as nullable.

using Immich.Models;

namespace Immich.Clients;

[System.CodeDom.Compiler.GeneratedCode("dotnet-openapi-generator", "8.0.0-preview.15+2dc8cfca012adb9b7e1a243f167db99da7b5cfe4")]
[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
public sealed class ActivitiesClient
{
    private readonly System.Net.Http.HttpClient __my_http_client;
    private readonly ClientOptions __my_options;

    public ActivitiesClient(System.Net.Http.HttpClient client, ClientOptions options)
    {
        __my_http_client = client;
        __my_options = options;
    }

    /// <summary>
    /// HTTP Get on /activities
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> getActivitiesWithHttpInfoAsync(System.Guid albumId, System.Guid? assetId = default, ReactionLevel? level = default, ReactionType? type = default, System.Guid? userId = default, System.Threading.CancellationToken token = default)
    {
        __QueryBuilder __my_queryBuilder = new();
        __my_queryBuilder.AddParameter(albumId, "albumId");
        __my_queryBuilder.AddParameter(assetId, "assetId");
        __my_queryBuilder.AddParameter(level switch
		{
			ReactionLevel.album => "album",
			ReactionLevel.asset => "asset",
			_ => null
		}, "level");
        __my_queryBuilder.AddParameter(type switch
		{
			ReactionType.comment => "comment",
			ReactionType.like => "like",
			_ => null
		}, "type");
        __my_queryBuilder.AddParameter(userId, "userId");

        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Get, $"activities{__my_queryBuilder}", token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// HTTP Get on /activities
    /// </summary>
    public async System.Threading.Tasks.Task<System.Collections.Generic.List<ActivityResponseDto>?> getActivitiesAsync(System.Guid albumId, System.Guid? assetId = default, ReactionLevel? level = default, ReactionType? type = default, System.Guid? userId = default, System.Threading.CancellationToken token = default)
    {
        var __result = await getActivitiesWithHttpInfoAsync(albumId, assetId, level, type, userId, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<System.Collections.Generic.List<ActivityResponseDto>?>(__result, token);
    }

    /// <summary>
    /// HTTP Post on /activities
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> createActivityWithHttpInfoAsync(ActivityCreateDto body, System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Post, $"activities", body, token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// HTTP Post on /activities
    /// </summary>
    public async System.Threading.Tasks.Task createActivityAsync(ActivityCreateDto body, System.Threading.CancellationToken token = default)
    {
        var __result = await createActivityWithHttpInfoAsync(body, token);
        await __my_options.InterceptResponse(__result, token);
    }

    /// <summary>
    /// HTTP Get on /activities/statistics
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> getActivityStatisticsWithHttpInfoAsync(System.Guid albumId, System.Guid? assetId = default, System.Threading.CancellationToken token = default)
    {
        __QueryBuilder __my_queryBuilder = new();
        __my_queryBuilder.AddParameter(albumId, "albumId");
        __my_queryBuilder.AddParameter(assetId, "assetId");

        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Get, $"activities/statistics{__my_queryBuilder}", token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// HTTP Get on /activities/statistics
    /// </summary>
    public async System.Threading.Tasks.Task<ActivityStatisticsResponseDto?> getActivityStatisticsAsync(System.Guid albumId, System.Guid? assetId = default, System.Threading.CancellationToken token = default)
    {
        var __result = await getActivityStatisticsWithHttpInfoAsync(albumId, assetId, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<ActivityStatisticsResponseDto?>(__result, token);
    }

    /// <summary>
    /// HTTP Delete on /activities/{id}
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> deleteActivityWithHttpInfoAsync(System.Guid id, System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Delete, $"activities/{id}", token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// HTTP Delete on /activities/{id}
    /// </summary>
    public async System.Threading.Tasks.Task deleteActivityAsync(System.Guid id, System.Threading.CancellationToken token = default)
    {
        var __result = await deleteActivityWithHttpInfoAsync(id, token);
        await __my_options.InterceptResponse(__result, token);
    }
}
