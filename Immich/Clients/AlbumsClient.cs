/////////////////////////////////////////////////////////////////
//															   //
// This code is generated by a tool                            //
// https://github.com/StevenThuriot/dotnet-openapi-generator   //
//															   //
/////////////////////////////////////////////////////////////////

#nullable enable

#pragma warning disable CS8618 // Non-nullable variable must contain a non-null value when exiting constructor. Consider declaring it as nullable.

using Immich.Models;

namespace Immich.Clients;

[System.CodeDom.Compiler.GeneratedCode("dotnet-openapi-generator", "8.0.0-preview.15+2dc8cfca012adb9b7e1a243f167db99da7b5cfe4")]
[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
public sealed class AlbumsClient
{
    private readonly System.Net.Http.HttpClient __my_http_client;
    private readonly ClientOptions __my_options;

    public AlbumsClient(System.Net.Http.HttpClient client, ClientOptions options)
    {
        __my_http_client = client;
        __my_options = options;
    }

    /// <summary>
    /// HTTP Get on /albums
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> getAllAlbumsWithHttpInfoAsync(System.Guid? assetId = default, bool? shared = default, System.Threading.CancellationToken token = default)
    {
        __QueryBuilder __my_queryBuilder = new();
        __my_queryBuilder.AddParameter(assetId, "assetId");
        __my_queryBuilder.AddParameter(shared, "shared");

        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Get, $"albums{__my_queryBuilder}", token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// HTTP Get on /albums
    /// </summary>
    public async System.Threading.Tasks.Task<System.Collections.Generic.List<AlbumResponseDto>?> getAllAlbumsAsync(System.Guid? assetId = default, bool? shared = default, System.Threading.CancellationToken token = default)
    {
        var __result = await getAllAlbumsWithHttpInfoAsync(assetId, shared, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<System.Collections.Generic.List<AlbumResponseDto>?>(__result, token);
    }

    /// <summary>
    /// HTTP Post on /albums
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> createAlbumWithHttpInfoAsync(CreateAlbumDto body, System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Post, $"albums", body, token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// HTTP Post on /albums
    /// </summary>
    public async System.Threading.Tasks.Task createAlbumAsync(CreateAlbumDto body, System.Threading.CancellationToken token = default)
    {
        var __result = await createAlbumWithHttpInfoAsync(body, token);
        await __my_options.InterceptResponse(__result, token);
    }

    /// <summary>
    /// HTTP Put on /albums/assets
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> addAssetsToAlbumsWithHttpInfoAsync(AlbumsAddAssetsDto body, string? key = default, string? slug = default, System.Threading.CancellationToken token = default)
    {
        __QueryBuilder __my_queryBuilder = new();
        __my_queryBuilder.AddParameter(key, "key");
        __my_queryBuilder.AddParameter(slug, "slug");

        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Put, $"albums/assets{__my_queryBuilder}", body, token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// HTTP Put on /albums/assets
    /// </summary>
    public async System.Threading.Tasks.Task<AlbumsAddAssetsResponseDto?> addAssetsToAlbumsAsync(AlbumsAddAssetsDto body, string? key = default, string? slug = default, System.Threading.CancellationToken token = default)
    {
        var __result = await addAssetsToAlbumsWithHttpInfoAsync(body, key, slug, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<AlbumsAddAssetsResponseDto?>(__result, token);
    }

    /// <summary>
    /// HTTP Get on /albums/statistics
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> getAlbumStatisticsWithHttpInfoAsync(System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Get, $"albums/statistics", token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// HTTP Get on /albums/statistics
    /// </summary>
    public async System.Threading.Tasks.Task<AlbumStatisticsResponseDto?> getAlbumStatisticsAsync(System.Threading.CancellationToken token = default)
    {
        var __result = await getAlbumStatisticsWithHttpInfoAsync(token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<AlbumStatisticsResponseDto?>(__result, token);
    }

    /// <summary>
    /// HTTP Get on /albums/{id}
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> getAlbumInfoWithHttpInfoAsync(System.Guid id, string? key = default, string? slug = default, bool? withoutAssets = default, System.Threading.CancellationToken token = default)
    {
        __QueryBuilder __my_queryBuilder = new();
        __my_queryBuilder.AddParameter(key, "key");
        __my_queryBuilder.AddParameter(slug, "slug");
        __my_queryBuilder.AddParameter(withoutAssets, "withoutAssets");

        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Get, $"albums/{id}{__my_queryBuilder}", token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// HTTP Get on /albums/{id}
    /// </summary>
    public async System.Threading.Tasks.Task<AlbumResponseDto?> getAlbumInfoAsync(System.Guid id, string? key = default, string? slug = default, bool? withoutAssets = default, System.Threading.CancellationToken token = default)
    {
        var __result = await getAlbumInfoWithHttpInfoAsync(id, key, slug, withoutAssets, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<AlbumResponseDto?>(__result, token);
    }

    /// <summary>
    /// HTTP Delete on /albums/{id}
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> deleteAlbumWithHttpInfoAsync(System.Guid id, System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Delete, $"albums/{id}", token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// HTTP Delete on /albums/{id}
    /// </summary>
    public async System.Threading.Tasks.Task deleteAlbumAsync(System.Guid id, System.Threading.CancellationToken token = default)
    {
        var __result = await deleteAlbumWithHttpInfoAsync(id, token);
        await __my_options.InterceptResponse(__result, token);
    }

    /// <summary>
    /// HTTP Put on /albums/{id}/assets
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> addAssetsToAlbumWithHttpInfoAsync(BulkIdsDto body, System.Guid id, string? key = default, string? slug = default, System.Threading.CancellationToken token = default)
    {
        __QueryBuilder __my_queryBuilder = new();
        __my_queryBuilder.AddParameter(key, "key");
        __my_queryBuilder.AddParameter(slug, "slug");

        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Put, $"albums/{id}/assets{__my_queryBuilder}", body, token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// HTTP Put on /albums/{id}/assets
    /// </summary>
    public async System.Threading.Tasks.Task<System.Collections.Generic.List<BulkIdResponseDto>?> addAssetsToAlbumAsync(BulkIdsDto body, System.Guid id, string? key = default, string? slug = default, System.Threading.CancellationToken token = default)
    {
        var __result = await addAssetsToAlbumWithHttpInfoAsync(body, id, key, slug, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<System.Collections.Generic.List<BulkIdResponseDto>?>(__result, token);
    }

    /// <summary>
    /// HTTP Delete on /albums/{id}/assets
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> removeAssetFromAlbumWithHttpInfoAsync(BulkIdsDto body, System.Guid id, System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Delete, $"albums/{id}/assets", body, token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// HTTP Delete on /albums/{id}/assets
    /// </summary>
    public async System.Threading.Tasks.Task<System.Collections.Generic.List<BulkIdResponseDto>?> removeAssetFromAlbumAsync(BulkIdsDto body, System.Guid id, System.Threading.CancellationToken token = default)
    {
        var __result = await removeAssetFromAlbumWithHttpInfoAsync(body, id, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<System.Collections.Generic.List<BulkIdResponseDto>?>(__result, token);
    }

    /// <summary>
    /// HTTP Put on /albums/{id}/user/{userId}
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> updateAlbumUserWithHttpInfoAsync(UpdateAlbumUserDto body, System.Guid id, string userId, System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Put, $"albums/{id}/user/{userId}", body, token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// HTTP Put on /albums/{id}/user/{userId}
    /// </summary>
    public async System.Threading.Tasks.Task updateAlbumUserAsync(UpdateAlbumUserDto body, System.Guid id, string userId, System.Threading.CancellationToken token = default)
    {
        var __result = await updateAlbumUserWithHttpInfoAsync(body, id, userId, token);
        await __my_options.InterceptResponse(__result, token);
    }

    /// <summary>
    /// HTTP Delete on /albums/{id}/user/{userId}
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> removeUserFromAlbumWithHttpInfoAsync(System.Guid id, string userId, System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Delete, $"albums/{id}/user/{userId}", token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// HTTP Delete on /albums/{id}/user/{userId}
    /// </summary>
    public async System.Threading.Tasks.Task removeUserFromAlbumAsync(System.Guid id, string userId, System.Threading.CancellationToken token = default)
    {
        var __result = await removeUserFromAlbumWithHttpInfoAsync(id, userId, token);
        await __my_options.InterceptResponse(__result, token);
    }

    /// <summary>
    /// HTTP Put on /albums/{id}/users
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> addUsersToAlbumWithHttpInfoAsync(AddUsersDto body, System.Guid id, System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Put, $"albums/{id}/users", body, token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// HTTP Put on /albums/{id}/users
    /// </summary>
    public async System.Threading.Tasks.Task<AlbumResponseDto?> addUsersToAlbumAsync(AddUsersDto body, System.Guid id, System.Threading.CancellationToken token = default)
    {
        var __result = await addUsersToAlbumWithHttpInfoAsync(body, id, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<AlbumResponseDto?>(__result, token);
    }
}
