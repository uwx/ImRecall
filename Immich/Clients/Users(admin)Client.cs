/////////////////////////////////////////////////////////////////
//															   //
// This code is generated by a tool                            //
// https://github.com/StevenThuriot/dotnet-openapi-generator   //
//															   //
/////////////////////////////////////////////////////////////////

#nullable enable

#pragma warning disable CS8618 // Non-nullable variable must contain a non-null value when exiting constructor. Consider declaring it as nullable.

using Immich.Models;

namespace Immich.Clients;

[System.CodeDom.Compiler.GeneratedCode("dotnet-openapi-generator", "8.0.0-preview.15+2dc8cfca012adb9b7e1a243f167db99da7b5cfe4")]
[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
public sealed class Users(admin)Client
{
    private readonly System.Net.Http.HttpClient __my_http_client;
    private readonly ClientOptions __my_options;

    public Users(admin)Client(System.Net.Http.HttpClient client, ClientOptions options)
    {
        __my_http_client = client;
        __my_options = options;
    }

    /// <summary>
    /// HTTP Get on /admin/users
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> searchUsersAdminWithHttpInfoAsync(System.Guid? id = default, bool? withDeleted = default, System.Threading.CancellationToken token = default)
    {
        __QueryBuilder __my_queryBuilder = new();
        __my_queryBuilder.AddParameter(id, "id");
        __my_queryBuilder.AddParameter(withDeleted, "withDeleted");

        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Get, $"admin/users{__my_queryBuilder}", token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// HTTP Get on /admin/users
    /// </summary>
    public async System.Threading.Tasks.Task<System.Collections.Generic.List<UserAdminResponseDto>?> searchUsersAdminAsync(System.Guid? id = default, bool? withDeleted = default, System.Threading.CancellationToken token = default)
    {
        var __result = await searchUsersAdminWithHttpInfoAsync(id, withDeleted, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<System.Collections.Generic.List<UserAdminResponseDto>?>(__result, token);
    }

    /// <summary>
    /// HTTP Post on /admin/users
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> createUserAdminWithHttpInfoAsync(UserAdminCreateDto body, System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Post, $"admin/users", body, token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// HTTP Post on /admin/users
    /// </summary>
    public async System.Threading.Tasks.Task createUserAdminAsync(UserAdminCreateDto body, System.Threading.CancellationToken token = default)
    {
        var __result = await createUserAdminWithHttpInfoAsync(body, token);
        await __my_options.InterceptResponse(__result, token);
    }

    /// <summary>
    /// HTTP Get on /admin/users/{id}
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> getUserAdminWithHttpInfoAsync(System.Guid id, System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Get, $"admin/users/{id}", token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// HTTP Get on /admin/users/{id}
    /// </summary>
    public async System.Threading.Tasks.Task<UserAdminResponseDto?> getUserAdminAsync(System.Guid id, System.Threading.CancellationToken token = default)
    {
        var __result = await getUserAdminWithHttpInfoAsync(id, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<UserAdminResponseDto?>(__result, token);
    }

    /// <summary>
    /// HTTP Put on /admin/users/{id}
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> updateUserAdminWithHttpInfoAsync(UserAdminUpdateDto body, System.Guid id, System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Put, $"admin/users/{id}", body, token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// HTTP Put on /admin/users/{id}
    /// </summary>
    public async System.Threading.Tasks.Task<UserAdminResponseDto?> updateUserAdminAsync(UserAdminUpdateDto body, System.Guid id, System.Threading.CancellationToken token = default)
    {
        var __result = await updateUserAdminWithHttpInfoAsync(body, id, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<UserAdminResponseDto?>(__result, token);
    }

    /// <summary>
    /// HTTP Delete on /admin/users/{id}
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> deleteUserAdminWithHttpInfoAsync(UserAdminDeleteDto body, System.Guid id, System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Delete, $"admin/users/{id}", body, token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// HTTP Delete on /admin/users/{id}
    /// </summary>
    public async System.Threading.Tasks.Task<UserAdminResponseDto?> deleteUserAdminAsync(UserAdminDeleteDto body, System.Guid id, System.Threading.CancellationToken token = default)
    {
        var __result = await deleteUserAdminWithHttpInfoAsync(body, id, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<UserAdminResponseDto?>(__result, token);
    }

    /// <summary>
    /// HTTP Get on /admin/users/{id}/preferences
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> getUserPreferencesAdminWithHttpInfoAsync(System.Guid id, System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Get, $"admin/users/{id}/preferences", token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// HTTP Get on /admin/users/{id}/preferences
    /// </summary>
    public async System.Threading.Tasks.Task<UserPreferencesResponseDto?> getUserPreferencesAdminAsync(System.Guid id, System.Threading.CancellationToken token = default)
    {
        var __result = await getUserPreferencesAdminWithHttpInfoAsync(id, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<UserPreferencesResponseDto?>(__result, token);
    }

    /// <summary>
    /// HTTP Put on /admin/users/{id}/preferences
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> updateUserPreferencesAdminWithHttpInfoAsync(UserPreferencesUpdateDto body, System.Guid id, System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Put, $"admin/users/{id}/preferences", body, token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// HTTP Put on /admin/users/{id}/preferences
    /// </summary>
    public async System.Threading.Tasks.Task<UserPreferencesResponseDto?> updateUserPreferencesAdminAsync(UserPreferencesUpdateDto body, System.Guid id, System.Threading.CancellationToken token = default)
    {
        var __result = await updateUserPreferencesAdminWithHttpInfoAsync(body, id, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<UserPreferencesResponseDto?>(__result, token);
    }

    /// <summary>
    /// HTTP Post on /admin/users/{id}/restore
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> restoreUserAdminWithHttpInfoAsync(System.Guid id, System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Post, $"admin/users/{id}/restore", token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// HTTP Post on /admin/users/{id}/restore
    /// </summary>
    public async System.Threading.Tasks.Task<UserAdminResponseDto?> restoreUserAdminAsync(System.Guid id, System.Threading.CancellationToken token = default)
    {
        var __result = await restoreUserAdminWithHttpInfoAsync(id, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<UserAdminResponseDto?>(__result, token);
    }

    /// <summary>
    /// HTTP Get on /admin/users/{id}/sessions
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> getUserSessionsAdminWithHttpInfoAsync(System.Guid id, System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Get, $"admin/users/{id}/sessions", token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// HTTP Get on /admin/users/{id}/sessions
    /// </summary>
    public async System.Threading.Tasks.Task<System.Collections.Generic.List<SessionResponseDto>?> getUserSessionsAdminAsync(System.Guid id, System.Threading.CancellationToken token = default)
    {
        var __result = await getUserSessionsAdminWithHttpInfoAsync(id, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<System.Collections.Generic.List<SessionResponseDto>?>(__result, token);
    }

    /// <summary>
    /// HTTP Get on /admin/users/{id}/statistics
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> getUserStatisticsAdminWithHttpInfoAsync(System.Guid id, bool? isFavorite = default, bool? isTrashed = default, AssetVisibility? visibility = default, System.Threading.CancellationToken token = default)
    {
        __QueryBuilder __my_queryBuilder = new();
        __my_queryBuilder.AddParameter(isFavorite, "isFavorite");
        __my_queryBuilder.AddParameter(isTrashed, "isTrashed");
        __my_queryBuilder.AddParameter(visibility switch
		{
			AssetVisibility.archive => "archive",
			AssetVisibility.timeline => "timeline",
			AssetVisibility.hidden => "hidden",
			AssetVisibility.locked => "locked",
			_ => null
		}, "visibility");

        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Get, $"admin/users/{id}/statistics{__my_queryBuilder}", token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// HTTP Get on /admin/users/{id}/statistics
    /// </summary>
    public async System.Threading.Tasks.Task<AssetStatsResponseDto?> getUserStatisticsAdminAsync(System.Guid id, bool? isFavorite = default, bool? isTrashed = default, AssetVisibility? visibility = default, System.Threading.CancellationToken token = default)
    {
        var __result = await getUserStatisticsAdminWithHttpInfoAsync(id, isFavorite, isTrashed, visibility, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<AssetStatsResponseDto?>(__result, token);
    }
}
