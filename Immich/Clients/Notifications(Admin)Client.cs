/////////////////////////////////////////////////////////////////
//															   //
// This code is generated by a tool                            //
// https://github.com/StevenThuriot/dotnet-openapi-generator   //
//															   //
/////////////////////////////////////////////////////////////////

#nullable enable

#pragma warning disable CS8618 // Non-nullable variable must contain a non-null value when exiting constructor. Consider declaring it as nullable.

using Immich.Models;

namespace Immich.Clients;

[System.CodeDom.Compiler.GeneratedCode("dotnet-openapi-generator", "8.0.0-preview.15+2dc8cfca012adb9b7e1a243f167db99da7b5cfe4")]
[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
public sealed class Notifications(Admin)Client
{
    private readonly System.Net.Http.HttpClient __my_http_client;
    private readonly ClientOptions __my_options;

    public Notifications(Admin)Client(System.Net.Http.HttpClient client, ClientOptions options)
    {
        __my_http_client = client;
        __my_options = options;
    }

    /// <summary>
    /// HTTP Post on /admin/notifications
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> createNotificationWithHttpInfoAsync(NotificationCreateDto body, System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Post, $"admin/notifications", body, token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// HTTP Post on /admin/notifications
    /// </summary>
    public async System.Threading.Tasks.Task createNotificationAsync(NotificationCreateDto body, System.Threading.CancellationToken token = default)
    {
        var __result = await createNotificationWithHttpInfoAsync(body, token);
        await __my_options.InterceptResponse(__result, token);
    }

    /// <summary>
    /// HTTP Post on /admin/notifications/templates/{name}
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> getNotificationTemplateAdminWithHttpInfoAsync(TemplateDto body, string name, System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Post, $"admin/notifications/templates/{name}", body, token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// HTTP Post on /admin/notifications/templates/{name}
    /// </summary>
    public async System.Threading.Tasks.Task<TemplateResponseDto?> getNotificationTemplateAdminAsync(TemplateDto body, string name, System.Threading.CancellationToken token = default)
    {
        var __result = await getNotificationTemplateAdminWithHttpInfoAsync(body, name, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<TemplateResponseDto?>(__result, token);
    }

    /// <summary>
    /// HTTP Post on /admin/notifications/test-email
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> sendTestEmailAdminWithHttpInfoAsync(SystemConfigSmtpDto body, System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Post, $"admin/notifications/test-email", body, token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// HTTP Post on /admin/notifications/test-email
    /// </summary>
    public async System.Threading.Tasks.Task<TestEmailResponseDto?> sendTestEmailAdminAsync(SystemConfigSmtpDto body, System.Threading.CancellationToken token = default)
    {
        var __result = await sendTestEmailAdminWithHttpInfoAsync(body, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<TestEmailResponseDto?>(__result, token);
    }
}
